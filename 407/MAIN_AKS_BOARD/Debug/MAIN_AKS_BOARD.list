
MAIN_AKS_BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a960  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005fc  0800aaf0  0800aaf0  0001aaf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0ec  0800b0ec  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0ec  0800b0ec  0001b0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0f4  0800b0f4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0f4  0800b0f4  0001b0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0f8  0800b0f8  0001b0f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b0fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e4  2**0
                  CONTENTS
 10 .bss          000041ac  200001e8  200001e8  000201e8  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20004394  20004394  000201e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000159a5  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f65  00000000  00000000  00035bb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001378  00000000  00000000  00038b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001258  00000000  00000000  00039e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025146  00000000  00000000  0003b0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001547f  00000000  00000000  00060236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3f9b  00000000  00000000  000756b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00159650  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067fc  00000000  00000000  001596a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  0015fe9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  0015fec0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aad8 	.word	0x0800aad8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800aad8 	.word	0x0800aad8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4a07      	ldr	r2, [pc, #28]	; (8001024 <vApplicationGetIdleTaskMemory+0x2c>)
 8001008:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <vApplicationGetIdleTaskMemory+0x30>)
 800100e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2280      	movs	r2, #128	; 0x80
 8001014:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001016:	bf00      	nop
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000204 	.word	0x20000204
 8001028:	20000258 	.word	0x20000258

0800102c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800102c:	b5b0      	push	{r4, r5, r7, lr}
 800102e:	b09c      	sub	sp, #112	; 0x70
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001032:	f000 fed5 	bl	8001de0 <HAL_Init>

  /* USER CODE BEGIN Init */
  ecar->wheel_radius = 0.2932;
 8001036:	4b47      	ldr	r3, [pc, #284]	; (8001154 <main+0x128>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a47      	ldr	r2, [pc, #284]	; (8001158 <main+0x12c>)
 800103c:	659a      	str	r2, [r3, #88]	; 0x58
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103e:	f000 f8a3 	bl	8001188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001042:	f000 f9e7 	bl	8001414 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001046:	f000 f95b 	bl	8001300 <MX_CAN1_Init>
  MX_ADC1_Init();
 800104a:	f000 f907 	bl	800125c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800104e:	f000 f98d 	bl	800136c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001052:	f000 f9b5 	bl	80013c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan1);
 8001056:	4841      	ldr	r0, [pc, #260]	; (800115c <main+0x130>)
 8001058:	f001 fce0 	bl	8002a1c <HAL_CAN_Start>

      HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);  // enable interrupt
 800105c:	2102      	movs	r1, #2
 800105e:	483f      	ldr	r0, [pc, #252]	; (800115c <main+0x130>)
 8001060:	f001 fe32 	bl	8002cc8 <HAL_CAN_ActivateNotification>

      pTxHeader.DLC = 1;
 8001064:	4b3e      	ldr	r3, [pc, #248]	; (8001160 <main+0x134>)
 8001066:	2201      	movs	r2, #1
 8001068:	611a      	str	r2, [r3, #16]
      pTxHeader.IDE = CAN_ID_STD;
 800106a:	4b3d      	ldr	r3, [pc, #244]	; (8001160 <main+0x134>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
      pTxHeader.RTR = CAN_RTR_DATA;
 8001070:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <main+0x134>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
      pTxHeader.StdId = 0x012;
 8001076:	4b3a      	ldr	r3, [pc, #232]	; (8001160 <main+0x134>)
 8001078:	2212      	movs	r2, #18
 800107a:	601a      	str	r2, [r3, #0]

      //set filter parameters
      sFilterConfig.FilterActivation = ENABLE;
 800107c:	4b39      	ldr	r3, [pc, #228]	; (8001164 <main+0x138>)
 800107e:	2201      	movs	r2, #1
 8001080:	621a      	str	r2, [r3, #32]
      sFilterConfig.FilterBank = 0;
 8001082:	4b38      	ldr	r3, [pc, #224]	; (8001164 <main+0x138>)
 8001084:	2200      	movs	r2, #0
 8001086:	615a      	str	r2, [r3, #20]
      sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001088:	4b36      	ldr	r3, [pc, #216]	; (8001164 <main+0x138>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
      sFilterConfig.FilterIdHigh = 0x0000;
 800108e:	4b35      	ldr	r3, [pc, #212]	; (8001164 <main+0x138>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
      sFilterConfig.FilterIdLow = 0x0000;
 8001094:	4b33      	ldr	r3, [pc, #204]	; (8001164 <main+0x138>)
 8001096:	2200      	movs	r2, #0
 8001098:	605a      	str	r2, [r3, #4]
      sFilterConfig.FilterMaskIdHigh = 0x0000 << 5;
 800109a:	4b32      	ldr	r3, [pc, #200]	; (8001164 <main+0x138>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
      sFilterConfig.FilterMaskIdLow = 0x0000 << 5;
 80010a0:	4b30      	ldr	r3, [pc, #192]	; (8001164 <main+0x138>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
      sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80010a6:	4b2f      	ldr	r3, [pc, #188]	; (8001164 <main+0x138>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	619a      	str	r2, [r3, #24]
      sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80010ac:	4b2d      	ldr	r3, [pc, #180]	; (8001164 <main+0x138>)
 80010ae:	2201      	movs	r2, #1
 80010b0:	61da      	str	r2, [r3, #28]

      HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80010b2:	492c      	ldr	r1, [pc, #176]	; (8001164 <main+0x138>)
 80010b4:	4829      	ldr	r0, [pc, #164]	; (800115c <main+0x130>)
 80010b6:	f001 fbd1 	bl	800285c <HAL_CAN_ConfigFilter>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of can_task */
  osThreadDef(can_task, can_start, osPriorityNormal, 0, 128);
 80010ba:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <main+0x13c>)
 80010bc:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80010c0:	461d      	mov	r5, r3
 80010c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  can_taskHandle = osThreadCreate(osThread(can_task), NULL);
 80010ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010d2:	2100      	movs	r1, #0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f003 fdee 	bl	8004cb6 <osThreadCreate>
 80010da:	4603      	mov	r3, r0
 80010dc:	4a23      	ldr	r2, [pc, #140]	; (800116c <main+0x140>)
 80010de:	6013      	str	r3, [r2, #0]

  /* definition and creation of rf_task */
  osThreadDef(rf_task, rf_start, osPriorityIdle, 0, 128);
 80010e0:	4b23      	ldr	r3, [pc, #140]	; (8001170 <main+0x144>)
 80010e2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80010e6:	461d      	mov	r5, r3
 80010e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rf_taskHandle = osThreadCreate(osThread(rf_task), NULL);
 80010f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 fddb 	bl	8004cb6 <osThreadCreate>
 8001100:	4603      	mov	r3, r0
 8001102:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <main+0x148>)
 8001104:	6013      	str	r3, [r2, #0]

  /* definition and creation of gps_task */
  osThreadDef(gps_task, gps_start, osPriorityIdle, 0, 128);
 8001106:	4b1c      	ldr	r3, [pc, #112]	; (8001178 <main+0x14c>)
 8001108:	f107 041c 	add.w	r4, r7, #28
 800110c:	461d      	mov	r5, r3
 800110e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001112:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001116:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  gps_taskHandle = osThreadCreate(osThread(gps_task), NULL);
 800111a:	f107 031c 	add.w	r3, r7, #28
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f003 fdc8 	bl	8004cb6 <osThreadCreate>
 8001126:	4603      	mov	r3, r0
 8001128:	4a14      	ldr	r2, [pc, #80]	; (800117c <main+0x150>)
 800112a:	6013      	str	r3, [r2, #0]

  /* definition and creation of calculate_speed */
  osThreadDef(calculate_speed, speed_start, osPriorityIdle, 0, 128);
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <main+0x154>)
 800112e:	463c      	mov	r4, r7
 8001130:	461d      	mov	r5, r3
 8001132:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001134:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001136:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800113a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  calculate_speedHandle = osThreadCreate(osThread(calculate_speed), NULL);
 800113e:	463b      	mov	r3, r7
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f003 fdb7 	bl	8004cb6 <osThreadCreate>
 8001148:	4603      	mov	r3, r0
 800114a:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <main+0x158>)
 800114c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800114e:	f003 fdab 	bl	8004ca8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001152:	e7fe      	b.n	8001152 <main+0x126>
 8001154:	200005dc 	.word	0x200005dc
 8001158:	3e961e4f 	.word	0x3e961e4f
 800115c:	200004a0 	.word	0x200004a0
 8001160:	20000560 	.word	0x20000560
 8001164:	20000594 	.word	0x20000594
 8001168:	0800ab20 	.word	0x0800ab20
 800116c:	20000550 	.word	0x20000550
 8001170:	0800ab3c 	.word	0x0800ab3c
 8001174:	20000554 	.word	0x20000554
 8001178:	0800ab58 	.word	0x0800ab58
 800117c:	20000558 	.word	0x20000558
 8001180:	0800ab74 	.word	0x0800ab74
 8001184:	2000055c 	.word	0x2000055c

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b094      	sub	sp, #80	; 0x50
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0320 	add.w	r3, r7, #32
 8001192:	2230      	movs	r2, #48	; 0x30
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f005 f80a 	bl	80061b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	4b28      	ldr	r3, [pc, #160]	; (8001254 <SystemClock_Config+0xcc>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a27      	ldr	r2, [pc, #156]	; (8001254 <SystemClock_Config+0xcc>)
 80011b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	4b25      	ldr	r3, [pc, #148]	; (8001254 <SystemClock_Config+0xcc>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <SystemClock_Config+0xd0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a21      	ldr	r2, [pc, #132]	; (8001258 <SystemClock_Config+0xd0>)
 80011d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <SystemClock_Config+0xd0>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e4:	2302      	movs	r3, #2
 80011e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e8:	2301      	movs	r3, #1
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ec:	2310      	movs	r3, #16
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f0:	2302      	movs	r3, #2
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011f4:	2300      	movs	r3, #0
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011f8:	2308      	movs	r3, #8
 80011fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011fc:	23a8      	movs	r3, #168	; 0xa8
 80011fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001200:	2302      	movs	r3, #2
 8001202:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001204:	2304      	movs	r3, #4
 8001206:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001208:	f107 0320 	add.w	r3, r7, #32
 800120c:	4618      	mov	r0, r3
 800120e:	f002 fa39 	bl	8003684 <HAL_RCC_OscConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001218:	f000 fb1a 	bl	8001850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121c:	230f      	movs	r3, #15
 800121e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001220:	2302      	movs	r3, #2
 8001222:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001228:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800122c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800122e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001232:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001234:	f107 030c 	add.w	r3, r7, #12
 8001238:	2105      	movs	r1, #5
 800123a:	4618      	mov	r0, r3
 800123c:	f002 fc9a 	bl	8003b74 <HAL_RCC_ClockConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001246:	f000 fb03 	bl	8001850 <Error_Handler>
  }
}
 800124a:	bf00      	nop
 800124c:	3750      	adds	r7, #80	; 0x50
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	40007000 	.word	0x40007000

0800125c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001262:	463b      	mov	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <MX_ADC1_Init+0x98>)
 8001270:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <MX_ADC1_Init+0x9c>)
 8001272:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <MX_ADC1_Init+0x98>)
 8001276:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800127a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800127c:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <MX_ADC1_Init+0x98>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001282:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <MX_ADC1_Init+0x98>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <MX_ADC1_Init+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800128e:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <MX_ADC1_Init+0x98>)
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <MX_ADC1_Init+0x98>)
 8001298:	2200      	movs	r2, #0
 800129a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <MX_ADC1_Init+0x98>)
 800129e:	4a17      	ldr	r2, [pc, #92]	; (80012fc <MX_ADC1_Init+0xa0>)
 80012a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_ADC1_Init+0x98>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <MX_ADC1_Init+0x98>)
 80012aa:	2201      	movs	r2, #1
 80012ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_ADC1_Init+0x98>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012b6:	4b0f      	ldr	r3, [pc, #60]	; (80012f4 <MX_ADC1_Init+0x98>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012bc:	480d      	ldr	r0, [pc, #52]	; (80012f4 <MX_ADC1_Init+0x98>)
 80012be:	f000 fdd1 	bl	8001e64 <HAL_ADC_Init>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012c8:	f000 fac2 	bl	8001850 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_ADC1_Init+0x98>)
 80012de:	f000 ffa3 	bl	8002228 <HAL_ADC_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012e8:	f000 fab2 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000458 	.word	0x20000458
 80012f8:	40012000 	.word	0x40012000
 80012fc:	0f000001 	.word	0x0f000001

08001300 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_CAN1_Init+0x64>)
 8001306:	4a18      	ldr	r2, [pc, #96]	; (8001368 <MX_CAN1_Init+0x68>)
 8001308:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <MX_CAN1_Init+0x64>)
 800130c:	2204      	movs	r2, #4
 800130e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001310:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_CAN1_Init+0x64>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001316:	4b13      	ldr	r3, [pc, #76]	; (8001364 <MX_CAN1_Init+0x64>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 800131c:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_CAN1_Init+0x64>)
 800131e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001322:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_CAN1_Init+0x64>)
 8001326:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800132a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800132c:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <MX_CAN1_Init+0x64>)
 800132e:	2200      	movs	r2, #0
 8001330:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001332:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_CAN1_Init+0x64>)
 8001334:	2200      	movs	r2, #0
 8001336:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <MX_CAN1_Init+0x64>)
 800133a:	2200      	movs	r2, #0
 800133c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_CAN1_Init+0x64>)
 8001340:	2200      	movs	r2, #0
 8001342:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <MX_CAN1_Init+0x64>)
 8001346:	2200      	movs	r2, #0
 8001348:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_CAN1_Init+0x64>)
 800134c:	2200      	movs	r2, #0
 800134e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <MX_CAN1_Init+0x64>)
 8001352:	f001 f987 	bl	8002664 <HAL_CAN_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800135c:	f000 fa78 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200004a0 	.word	0x200004a0
 8001368:	40006400 	.word	0x40006400

0800136c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001370:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <MX_USART1_UART_Init+0x4c>)
 8001372:	4a12      	ldr	r2, [pc, #72]	; (80013bc <MX_USART1_UART_Init+0x50>)
 8001374:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <MX_USART1_UART_Init+0x4c>)
 8001378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800137c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800137e:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <MX_USART1_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001384:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <MX_USART1_UART_Init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <MX_USART1_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <MX_USART1_UART_Init+0x4c>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <MX_USART1_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <MX_USART1_UART_Init+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_USART1_UART_Init+0x4c>)
 80013a4:	f003 f8a6 	bl	80044f4 <HAL_UART_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013ae:	f000 fa4f 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	200004c8 	.word	0x200004c8
 80013bc:	40011000 	.word	0x40011000

080013c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013c4:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_USART2_UART_Init+0x4c>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	; (8001410 <MX_USART2_UART_Init+0x50>)
 80013c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ca:	4b10      	ldr	r3, [pc, #64]	; (800140c <MX_USART2_UART_Init+0x4c>)
 80013cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_USART2_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_USART2_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	; (800140c <MX_USART2_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_USART2_UART_Init+0x4c>)
 80013e6:	220c      	movs	r2, #12
 80013e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <MX_USART2_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <MX_USART2_UART_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_USART2_UART_Init+0x4c>)
 80013f8:	f003 f87c 	bl	80044f4 <HAL_UART_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001402:	f000 fa25 	bl	8001850 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000050c 	.word	0x2000050c
 8001410:	40004400 	.word	0x40004400

08001414 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b10      	ldr	r3, [pc, #64]	; (8001460 <MX_GPIO_Init+0x4c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a0f      	ldr	r2, [pc, #60]	; (8001460 <MX_GPIO_Init+0x4c>)
 8001424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <MX_GPIO_Init+0x4c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	4b09      	ldr	r3, [pc, #36]	; (8001460 <MX_GPIO_Init+0x4c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a08      	ldr	r2, [pc, #32]	; (8001460 <MX_GPIO_Init+0x4c>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <MX_GPIO_Init+0x4c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]

}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800

08001464 <can_start>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_can_start */
void can_start(void const * argument)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, can_array );
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <can_start+0x1c>)
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <can_start+0x20>)
 8001470:	2100      	movs	r1, #0
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <can_start+0x24>)
 8001474:	f001 fb16 	bl	8002aa4 <HAL_CAN_GetRxMessage>

    osDelay(1);
 8001478:	2001      	movs	r0, #1
 800147a:	f003 fc68 	bl	8004d4e <osDelay>
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, can_array );
 800147e:	e7f5      	b.n	800146c <can_start+0x8>
 8001480:	200005bc 	.word	0x200005bc
 8001484:	20000578 	.word	0x20000578
 8001488:	200004a0 	.word	0x200004a0

0800148c <rf_start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_rf_start */
void rf_start(void const * argument)
{
 800148c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001490:	b0c1      	sub	sp, #260	; 0x104
 8001492:	af22      	add	r7, sp, #136	; 0x88
 8001494:	66f8      	str	r0, [r7, #108]	; 0x6c
  /* USER CODE BEGIN rf_start */
  /* Infinite loop */
  for(;;)
  {
	if(ecar->CAN_FLAG && ecar->VAR_FLAG){
 8001496:	4b79      	ldr	r3, [pc, #484]	; (800167c <rf_start+0x1f0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 80e8 	beq.w	8001672 <rf_start+0x1e6>
 80014a2:	4b76      	ldr	r3, [pc, #472]	; (800167c <rf_start+0x1f0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	f000 80e2 	beq.w	8001672 <rf_start+0x1e6>
		char *dizi;
		dizi = (char*)malloc(256);
 80014ae:	f44f 7080 	mov.w	r0, #256	; 0x100
 80014b2:	f004 fe5f 	bl	8006174 <malloc>
 80014b6:	4603      	mov	r3, r0
 80014b8:	677b      	str	r3, [r7, #116]	; 0x74
		sprintf(dizi,"%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f!%.2f",ecar->left_motor_voltage,ecar->left_motor_temparature,ecar->right_motor_voltage,ecar->left_motor_temparature,ecar->speed,ecar->battery_voltage[0],ecar->battery_voltage[1],ecar->battery_voltage[2],ecar->battery_voltage[3],ecar->battery_voltage[4],ecar->battery_voltage[5],ecar->battery_voltage[6],ecar->battery_voltage[7],ecar->battery_voltage[8],ecar->battery_voltage[9],ecar->battery_voltage[10],ecar->battery_voltage[11],ecar->battery_voltage[12],ecar->battery_voltage[13],ecar->battery_voltage[14],ecar->battery_voltage[16],ecar->battery_voltage[17],ecar->battery_voltage[18],ecar->battery_voltage[19],ecar->battery_voltage[20],ecar->battery_voltage[21],ecar->battery_voltage[22],ecar->battery_voltage[23],ecar->battery_temparature);
 80014ba:	4b70      	ldr	r3, [pc, #448]	; (800167c <rf_start+0x1f0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f841 	bl	8000548 <__aeabi_f2d>
 80014c6:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
 80014ca:	4b6c      	ldr	r3, [pc, #432]	; (800167c <rf_start+0x1f0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f839 	bl	8000548 <__aeabi_f2d>
 80014d6:	4680      	mov	r8, r0
 80014d8:	4689      	mov	r9, r1
 80014da:	4b68      	ldr	r3, [pc, #416]	; (800167c <rf_start+0x1f0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f831 	bl	8000548 <__aeabi_f2d>
 80014e6:	4682      	mov	sl, r0
 80014e8:	468b      	mov	fp, r1
 80014ea:	4b64      	ldr	r3, [pc, #400]	; (800167c <rf_start+0x1f0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f829 	bl	8000548 <__aeabi_f2d>
 80014f6:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 80014fa:	4b60      	ldr	r3, [pc, #384]	; (800167c <rf_start+0x1f0>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f821 	bl	8000548 <__aeabi_f2d>
 8001506:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
 800150a:	4b5c      	ldr	r3, [pc, #368]	; (800167c <rf_start+0x1f0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001510:	66bb      	str	r3, [r7, #104]	; 0x68
 8001512:	4b5a      	ldr	r3, [pc, #360]	; (800167c <rf_start+0x1f0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001518:	64f9      	str	r1, [r7, #76]	; 0x4c
 800151a:	4b58      	ldr	r3, [pc, #352]	; (800167c <rf_start+0x1f0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001520:	64bc      	str	r4, [r7, #72]	; 0x48
 8001522:	4b56      	ldr	r3, [pc, #344]	; (800167c <rf_start+0x1f0>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8001528:	647d      	str	r5, [r7, #68]	; 0x44
 800152a:	4b54      	ldr	r3, [pc, #336]	; (800167c <rf_start+0x1f0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	6c9e      	ldr	r6, [r3, #72]	; 0x48
 8001530:	643e      	str	r6, [r7, #64]	; 0x40
 8001532:	4b52      	ldr	r3, [pc, #328]	; (800167c <rf_start+0x1f0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001538:	63fa      	str	r2, [r7, #60]	; 0x3c
 800153a:	4b50      	ldr	r3, [pc, #320]	; (800167c <rf_start+0x1f0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001540:	63bb      	str	r3, [r7, #56]	; 0x38
 8001542:	4b4e      	ldr	r3, [pc, #312]	; (800167c <rf_start+0x1f0>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001548:	6379      	str	r1, [r7, #52]	; 0x34
 800154a:	4b4c      	ldr	r3, [pc, #304]	; (800167c <rf_start+0x1f0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8001550:	633c      	str	r4, [r7, #48]	; 0x30
 8001552:	4b4a      	ldr	r3, [pc, #296]	; (800167c <rf_start+0x1f0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8001558:	62fd      	str	r5, [r7, #44]	; 0x2c
 800155a:	4b48      	ldr	r3, [pc, #288]	; (800167c <rf_start+0x1f0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 8001560:	62be      	str	r6, [r7, #40]	; 0x28
 8001562:	4b46      	ldr	r3, [pc, #280]	; (800167c <rf_start+0x1f0>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001568:	627a      	str	r2, [r7, #36]	; 0x24
 800156a:	4b44      	ldr	r3, [pc, #272]	; (800167c <rf_start+0x1f0>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8001570:	6238      	str	r0, [r7, #32]
 8001572:	4b42      	ldr	r3, [pc, #264]	; (800167c <rf_start+0x1f0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001578:	61fb      	str	r3, [r7, #28]
 800157a:	4b40      	ldr	r3, [pc, #256]	; (800167c <rf_start+0x1f0>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001580:	61b9      	str	r1, [r7, #24]
 8001582:	4b3e      	ldr	r3, [pc, #248]	; (800167c <rf_start+0x1f0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6f9c      	ldr	r4, [r3, #120]	; 0x78
 8001588:	617c      	str	r4, [r7, #20]
 800158a:	4b3c      	ldr	r3, [pc, #240]	; (800167c <rf_start+0x1f0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6fdd      	ldr	r5, [r3, #124]	; 0x7c
 8001590:	613d      	str	r5, [r7, #16]
 8001592:	4b3a      	ldr	r3, [pc, #232]	; (800167c <rf_start+0x1f0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
 800159a:	60fe      	str	r6, [r7, #12]
 800159c:	4b37      	ldr	r3, [pc, #220]	; (800167c <rf_start+0x1f0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80015a4:	60ba      	str	r2, [r7, #8]
 80015a6:	4b35      	ldr	r3, [pc, #212]	; (800167c <rf_start+0x1f0>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	4b32      	ldr	r3, [pc, #200]	; (800167c <rf_start+0x1f0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8d3 608c 	ldr.w	r6, [r3, #140]	; 0x8c
 80015b8:	4b30      	ldr	r3, [pc, #192]	; (800167c <rf_start+0x1f0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 80015c0:	4b2e      	ldr	r3, [pc, #184]	; (800167c <rf_start+0x1f0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 80015c8:	4b2c      	ldr	r3, [pc, #176]	; (800167c <rf_start+0x1f0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ffba 	bl	8000548 <__aeabi_f2d>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 80015dc:	941e      	str	r4, [sp, #120]	; 0x78
 80015de:	951d      	str	r5, [sp, #116]	; 0x74
 80015e0:	961c      	str	r6, [sp, #112]	; 0x70
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	901b      	str	r0, [sp, #108]	; 0x6c
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	921a      	str	r2, [sp, #104]	; 0x68
 80015ea:	68fe      	ldr	r6, [r7, #12]
 80015ec:	9619      	str	r6, [sp, #100]	; 0x64
 80015ee:	693d      	ldr	r5, [r7, #16]
 80015f0:	9518      	str	r5, [sp, #96]	; 0x60
 80015f2:	697c      	ldr	r4, [r7, #20]
 80015f4:	9417      	str	r4, [sp, #92]	; 0x5c
 80015f6:	69b9      	ldr	r1, [r7, #24]
 80015f8:	9116      	str	r1, [sp, #88]	; 0x58
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	9315      	str	r3, [sp, #84]	; 0x54
 80015fe:	6a38      	ldr	r0, [r7, #32]
 8001600:	9014      	str	r0, [sp, #80]	; 0x50
 8001602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001604:	9213      	str	r2, [sp, #76]	; 0x4c
 8001606:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8001608:	9612      	str	r6, [sp, #72]	; 0x48
 800160a:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800160c:	9511      	str	r5, [sp, #68]	; 0x44
 800160e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8001610:	9410      	str	r4, [sp, #64]	; 0x40
 8001612:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001614:	910f      	str	r1, [sp, #60]	; 0x3c
 8001616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001618:	930e      	str	r3, [sp, #56]	; 0x38
 800161a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800161c:	920d      	str	r2, [sp, #52]	; 0x34
 800161e:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 8001620:	960c      	str	r6, [sp, #48]	; 0x30
 8001622:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 8001624:	950b      	str	r5, [sp, #44]	; 0x2c
 8001626:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8001628:	940a      	str	r4, [sp, #40]	; 0x28
 800162a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800162c:	9109      	str	r1, [sp, #36]	; 0x24
 800162e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001630:	9308      	str	r3, [sp, #32]
 8001632:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8001636:	ed8d 7b06 	vstr	d7, [sp, #24]
 800163a:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800163e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001642:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001646:	e9cd 8900 	strd	r8, r9, [sp]
 800164a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800164e:	490c      	ldr	r1, [pc, #48]	; (8001680 <rf_start+0x1f4>)
 8001650:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001652:	f005 fd25 	bl	80070a0 <siprintf>
		HAL_UART_Transmit(&huart1, dizi, strlen(dizi), HAL_MAX_DELAY);
 8001656:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001658:	f7fe fdba 	bl	80001d0 <strlen>
 800165c:	4603      	mov	r3, r0
 800165e:	b29a      	uxth	r2, r3
 8001660:	f04f 33ff 	mov.w	r3, #4294967295
 8001664:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001666:	4807      	ldr	r0, [pc, #28]	; (8001684 <rf_start+0x1f8>)
 8001668:	f002 ff91 	bl	800458e <HAL_UART_Transmit>
		free(dizi);
 800166c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800166e:	f004 fd89 	bl	8006184 <free>
	}
    osDelay(1);
 8001672:	2001      	movs	r0, #1
 8001674:	f003 fb6b 	bl	8004d4e <osDelay>
	if(ecar->CAN_FLAG && ecar->VAR_FLAG){
 8001678:	e70d      	b.n	8001496 <rf_start+0xa>
 800167a:	bf00      	nop
 800167c:	200005dc 	.word	0x200005dc
 8001680:	0800ab90 	.word	0x0800ab90
 8001684:	200004c8 	.word	0x200004c8

08001688 <gps_start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gps_start */
void gps_start(void const * argument)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	//just split for can variables
	//
  //V

	/*bms receiving*/
	  int truther = 1;
 8001690:	2301      	movs	r3, #1
 8001692:	60fb      	str	r3, [r7, #12]
	switch(pRxHeader.StdId){
 8001694:	4b25      	ldr	r3, [pc, #148]	; (800172c <gps_start+0xa4>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 800169c:	2b03      	cmp	r3, #3
 800169e:	d834      	bhi.n	800170a <gps_start+0x82>
 80016a0:	a201      	add	r2, pc, #4	; (adr r2, 80016a8 <gps_start+0x20>)
 80016a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a6:	bf00      	nop
 80016a8:	080016b9 	.word	0x080016b9
 80016ac:	080016c9 	.word	0x080016c9
 80016b0:	080016d9 	.word	0x080016d9
 80016b4:	080016e9 	.word	0x080016e9
	case 0x101:
		ecar->battery_voltage[0] = &can_array;
 80016b8:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <gps_start+0xa8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1d      	ldr	r2, [pc, #116]	; (8001734 <gps_start+0xac>)
 80016be:	639a      	str	r2, [r3, #56]	; 0x38
		truther = truther<<1;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	60fb      	str	r3, [r7, #12]
		break;
 80016c6:	e020      	b.n	800170a <gps_start+0x82>
	case 0x102:
		ecar->battery_voltage[1] = &can_array;
 80016c8:	4b19      	ldr	r3, [pc, #100]	; (8001730 <gps_start+0xa8>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a19      	ldr	r2, [pc, #100]	; (8001734 <gps_start+0xac>)
 80016ce:	63da      	str	r2, [r3, #60]	; 0x3c
		truther = truther<<1;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
		break;
 80016d6:	e018      	b.n	800170a <gps_start+0x82>
	case 0x103:
		ecar->battery_voltage[2] = &can_array;
 80016d8:	4b15      	ldr	r3, [pc, #84]	; (8001730 <gps_start+0xa8>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a15      	ldr	r2, [pc, #84]	; (8001734 <gps_start+0xac>)
 80016de:	641a      	str	r2, [r3, #64]	; 0x40
		truther = truther<<1;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
		break;
 80016e6:	e010      	b.n	800170a <gps_start+0x82>
	case 0x104:
		ecar->battery_voltage[3] = &can_array;
 80016e8:	4b11      	ldr	r3, [pc, #68]	; (8001730 <gps_start+0xa8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a11      	ldr	r2, [pc, #68]	; (8001734 <gps_start+0xac>)
 80016ee:	645a      	str	r2, [r3, #68]	; 0x44
		ecar->battery_temparature =
		truther = truther<<1;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
		ecar->battery_temparature =
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <gps_start+0xa8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	ee07 2a90 	vmov	s15, r2
 8001700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001704:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		break;
 8001708:	bf00      	nop
	}
	if(truther==16) ecar->VAR_FLAG=1;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	2b10      	cmp	r3, #16
 800170e:	d104      	bne.n	800171a <gps_start+0x92>
 8001710:	4b07      	ldr	r3, [pc, #28]	; (8001730 <gps_start+0xa8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2201      	movs	r2, #1
 8001716:	655a      	str	r2, [r3, #84]	; 0x54
 8001718:	e003      	b.n	8001722 <gps_start+0x9a>
	else ecar->VAR_FLAG=0;
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <gps_start+0xa8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2200      	movs	r2, #0
 8001720:	655a      	str	r2, [r3, #84]	; 0x54
    osDelay(1);
 8001722:	2001      	movs	r0, #1
 8001724:	f003 fb13 	bl	8004d4e <osDelay>
  {
 8001728:	e7b2      	b.n	8001690 <gps_start+0x8>
 800172a:	bf00      	nop
 800172c:	20000578 	.word	0x20000578
 8001730:	200005dc 	.word	0x200005dc
 8001734:	200005bc 	.word	0x200005bc

08001738 <speed_start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_speed_start */
void speed_start(void const * argument)
{
 8001738:	b5b0      	push	{r4, r5, r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN speed_start */
  /* Infinite loop */
  for(;;)
  {
	  if(ecar->ADC_FLAG == ecar->ADC_AVAILABLE){
 8001740:	4b35      	ldr	r3, [pc, #212]	; (8001818 <speed_start+0xe0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001746:	4b34      	ldr	r3, [pc, #208]	; (8001818 <speed_start+0xe0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174c:	429a      	cmp	r2, r3
 800174e:	d10d      	bne.n	800176c <speed_start+0x34>
		  HAL_ADC_Start(&hadc1);
 8001750:	4832      	ldr	r0, [pc, #200]	; (800181c <speed_start+0xe4>)
 8001752:	f000 fbcb 	bl	8001eec <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1);
 8001756:	2101      	movs	r1, #1
 8001758:	4830      	ldr	r0, [pc, #192]	; (800181c <speed_start+0xe4>)
 800175a:	f000 fccc 	bl	80020f6 <HAL_ADC_PollForConversion>
		  adc_value = HAL_ADC_GetValue(&hadc1);
 800175e:	482f      	ldr	r0, [pc, #188]	; (800181c <speed_start+0xe4>)
 8001760:	f000 fd54 	bl	800220c <HAL_ADC_GetValue>
 8001764:	4603      	mov	r3, r0
 8001766:	b2da      	uxtb	r2, r3
 8001768:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <speed_start+0xe8>)
 800176a:	701a      	strb	r2, [r3, #0]
		  if(adc_value>1024){
			  ecar->ADC_FLAG=2;
			  time(&start);
		  }
	  }
	  if(ecar->ADC_CALCULATING == ecar->ADC_FLAG){
 800176c:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <speed_start+0xe0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001772:	4b29      	ldr	r3, [pc, #164]	; (8001818 <speed_start+0xe0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001778:	429a      	cmp	r2, r3
 800177a:	d140      	bne.n	80017fe <speed_start+0xc6>
		  HAL_ADC_Start(&hadc1);
 800177c:	4827      	ldr	r0, [pc, #156]	; (800181c <speed_start+0xe4>)
 800177e:	f000 fbb5 	bl	8001eec <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1, 1);
 8001782:	2101      	movs	r1, #1
 8001784:	4825      	ldr	r0, [pc, #148]	; (800181c <speed_start+0xe4>)
 8001786:	f000 fcb6 	bl	80020f6 <HAL_ADC_PollForConversion>
		  int tempvalue = HAL_ADC_GetValue(&hadc1);
 800178a:	4824      	ldr	r0, [pc, #144]	; (800181c <speed_start+0xe4>)
 800178c:	f000 fd3e 	bl	800220c <HAL_ADC_GetValue>
 8001790:	4603      	mov	r3, r0
 8001792:	60fb      	str	r3, [r7, #12]
		  if(tempvalue==adc_value){
 8001794:	4b22      	ldr	r3, [pc, #136]	; (8001820 <speed_start+0xe8>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4293      	cmp	r3, r2
 800179e:	d135      	bne.n	800180c <speed_start+0xd4>
			  time(&stop);
 80017a0:	4820      	ldr	r0, [pc, #128]	; (8001824 <speed_start+0xec>)
 80017a2:	f006 fb49 	bl	8007e38 <time>
			  ecar->speed = (2*3.14*ecar->wheel_radius)/difftime(stop, start);
 80017a6:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <speed_start+0xe0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fecb 	bl	8000548 <__aeabi_f2d>
 80017b2:	a317      	add	r3, pc, #92	; (adr r3, 8001810 <speed_start+0xd8>)
 80017b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b8:	f7fe ff1e 	bl	80005f8 <__aeabi_dmul>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4614      	mov	r4, r2
 80017c2:	461d      	mov	r5, r3
 80017c4:	4b17      	ldr	r3, [pc, #92]	; (8001824 <speed_start+0xec>)
 80017c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <speed_start+0xf0>)
 80017cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d0:	f004 fc9c 	bl	800610c <difftime>
 80017d4:	ec53 2b10 	vmov	r2, r3, d0
 80017d8:	4620      	mov	r0, r4
 80017da:	4629      	mov	r1, r5
 80017dc:	f7ff f836 	bl	800084c <__aeabi_ddiv>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	490c      	ldr	r1, [pc, #48]	; (8001818 <speed_start+0xe0>)
 80017e6:	680c      	ldr	r4, [r1, #0]
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f7ff f9fc 	bl	8000be8 <__aeabi_d2f>
 80017f0:	4603      	mov	r3, r0
 80017f2:	6063      	str	r3, [r4, #4]
			  ecar->ADC_FLAG=1;
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <speed_start+0xe0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2201      	movs	r2, #1
 80017fa:	651a      	str	r2, [r3, #80]	; 0x50
		  }
		  continue;
 80017fc:	e006      	b.n	800180c <speed_start+0xd4>
	  }
	  HAL_ADC_Stop(&hadc1);
 80017fe:	4807      	ldr	r0, [pc, #28]	; (800181c <speed_start+0xe4>)
 8001800:	f000 fc46 	bl	8002090 <HAL_ADC_Stop>
    osDelay(1);
 8001804:	2001      	movs	r0, #1
 8001806:	f003 faa2 	bl	8004d4e <osDelay>
 800180a:	e799      	b.n	8001740 <speed_start+0x8>
		  continue;
 800180c:	bf00      	nop
	  if(ecar->ADC_FLAG == ecar->ADC_AVAILABLE){
 800180e:	e797      	b.n	8001740 <speed_start+0x8>
 8001810:	51eb851f 	.word	0x51eb851f
 8001814:	40191eb8 	.word	0x40191eb8
 8001818:	200005dc 	.word	0x200005dc
 800181c:	20000458 	.word	0x20000458
 8001820:	200005d8 	.word	0x200005d8
 8001824:	200005d0 	.word	0x200005d0
 8001828:	200005c8 	.word	0x200005c8

0800182c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a04      	ldr	r2, [pc, #16]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d101      	bne.n	8001842 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800183e:	f000 faf1 	bl	8001e24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40010000 	.word	0x40010000

08001850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001854:	b672      	cpsid	i
}
 8001856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001858:	e7fe      	b.n	8001858 <Error_Handler+0x8>
	...

0800185c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	4b12      	ldr	r3, [pc, #72]	; (80018b0 <HAL_MspInit+0x54>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	4a11      	ldr	r2, [pc, #68]	; (80018b0 <HAL_MspInit+0x54>)
 800186c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001870:	6453      	str	r3, [r2, #68]	; 0x44
 8001872:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_MspInit+0x54>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187a:	607b      	str	r3, [r7, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_MspInit+0x54>)
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	4a0a      	ldr	r2, [pc, #40]	; (80018b0 <HAL_MspInit+0x54>)
 8001888:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188c:	6413      	str	r3, [r2, #64]	; 0x40
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_MspInit+0x54>)
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	210f      	movs	r1, #15
 800189e:	f06f 0001 	mvn.w	r0, #1
 80018a2:	f001 fd29 	bl	80032f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	; 0x28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a17      	ldr	r2, [pc, #92]	; (8001930 <HAL_ADC_MspInit+0x7c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d127      	bne.n	8001926 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	4b16      	ldr	r3, [pc, #88]	; (8001934 <HAL_ADC_MspInit+0x80>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	4a15      	ldr	r2, [pc, #84]	; (8001934 <HAL_ADC_MspInit+0x80>)
 80018e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e4:	6453      	str	r3, [r2, #68]	; 0x44
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <HAL_ADC_MspInit+0x80>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <HAL_ADC_MspInit+0x80>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a0e      	ldr	r2, [pc, #56]	; (8001934 <HAL_ADC_MspInit+0x80>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <HAL_ADC_MspInit+0x80>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800190e:	2301      	movs	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001912:	2303      	movs	r3, #3
 8001914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 0314 	add.w	r3, r7, #20
 800191e:	4619      	mov	r1, r3
 8001920:	4805      	ldr	r0, [pc, #20]	; (8001938 <HAL_ADC_MspInit+0x84>)
 8001922:	f001 fd13 	bl	800334c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001926:	bf00      	nop
 8001928:	3728      	adds	r7, #40	; 0x28
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40012000 	.word	0x40012000
 8001934:	40023800 	.word	0x40023800
 8001938:	40020000 	.word	0x40020000

0800193c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08a      	sub	sp, #40	; 0x28
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001944:	f107 0314 	add.w	r3, r7, #20
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a1d      	ldr	r2, [pc, #116]	; (80019d0 <HAL_CAN_MspInit+0x94>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d134      	bne.n	80019c8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <HAL_CAN_MspInit+0x98>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	4a1b      	ldr	r2, [pc, #108]	; (80019d4 <HAL_CAN_MspInit+0x98>)
 8001968:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800196c:	6413      	str	r3, [r2, #64]	; 0x40
 800196e:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <HAL_CAN_MspInit+0x98>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_CAN_MspInit+0x98>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <HAL_CAN_MspInit+0x98>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_CAN_MspInit+0x98>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001996:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800199a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80019a8:	2309      	movs	r3, #9
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4619      	mov	r1, r3
 80019b2:	4809      	ldr	r0, [pc, #36]	; (80019d8 <HAL_CAN_MspInit+0x9c>)
 80019b4:	f001 fcca 	bl	800334c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80019b8:	2200      	movs	r2, #0
 80019ba:	2105      	movs	r1, #5
 80019bc:	2014      	movs	r0, #20
 80019be:	f001 fc9b 	bl	80032f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80019c2:	2014      	movs	r0, #20
 80019c4:	f001 fcb4 	bl	8003330 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80019c8:	bf00      	nop
 80019ca:	3728      	adds	r7, #40	; 0x28
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40006400 	.word	0x40006400
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020000 	.word	0x40020000

080019dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08c      	sub	sp, #48	; 0x30
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a32      	ldr	r2, [pc, #200]	; (8001ac4 <HAL_UART_MspInit+0xe8>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d12d      	bne.n	8001a5a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	4b31      	ldr	r3, [pc, #196]	; (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a06:	4a30      	ldr	r2, [pc, #192]	; (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a08:	f043 0310 	orr.w	r3, r3, #16
 8001a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	61bb      	str	r3, [r7, #24]
 8001a18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a29      	ldr	r2, [pc, #164]	; (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a48:	2307      	movs	r3, #7
 8001a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4c:	f107 031c 	add.w	r3, r7, #28
 8001a50:	4619      	mov	r1, r3
 8001a52:	481e      	ldr	r0, [pc, #120]	; (8001acc <HAL_UART_MspInit+0xf0>)
 8001a54:	f001 fc7a 	bl	800334c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a58:	e030      	b.n	8001abc <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a1c      	ldr	r2, [pc, #112]	; (8001ad0 <HAL_UART_MspInit+0xf4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d12b      	bne.n	8001abc <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	4a16      	ldr	r2, [pc, #88]	; (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a72:	6413      	str	r3, [r2, #64]	; 0x40
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a80:	2300      	movs	r3, #0
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	4a0f      	ldr	r2, [pc, #60]	; (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <HAL_UART_MspInit+0xec>)
 8001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a9c:	230c      	movs	r3, #12
 8001a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aac:	2307      	movs	r3, #7
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <HAL_UART_MspInit+0xf0>)
 8001ab8:	f001 fc48 	bl	800334c <HAL_GPIO_Init>
}
 8001abc:	bf00      	nop
 8001abe:	3730      	adds	r7, #48	; 0x30
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40011000 	.word	0x40011000
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020000 	.word	0x40020000
 8001ad0:	40004400 	.word	0x40004400

08001ad4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08c      	sub	sp, #48	; 0x30
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	2019      	movs	r0, #25
 8001aea:	f001 fc05 	bl	80032f8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001aee:	2019      	movs	r0, #25
 8001af0:	f001 fc1e 	bl	8003330 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	4b1f      	ldr	r3, [pc, #124]	; (8001b78 <HAL_InitTick+0xa4>)
 8001afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afc:	4a1e      	ldr	r2, [pc, #120]	; (8001b78 <HAL_InitTick+0xa4>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6453      	str	r3, [r2, #68]	; 0x44
 8001b04:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <HAL_InitTick+0xa4>)
 8001b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b10:	f107 0210 	add.w	r2, r7, #16
 8001b14:	f107 0314 	add.w	r3, r7, #20
 8001b18:	4611      	mov	r1, r2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f002 fa0a 	bl	8003f34 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001b20:	f002 f9f4 	bl	8003f0c <HAL_RCC_GetPCLK2Freq>
 8001b24:	4603      	mov	r3, r0
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2c:	4a13      	ldr	r2, [pc, #76]	; (8001b7c <HAL_InitTick+0xa8>)
 8001b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b32:	0c9b      	lsrs	r3, r3, #18
 8001b34:	3b01      	subs	r3, #1
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b38:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <HAL_InitTick+0xac>)
 8001b3a:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <HAL_InitTick+0xb0>)
 8001b3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b3e:	4b10      	ldr	r3, [pc, #64]	; (8001b80 <HAL_InitTick+0xac>)
 8001b40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b44:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b46:	4a0e      	ldr	r2, [pc, #56]	; (8001b80 <HAL_InitTick+0xac>)
 8001b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b4c:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <HAL_InitTick+0xac>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_InitTick+0xac>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001b58:	4809      	ldr	r0, [pc, #36]	; (8001b80 <HAL_InitTick+0xac>)
 8001b5a:	f002 fa1d 	bl	8003f98 <HAL_TIM_Base_Init>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d104      	bne.n	8001b6e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001b64:	4806      	ldr	r0, [pc, #24]	; (8001b80 <HAL_InitTick+0xac>)
 8001b66:	f002 fa71 	bl	800404c <HAL_TIM_Base_Start_IT>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	e000      	b.n	8001b70 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3730      	adds	r7, #48	; 0x30
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	431bde83 	.word	0x431bde83
 8001b80:	200005e0 	.word	0x200005e0
 8001b84:	40010000 	.word	0x40010000

08001b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <NMI_Handler+0x4>

08001b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b92:	e7fe      	b.n	8001b92 <HardFault_Handler+0x4>

08001b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <MemManage_Handler+0x4>

08001b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b9e:	e7fe      	b.n	8001b9e <BusFault_Handler+0x4>

08001ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <UsageFault_Handler+0x4>

08001ba6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <CAN1_RX0_IRQHandler+0x10>)
 8001bba:	f001 f8ab 	bl	8002d14 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200004a0 	.word	0x200004a0

08001bc8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bcc:	4802      	ldr	r0, [pc, #8]	; (8001bd8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001bce:	f002 faad 	bl	800412c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	200005e0 	.word	0x200005e0

08001bdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
	return 1;
 8001be0:	2301      	movs	r3, #1
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <_kill>:

int _kill(int pid, int sig)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bf6:	f004 fa93 	bl	8006120 <__errno>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2216      	movs	r2, #22
 8001bfe:	601a      	str	r2, [r3, #0]
	return -1;
 8001c00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3708      	adds	r7, #8
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <_exit>:

void _exit (int status)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c14:	f04f 31ff 	mov.w	r1, #4294967295
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ffe7 	bl	8001bec <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c1e:	e7fe      	b.n	8001c1e <_exit+0x12>

08001c20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	e00a      	b.n	8001c48 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c32:	f3af 8000 	nop.w
 8001c36:	4601      	mov	r1, r0
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	1c5a      	adds	r2, r3, #1
 8001c3c:	60ba      	str	r2, [r7, #8]
 8001c3e:	b2ca      	uxtb	r2, r1
 8001c40:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	3301      	adds	r3, #1
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	dbf0      	blt.n	8001c32 <_read+0x12>
	}

return len;
 8001c50:	687b      	ldr	r3, [r7, #4]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b086      	sub	sp, #24
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60f8      	str	r0, [r7, #12]
 8001c62:	60b9      	str	r1, [r7, #8]
 8001c64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
 8001c6a:	e009      	b.n	8001c80 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	1c5a      	adds	r2, r3, #1
 8001c70:	60ba      	str	r2, [r7, #8]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	dbf1      	blt.n	8001c6c <_write+0x12>
	}
	return len;
 8001c88:	687b      	ldr	r3, [r7, #4]
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <_close>:

int _close(int file)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
	return -1;
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001caa:	b480      	push	{r7}
 8001cac:	b083      	sub	sp, #12
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cba:	605a      	str	r2, [r3, #4]
	return 0;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <_isatty>:

int _isatty(int file)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
	return 1;
 8001cd2:	2301      	movs	r3, #1
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
	return 0;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d04:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <_sbrk+0x5c>)
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <_sbrk+0x60>)
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <_sbrk+0x64>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d102      	bne.n	8001d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d18:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <_sbrk+0x64>)
 8001d1a:	4a12      	ldr	r2, [pc, #72]	; (8001d64 <_sbrk+0x68>)
 8001d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <_sbrk+0x64>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d207      	bcs.n	8001d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d2c:	f004 f9f8 	bl	8006120 <__errno>
 8001d30:	4603      	mov	r3, r0
 8001d32:	220c      	movs	r2, #12
 8001d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d36:	f04f 33ff 	mov.w	r3, #4294967295
 8001d3a:	e009      	b.n	8001d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <_sbrk+0x64>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <_sbrk+0x64>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4413      	add	r3, r2
 8001d4a:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <_sbrk+0x64>)
 8001d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3718      	adds	r7, #24
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	20020000 	.word	0x20020000
 8001d5c:	00000400 	.word	0x00000400
 8001d60:	20000628 	.word	0x20000628
 8001d64:	20004398 	.word	0x20004398

08001d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d6c:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <SystemInit+0x20>)
 8001d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d72:	4a05      	ldr	r2, [pc, #20]	; (8001d88 <SystemInit+0x20>)
 8001d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d7c:	bf00      	nop
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d90:	480d      	ldr	r0, [pc, #52]	; (8001dc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d92:	490e      	ldr	r1, [pc, #56]	; (8001dcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d94:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d98:	e002      	b.n	8001da0 <LoopCopyDataInit>

08001d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d9e:	3304      	adds	r3, #4

08001da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001da4:	d3f9      	bcc.n	8001d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001da6:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001da8:	4c0b      	ldr	r4, [pc, #44]	; (8001dd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dac:	e001      	b.n	8001db2 <LoopFillZerobss>

08001dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001db0:	3204      	adds	r2, #4

08001db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001db4:	d3fb      	bcc.n	8001dae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001db6:	f7ff ffd7 	bl	8001d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dba:	f004 f9b7 	bl	800612c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dbe:	f7ff f935 	bl	800102c <main>
  bx  lr    
 8001dc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001dc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dcc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001dd0:	0800b0fc 	.word	0x0800b0fc
  ldr r2, =_sbss
 8001dd4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001dd8:	20004394 	.word	0x20004394

08001ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ddc:	e7fe      	b.n	8001ddc <ADC_IRQHandler>
	...

08001de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001de4:	4b0e      	ldr	r3, [pc, #56]	; (8001e20 <HAL_Init+0x40>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0d      	ldr	r2, [pc, #52]	; (8001e20 <HAL_Init+0x40>)
 8001dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001df0:	4b0b      	ldr	r3, [pc, #44]	; (8001e20 <HAL_Init+0x40>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a0a      	ldr	r2, [pc, #40]	; (8001e20 <HAL_Init+0x40>)
 8001df6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <HAL_Init+0x40>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a07      	ldr	r2, [pc, #28]	; (8001e20 <HAL_Init+0x40>)
 8001e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e08:	2003      	movs	r0, #3
 8001e0a:	f001 fa6a 	bl	80032e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e0e:	200f      	movs	r0, #15
 8001e10:	f7ff fe60 	bl	8001ad4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e14:	f7ff fd22 	bl	800185c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40023c00 	.word	0x40023c00

08001e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_IncTick+0x20>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_IncTick+0x24>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_IncTick+0x24>)
 8001e36:	6013      	str	r3, [r2, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	20000008 	.word	0x20000008
 8001e48:	2000062c 	.word	0x2000062c

08001e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_GetTick+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	2000062c 	.word	0x2000062c

08001e64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e033      	b.n	8001ee2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff fd16 	bl	80018b4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d118      	bne.n	8001ed4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eaa:	f023 0302 	bic.w	r3, r3, #2
 8001eae:	f043 0202 	orr.w	r2, r3, #2
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 fad8 	bl	800246c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f023 0303 	bic.w	r3, r3, #3
 8001eca:	f043 0201 	orr.w	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ed2:	e001      	b.n	8001ed8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d101      	bne.n	8001f06 <HAL_ADC_Start+0x1a>
 8001f02:	2302      	movs	r3, #2
 8001f04:	e0b2      	b.n	800206c <HAL_ADC_Start+0x180>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d018      	beq.n	8001f4e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0201 	orr.w	r2, r2, #1
 8001f2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f2c:	4b52      	ldr	r3, [pc, #328]	; (8002078 <HAL_ADC_Start+0x18c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a52      	ldr	r2, [pc, #328]	; (800207c <HAL_ADC_Start+0x190>)
 8001f32:	fba2 2303 	umull	r2, r3, r2, r3
 8001f36:	0c9a      	lsrs	r2, r3, #18
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f40:	e002      	b.n	8001f48 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	3b01      	subs	r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f9      	bne.n	8001f42 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d17a      	bne.n	8002052 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d007      	beq.n	8001f8e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f9a:	d106      	bne.n	8001faa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa0:	f023 0206 	bic.w	r2, r3, #6
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	645a      	str	r2, [r3, #68]	; 0x44
 8001fa8:	e002      	b.n	8001fb0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fb8:	4b31      	ldr	r3, [pc, #196]	; (8002080 <HAL_ADC_Start+0x194>)
 8001fba:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001fc4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f003 031f 	and.w	r3, r3, #31
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d12a      	bne.n	8002028 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a2b      	ldr	r2, [pc, #172]	; (8002084 <HAL_ADC_Start+0x198>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d015      	beq.n	8002008 <HAL_ADC_Start+0x11c>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a29      	ldr	r2, [pc, #164]	; (8002088 <HAL_ADC_Start+0x19c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d105      	bne.n	8001ff2 <HAL_ADC_Start+0x106>
 8001fe6:	4b26      	ldr	r3, [pc, #152]	; (8002080 <HAL_ADC_Start+0x194>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 031f 	and.w	r3, r3, #31
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00a      	beq.n	8002008 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a25      	ldr	r2, [pc, #148]	; (800208c <HAL_ADC_Start+0x1a0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d136      	bne.n	800206a <HAL_ADC_Start+0x17e>
 8001ffc:	4b20      	ldr	r3, [pc, #128]	; (8002080 <HAL_ADC_Start+0x194>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0310 	and.w	r3, r3, #16
 8002004:	2b00      	cmp	r3, #0
 8002006:	d130      	bne.n	800206a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d129      	bne.n	800206a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	e020      	b.n	800206a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a15      	ldr	r2, [pc, #84]	; (8002084 <HAL_ADC_Start+0x198>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d11b      	bne.n	800206a <HAL_ADC_Start+0x17e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d114      	bne.n	800206a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	e00b      	b.n	800206a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	f043 0210 	orr.w	r2, r3, #16
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	f043 0201 	orr.w	r2, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	20000000 	.word	0x20000000
 800207c:	431bde83 	.word	0x431bde83
 8002080:	40012300 	.word	0x40012300
 8002084:	40012000 	.word	0x40012000
 8002088:	40012100 	.word	0x40012100
 800208c:	40012200 	.word	0x40012200

08002090 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_Stop+0x16>
 80020a2:	2302      	movs	r3, #2
 80020a4:	e021      	b.n	80020ea <HAL_ADC_Stop+0x5a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2201      	movs	r2, #1
 80020aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0201 	bic.w	r2, r2, #1
 80020bc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d109      	bne.n	80020e0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020d4:	f023 0301 	bic.w	r3, r3, #1
 80020d8:	f043 0201 	orr.w	r2, r3, #1
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b084      	sub	sp, #16
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800210e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002112:	d113      	bne.n	800213c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800211e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002122:	d10b      	bne.n	800213c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	f043 0220 	orr.w	r2, r3, #32
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e063      	b.n	8002204 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800213c:	f7ff fe86 	bl	8001e4c <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002142:	e021      	b.n	8002188 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214a:	d01d      	beq.n	8002188 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d007      	beq.n	8002162 <HAL_ADC_PollForConversion+0x6c>
 8002152:	f7ff fe7b 	bl	8001e4c <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	429a      	cmp	r2, r3
 8002160:	d212      	bcs.n	8002188 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b02      	cmp	r3, #2
 800216e:	d00b      	beq.n	8002188 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	f043 0204 	orr.w	r2, r3, #4
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e03d      	b.n	8002204 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b02      	cmp	r3, #2
 8002194:	d1d6      	bne.n	8002144 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f06f 0212 	mvn.w	r2, #18
 800219e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d123      	bne.n	8002202 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d11f      	bne.n	8002202 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d006      	beq.n	80021de <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d111      	bne.n	8002202 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d105      	bne.n	8002202 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fa:	f043 0201 	orr.w	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800221a:	4618      	mov	r0, r3
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800223c:	2b01      	cmp	r3, #1
 800223e:	d101      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x1c>
 8002240:	2302      	movs	r3, #2
 8002242:	e105      	b.n	8002450 <HAL_ADC_ConfigChannel+0x228>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b09      	cmp	r3, #9
 8002252:	d925      	bls.n	80022a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68d9      	ldr	r1, [r3, #12]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	3b1e      	subs	r3, #30
 800226a:	2207      	movs	r2, #7
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43da      	mvns	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	400a      	ands	r2, r1
 8002278:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68d9      	ldr	r1, [r3, #12]
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	689a      	ldr	r2, [r3, #8]
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	b29b      	uxth	r3, r3
 800228a:	4618      	mov	r0, r3
 800228c:	4603      	mov	r3, r0
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	4403      	add	r3, r0
 8002292:	3b1e      	subs	r3, #30
 8002294:	409a      	lsls	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	e022      	b.n	80022e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6919      	ldr	r1, [r3, #16]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	461a      	mov	r2, r3
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	2207      	movs	r2, #7
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43da      	mvns	r2, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	400a      	ands	r2, r1
 80022c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6919      	ldr	r1, [r3, #16]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4618      	mov	r0, r3
 80022d6:	4603      	mov	r3, r0
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4403      	add	r3, r0
 80022dc:	409a      	lsls	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	430a      	orrs	r2, r1
 80022e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b06      	cmp	r3, #6
 80022ec:	d824      	bhi.n	8002338 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	3b05      	subs	r3, #5
 8002300:	221f      	movs	r2, #31
 8002302:	fa02 f303 	lsl.w	r3, r2, r3
 8002306:	43da      	mvns	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	400a      	ands	r2, r1
 800230e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	b29b      	uxth	r3, r3
 800231c:	4618      	mov	r0, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	3b05      	subs	r3, #5
 800232a:	fa00 f203 	lsl.w	r2, r0, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	635a      	str	r2, [r3, #52]	; 0x34
 8002336:	e04c      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b0c      	cmp	r3, #12
 800233e:	d824      	bhi.n	800238a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685a      	ldr	r2, [r3, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	3b23      	subs	r3, #35	; 0x23
 8002352:	221f      	movs	r2, #31
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43da      	mvns	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	400a      	ands	r2, r1
 8002360:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	b29b      	uxth	r3, r3
 800236e:	4618      	mov	r0, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	3b23      	subs	r3, #35	; 0x23
 800237c:	fa00 f203 	lsl.w	r2, r0, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	631a      	str	r2, [r3, #48]	; 0x30
 8002388:	e023      	b.n	80023d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	4613      	mov	r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	4413      	add	r3, r2
 800239a:	3b41      	subs	r3, #65	; 0x41
 800239c:	221f      	movs	r2, #31
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43da      	mvns	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	400a      	ands	r2, r1
 80023aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	4618      	mov	r0, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	3b41      	subs	r3, #65	; 0x41
 80023c6:	fa00 f203 	lsl.w	r2, r0, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023d2:	4b22      	ldr	r3, [pc, #136]	; (800245c <HAL_ADC_ConfigChannel+0x234>)
 80023d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a21      	ldr	r2, [pc, #132]	; (8002460 <HAL_ADC_ConfigChannel+0x238>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d109      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x1cc>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b12      	cmp	r3, #18
 80023e6:	d105      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a19      	ldr	r2, [pc, #100]	; (8002460 <HAL_ADC_ConfigChannel+0x238>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d123      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x21e>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b10      	cmp	r3, #16
 8002404:	d003      	beq.n	800240e <HAL_ADC_ConfigChannel+0x1e6>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b11      	cmp	r3, #17
 800240c:	d11b      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2b10      	cmp	r3, #16
 8002420:	d111      	bne.n	8002446 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002422:	4b10      	ldr	r3, [pc, #64]	; (8002464 <HAL_ADC_ConfigChannel+0x23c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a10      	ldr	r2, [pc, #64]	; (8002468 <HAL_ADC_ConfigChannel+0x240>)
 8002428:	fba2 2303 	umull	r2, r3, r2, r3
 800242c:	0c9a      	lsrs	r2, r3, #18
 800242e:	4613      	mov	r3, r2
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002438:	e002      	b.n	8002440 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	3b01      	subs	r3, #1
 800243e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1f9      	bne.n	800243a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800244e:	2300      	movs	r3, #0
}
 8002450:	4618      	mov	r0, r3
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245a:	4770      	bx	lr
 800245c:	40012300 	.word	0x40012300
 8002460:	40012000 	.word	0x40012000
 8002464:	20000000 	.word	0x20000000
 8002468:	431bde83 	.word	0x431bde83

0800246c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002474:	4b79      	ldr	r3, [pc, #484]	; (800265c <ADC_Init+0x1f0>)
 8002476:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	431a      	orrs	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	021a      	lsls	r2, r3, #8
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6899      	ldr	r1, [r3, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fe:	4a58      	ldr	r2, [pc, #352]	; (8002660 <ADC_Init+0x1f4>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d022      	beq.n	800254a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002512:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6899      	ldr	r1, [r3, #8]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002534:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6899      	ldr	r1, [r3, #8]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	e00f      	b.n	800256a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002558:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	689a      	ldr	r2, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002568:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0202 	bic.w	r2, r2, #2
 8002578:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6899      	ldr	r1, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7e1b      	ldrb	r3, [r3, #24]
 8002584:	005a      	lsls	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d01b      	beq.n	80025d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	685a      	ldr	r2, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80025b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6859      	ldr	r1, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	3b01      	subs	r3, #1
 80025c4:	035a      	lsls	r2, r3, #13
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	e007      	b.n	80025e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	051a      	lsls	r2, r3, #20
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002614:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6899      	ldr	r1, [r3, #8]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002622:	025a      	lsls	r2, r3, #9
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800263a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6899      	ldr	r1, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
 8002646:	029a      	lsls	r2, r3, #10
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	609a      	str	r2, [r3, #8]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	40012300 	.word	0x40012300
 8002660:	0f000001 	.word	0x0f000001

08002664 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e0ed      	b.n	8002852 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3020 	ldrb.w	r3, [r3, #32]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d102      	bne.n	8002688 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff f95a 	bl	800193c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002698:	f7ff fbd8 	bl	8001e4c <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800269e:	e012      	b.n	80026c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026a0:	f7ff fbd4 	bl	8001e4c <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b0a      	cmp	r3, #10
 80026ac:	d90b      	bls.n	80026c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2205      	movs	r2, #5
 80026be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0c5      	b.n	8002852 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0e5      	beq.n	80026a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0202 	bic.w	r2, r2, #2
 80026e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026e4:	f7ff fbb2 	bl	8001e4c <HAL_GetTick>
 80026e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026ea:	e012      	b.n	8002712 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026ec:	f7ff fbae 	bl	8001e4c <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b0a      	cmp	r3, #10
 80026f8:	d90b      	bls.n	8002712 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2205      	movs	r2, #5
 800270a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e09f      	b.n	8002852 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1e5      	bne.n	80026ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7e1b      	ldrb	r3, [r3, #24]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d108      	bne.n	800273a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	e007      	b.n	800274a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002748:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	7e5b      	ldrb	r3, [r3, #25]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d108      	bne.n	8002764 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	e007      	b.n	8002774 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002772:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	7e9b      	ldrb	r3, [r3, #26]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d108      	bne.n	800278e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0220 	orr.w	r2, r2, #32
 800278a:	601a      	str	r2, [r3, #0]
 800278c:	e007      	b.n	800279e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f022 0220 	bic.w	r2, r2, #32
 800279c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	7edb      	ldrb	r3, [r3, #27]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d108      	bne.n	80027b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0210 	bic.w	r2, r2, #16
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e007      	b.n	80027c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0210 	orr.w	r2, r2, #16
 80027c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	7f1b      	ldrb	r3, [r3, #28]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d108      	bne.n	80027e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0208 	orr.w	r2, r2, #8
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	e007      	b.n	80027f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0208 	bic.w	r2, r2, #8
 80027f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	7f5b      	ldrb	r3, [r3, #29]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d108      	bne.n	800280c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0204 	orr.w	r2, r2, #4
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	e007      	b.n	800281c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0204 	bic.w	r2, r2, #4
 800281a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	431a      	orrs	r2, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	ea42 0103 	orr.w	r1, r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	1e5a      	subs	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	430a      	orrs	r2, r1
 8002840:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002850:	2300      	movs	r3, #0
}
 8002852:	4618      	mov	r0, r3
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002872:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002874:	7cfb      	ldrb	r3, [r7, #19]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d003      	beq.n	8002882 <HAL_CAN_ConfigFilter+0x26>
 800287a:	7cfb      	ldrb	r3, [r7, #19]
 800287c:	2b02      	cmp	r3, #2
 800287e:	f040 80be 	bne.w	80029fe <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002882:	4b65      	ldr	r3, [pc, #404]	; (8002a18 <HAL_CAN_ConfigFilter+0x1bc>)
 8002884:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800288c:	f043 0201 	orr.w	r2, r3, #1
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800289c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	431a      	orrs	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f003 031f 	and.w	r3, r3, #31
 80028c2:	2201      	movs	r2, #1
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	401a      	ands	r2, r3
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d123      	bne.n	800292c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	401a      	ands	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002906:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	3248      	adds	r2, #72	; 0x48
 800290c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002920:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002922:	6979      	ldr	r1, [r7, #20]
 8002924:	3348      	adds	r3, #72	; 0x48
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	440b      	add	r3, r1
 800292a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d122      	bne.n	800297a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	431a      	orrs	r2, r3
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002950:	683a      	ldr	r2, [r7, #0]
 8002952:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002954:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	3248      	adds	r2, #72	; 0x48
 800295a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800296e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002970:	6979      	ldr	r1, [r7, #20]
 8002972:	3348      	adds	r3, #72	; 0x48
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	440b      	add	r3, r1
 8002978:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d109      	bne.n	8002996 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	43db      	mvns	r3, r3
 800298c:	401a      	ands	r2, r3
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002994:	e007      	b.n	80029a6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	431a      	orrs	r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	401a      	ands	r2, r3
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80029c0:	e007      	b.n	80029d2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	431a      	orrs	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d107      	bne.n	80029ea <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029f0:	f023 0201 	bic.w	r2, r3, #1
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	e006      	b.n	8002a0c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
  }
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	371c      	adds	r7, #28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	40006400 	.word	0x40006400

08002a1c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d12e      	bne.n	8002a8e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0201 	bic.w	r2, r2, #1
 8002a46:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a48:	f7ff fa00 	bl	8001e4c <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a4e:	e012      	b.n	8002a76 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a50:	f7ff f9fc 	bl	8001e4c <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b0a      	cmp	r3, #10
 8002a5c:	d90b      	bls.n	8002a76 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2205      	movs	r2, #5
 8002a6e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e012      	b.n	8002a9c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1e5      	bne.n	8002a50 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	e006      	b.n	8002a9c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
  }
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ab8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002aba:	7dfb      	ldrb	r3, [r7, #23]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d003      	beq.n	8002ac8 <HAL_CAN_GetRxMessage+0x24>
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	f040 80f3 	bne.w	8002cae <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10e      	bne.n	8002aec <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d116      	bne.n	8002b0a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0e7      	b.n	8002cbc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d107      	bne.n	8002b0a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e0d8      	b.n	8002cbc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	331b      	adds	r3, #27
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	4413      	add	r3, r2
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0204 	and.w	r2, r3, #4
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10c      	bne.n	8002b42 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	331b      	adds	r3, #27
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	4413      	add	r3, r2
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	0d5b      	lsrs	r3, r3, #21
 8002b38:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e00b      	b.n	8002b5a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	331b      	adds	r3, #27
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	4413      	add	r3, r2
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	08db      	lsrs	r3, r3, #3
 8002b52:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	331b      	adds	r3, #27
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	4413      	add	r3, r2
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0202 	and.w	r2, r3, #2
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	331b      	adds	r3, #27
 8002b78:	011b      	lsls	r3, r3, #4
 8002b7a:	4413      	add	r3, r2
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 020f 	and.w	r2, r3, #15
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	331b      	adds	r3, #27
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	4413      	add	r3, r2
 8002b94:	3304      	adds	r3, #4
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	0a1b      	lsrs	r3, r3, #8
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	331b      	adds	r3, #27
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	4413      	add	r3, r2
 8002bac:	3304      	adds	r3, #4
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	0c1b      	lsrs	r3, r3, #16
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	4413      	add	r3, r2
 8002bc2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	b2da      	uxtb	r2, r3
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	0a1a      	lsrs	r2, r3, #8
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	3301      	adds	r3, #1
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	0c1a      	lsrs	r2, r3, #16
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	3302      	adds	r3, #2
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	4413      	add	r3, r2
 8002c0c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	0e1a      	lsrs	r2, r3, #24
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	3303      	adds	r3, #3
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	0a1a      	lsrs	r2, r3, #8
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	3305      	adds	r3, #5
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	0c1a      	lsrs	r2, r3, #16
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	3306      	adds	r3, #6
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	0e1a      	lsrs	r2, r3, #24
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	3307      	adds	r3, #7
 8002c7e:	b2d2      	uxtb	r2, r2
 8002c80:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d108      	bne.n	8002c9a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0220 	orr.w	r2, r2, #32
 8002c96:	60da      	str	r2, [r3, #12]
 8002c98:	e007      	b.n	8002caa <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0220 	orr.w	r2, r2, #32
 8002ca8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e006      	b.n	8002cbc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
  }
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cd8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d002      	beq.n	8002ce6 <HAL_CAN_ActivateNotification+0x1e>
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d109      	bne.n	8002cfa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6959      	ldr	r1, [r3, #20]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	e006      	b.n	8002d08 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
  }
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3714      	adds	r7, #20
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b08a      	sub	sp, #40	; 0x28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d07c      	beq.n	8002e54 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d023      	beq.n	8002dac <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f983 	bl	8003082 <HAL_CAN_TxMailbox0CompleteCallback>
 8002d7c:	e016      	b.n	8002dac <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d004      	beq.n	8002d92 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d90:	e00c      	b.n	8002dac <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	f003 0308 	and.w	r3, r3, #8
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d004      	beq.n	8002da6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
 8002da4:	e002      	b.n	8002dac <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f989 	bl	80030be <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d024      	beq.n	8002e00 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dbe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f963 	bl	8003096 <HAL_CAN_TxMailbox1CompleteCallback>
 8002dd0:	e016      	b.n	8002e00 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d004      	beq.n	8002de6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24
 8002de4:	e00c      	b.n	8002e00 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d004      	beq.n	8002dfa <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002df6:	627b      	str	r3, [r7, #36]	; 0x24
 8002df8:	e002      	b.n	8002e00 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f969 	bl	80030d2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d024      	beq.n	8002e54 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f943 	bl	80030aa <HAL_CAN_TxMailbox2CompleteCallback>
 8002e24:	e016      	b.n	8002e54 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d004      	beq.n	8002e3a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
 8002e38:	e00c      	b.n	8002e54 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d004      	beq.n	8002e4e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4c:	e002      	b.n	8002e54 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f949 	bl	80030e6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	f003 0308 	and.w	r3, r3, #8
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00c      	beq.n	8002e78 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2210      	movs	r2, #16
 8002e76:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	f003 0304 	and.w	r3, r3, #4
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00b      	beq.n	8002e9a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d006      	beq.n	8002e9a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2208      	movs	r2, #8
 8002e92:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f93a 	bl	800310e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d009      	beq.n	8002eb8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 f921 	bl	80030fa <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00c      	beq.n	8002edc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d007      	beq.n	8002edc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2210      	movs	r2, #16
 8002eda:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002edc:	6a3b      	ldr	r3, [r7, #32]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00b      	beq.n	8002efe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d006      	beq.n	8002efe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2208      	movs	r2, #8
 8002ef6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 f91c 	bl	8003136 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	f003 0310 	and.w	r3, r3, #16
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d009      	beq.n	8002f1c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f903 	bl	8003122 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00b      	beq.n	8002f3e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d006      	beq.n	8002f3e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2210      	movs	r2, #16
 8002f36:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f000 f906 	bl	800314a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00b      	beq.n	8002f60 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d006      	beq.n	8002f60 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2208      	movs	r2, #8
 8002f58:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f8ff 	bl	800315e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d07b      	beq.n	8003062 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d072      	beq.n	800305a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d008      	beq.n	8002f90 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d008      	beq.n	8002fac <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d003      	beq.n	8002fac <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	f043 0302 	orr.w	r3, r3, #2
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d008      	beq.n	8002fc8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	f043 0304 	orr.w	r3, r3, #4
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d043      	beq.n	800305a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d03e      	beq.n	800305a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fe2:	2b60      	cmp	r3, #96	; 0x60
 8002fe4:	d02b      	beq.n	800303e <HAL_CAN_IRQHandler+0x32a>
 8002fe6:	2b60      	cmp	r3, #96	; 0x60
 8002fe8:	d82e      	bhi.n	8003048 <HAL_CAN_IRQHandler+0x334>
 8002fea:	2b50      	cmp	r3, #80	; 0x50
 8002fec:	d022      	beq.n	8003034 <HAL_CAN_IRQHandler+0x320>
 8002fee:	2b50      	cmp	r3, #80	; 0x50
 8002ff0:	d82a      	bhi.n	8003048 <HAL_CAN_IRQHandler+0x334>
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	d019      	beq.n	800302a <HAL_CAN_IRQHandler+0x316>
 8002ff6:	2b40      	cmp	r3, #64	; 0x40
 8002ff8:	d826      	bhi.n	8003048 <HAL_CAN_IRQHandler+0x334>
 8002ffa:	2b30      	cmp	r3, #48	; 0x30
 8002ffc:	d010      	beq.n	8003020 <HAL_CAN_IRQHandler+0x30c>
 8002ffe:	2b30      	cmp	r3, #48	; 0x30
 8003000:	d822      	bhi.n	8003048 <HAL_CAN_IRQHandler+0x334>
 8003002:	2b10      	cmp	r3, #16
 8003004:	d002      	beq.n	800300c <HAL_CAN_IRQHandler+0x2f8>
 8003006:	2b20      	cmp	r3, #32
 8003008:	d005      	beq.n	8003016 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800300a:	e01d      	b.n	8003048 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	f043 0308 	orr.w	r3, r3, #8
 8003012:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003014:	e019      	b.n	800304a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003018:	f043 0310 	orr.w	r3, r3, #16
 800301c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800301e:	e014      	b.n	800304a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	f043 0320 	orr.w	r3, r3, #32
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003028:	e00f      	b.n	800304a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003030:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003032:	e00a      	b.n	800304a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800303c:	e005      	b.n	800304a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003046:	e000      	b.n	800304a <HAL_CAN_IRQHandler+0x336>
            break;
 8003048:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699a      	ldr	r2, [r3, #24]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003058:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2204      	movs	r2, #4
 8003060:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	2b00      	cmp	r3, #0
 8003066:	d008      	beq.n	800307a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f87c 	bl	8003172 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800307a:	bf00      	nop
 800307c:	3728      	adds	r7, #40	; 0x28
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80030da:	bf00      	nop
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr

0800310e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003116:	bf00      	nop
 8003118:	370c      	adds	r7, #12
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003122:	b480      	push	{r7}
 8003124:	b083      	sub	sp, #12
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr

08003136 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003136:	b480      	push	{r7}
 8003138:	b083      	sub	sp, #12
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800313e:	bf00      	nop
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800314a:	b480      	push	{r7}
 800314c:	b083      	sub	sp, #12
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003198:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <__NVIC_SetPriorityGrouping+0x44>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031a4:	4013      	ands	r3, r2
 80031a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ba:	4a04      	ldr	r2, [pc, #16]	; (80031cc <__NVIC_SetPriorityGrouping+0x44>)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	60d3      	str	r3, [r2, #12]
}
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d4:	4b04      	ldr	r3, [pc, #16]	; (80031e8 <__NVIC_GetPriorityGrouping+0x18>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	0a1b      	lsrs	r3, r3, #8
 80031da:	f003 0307 	and.w	r3, r3, #7
}
 80031de:	4618      	mov	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	db0b      	blt.n	8003216 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	f003 021f 	and.w	r2, r3, #31
 8003204:	4907      	ldr	r1, [pc, #28]	; (8003224 <__NVIC_EnableIRQ+0x38>)
 8003206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	2001      	movs	r0, #1
 800320e:	fa00 f202 	lsl.w	r2, r0, r2
 8003212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	e000e100 	.word	0xe000e100

08003228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	6039      	str	r1, [r7, #0]
 8003232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003238:	2b00      	cmp	r3, #0
 800323a:	db0a      	blt.n	8003252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	b2da      	uxtb	r2, r3
 8003240:	490c      	ldr	r1, [pc, #48]	; (8003274 <__NVIC_SetPriority+0x4c>)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	0112      	lsls	r2, r2, #4
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	440b      	add	r3, r1
 800324c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003250:	e00a      	b.n	8003268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	b2da      	uxtb	r2, r3
 8003256:	4908      	ldr	r1, [pc, #32]	; (8003278 <__NVIC_SetPriority+0x50>)
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	3b04      	subs	r3, #4
 8003260:	0112      	lsls	r2, r2, #4
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	440b      	add	r3, r1
 8003266:	761a      	strb	r2, [r3, #24]
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	e000e100 	.word	0xe000e100
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800327c:	b480      	push	{r7}
 800327e:	b089      	sub	sp, #36	; 0x24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f1c3 0307 	rsb	r3, r3, #7
 8003296:	2b04      	cmp	r3, #4
 8003298:	bf28      	it	cs
 800329a:	2304      	movcs	r3, #4
 800329c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	3304      	adds	r3, #4
 80032a2:	2b06      	cmp	r3, #6
 80032a4:	d902      	bls.n	80032ac <NVIC_EncodePriority+0x30>
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	3b03      	subs	r3, #3
 80032aa:	e000      	b.n	80032ae <NVIC_EncodePriority+0x32>
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b0:	f04f 32ff 	mov.w	r2, #4294967295
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43da      	mvns	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	401a      	ands	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032c4:	f04f 31ff 	mov.w	r1, #4294967295
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	fa01 f303 	lsl.w	r3, r1, r3
 80032ce:	43d9      	mvns	r1, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d4:	4313      	orrs	r3, r2
         );
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3724      	adds	r7, #36	; 0x24
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f7ff ff4c 	bl	8003188 <__NVIC_SetPriorityGrouping>
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	4603      	mov	r3, r0
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800330a:	f7ff ff61 	bl	80031d0 <__NVIC_GetPriorityGrouping>
 800330e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	68b9      	ldr	r1, [r7, #8]
 8003314:	6978      	ldr	r0, [r7, #20]
 8003316:	f7ff ffb1 	bl	800327c <NVIC_EncodePriority>
 800331a:	4602      	mov	r2, r0
 800331c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003320:	4611      	mov	r1, r2
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff ff80 	bl	8003228 <__NVIC_SetPriority>
}
 8003328:	bf00      	nop
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800333a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ff54 	bl	80031ec <__NVIC_EnableIRQ>
}
 8003344:	bf00      	nop
 8003346:	3708      	adds	r7, #8
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800334c:	b480      	push	{r7}
 800334e:	b089      	sub	sp, #36	; 0x24
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800335e:	2300      	movs	r3, #0
 8003360:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
 8003366:	e16b      	b.n	8003640 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003368:	2201      	movs	r2, #1
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4013      	ands	r3, r2
 800337a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	429a      	cmp	r2, r3
 8003382:	f040 815a 	bne.w	800363a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	2b01      	cmp	r3, #1
 8003390:	d005      	beq.n	800339e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800339a:	2b02      	cmp	r3, #2
 800339c:	d130      	bne.n	8003400 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	2203      	movs	r2, #3
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43db      	mvns	r3, r3
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4013      	ands	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	fa02 f303 	lsl.w	r3, r2, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033d4:	2201      	movs	r2, #1
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	091b      	lsrs	r3, r3, #4
 80033ea:	f003 0201 	and.w	r2, r3, #1
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f003 0303 	and.w	r3, r3, #3
 8003408:	2b03      	cmp	r3, #3
 800340a:	d017      	beq.n	800343c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	2203      	movs	r2, #3
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	689a      	ldr	r2, [r3, #8]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0303 	and.w	r3, r3, #3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d123      	bne.n	8003490 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	08da      	lsrs	r2, r3, #3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3208      	adds	r2, #8
 8003450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003454:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	220f      	movs	r2, #15
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4313      	orrs	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	08da      	lsrs	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	3208      	adds	r2, #8
 800348a:	69b9      	ldr	r1, [r7, #24]
 800348c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	2203      	movs	r2, #3
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 0203 	and.w	r2, r3, #3
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80b4 	beq.w	800363a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	4b60      	ldr	r3, [pc, #384]	; (8003658 <HAL_GPIO_Init+0x30c>)
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	4a5f      	ldr	r2, [pc, #380]	; (8003658 <HAL_GPIO_Init+0x30c>)
 80034dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034e0:	6453      	str	r3, [r2, #68]	; 0x44
 80034e2:	4b5d      	ldr	r3, [pc, #372]	; (8003658 <HAL_GPIO_Init+0x30c>)
 80034e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034ea:	60fb      	str	r3, [r7, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034ee:	4a5b      	ldr	r2, [pc, #364]	; (800365c <HAL_GPIO_Init+0x310>)
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	089b      	lsrs	r3, r3, #2
 80034f4:	3302      	adds	r3, #2
 80034f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f003 0303 	and.w	r3, r3, #3
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	220f      	movs	r2, #15
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43db      	mvns	r3, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4013      	ands	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a52      	ldr	r2, [pc, #328]	; (8003660 <HAL_GPIO_Init+0x314>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d02b      	beq.n	8003572 <HAL_GPIO_Init+0x226>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a51      	ldr	r2, [pc, #324]	; (8003664 <HAL_GPIO_Init+0x318>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d025      	beq.n	800356e <HAL_GPIO_Init+0x222>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a50      	ldr	r2, [pc, #320]	; (8003668 <HAL_GPIO_Init+0x31c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d01f      	beq.n	800356a <HAL_GPIO_Init+0x21e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a4f      	ldr	r2, [pc, #316]	; (800366c <HAL_GPIO_Init+0x320>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d019      	beq.n	8003566 <HAL_GPIO_Init+0x21a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a4e      	ldr	r2, [pc, #312]	; (8003670 <HAL_GPIO_Init+0x324>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d013      	beq.n	8003562 <HAL_GPIO_Init+0x216>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a4d      	ldr	r2, [pc, #308]	; (8003674 <HAL_GPIO_Init+0x328>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00d      	beq.n	800355e <HAL_GPIO_Init+0x212>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a4c      	ldr	r2, [pc, #304]	; (8003678 <HAL_GPIO_Init+0x32c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d007      	beq.n	800355a <HAL_GPIO_Init+0x20e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a4b      	ldr	r2, [pc, #300]	; (800367c <HAL_GPIO_Init+0x330>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d101      	bne.n	8003556 <HAL_GPIO_Init+0x20a>
 8003552:	2307      	movs	r3, #7
 8003554:	e00e      	b.n	8003574 <HAL_GPIO_Init+0x228>
 8003556:	2308      	movs	r3, #8
 8003558:	e00c      	b.n	8003574 <HAL_GPIO_Init+0x228>
 800355a:	2306      	movs	r3, #6
 800355c:	e00a      	b.n	8003574 <HAL_GPIO_Init+0x228>
 800355e:	2305      	movs	r3, #5
 8003560:	e008      	b.n	8003574 <HAL_GPIO_Init+0x228>
 8003562:	2304      	movs	r3, #4
 8003564:	e006      	b.n	8003574 <HAL_GPIO_Init+0x228>
 8003566:	2303      	movs	r3, #3
 8003568:	e004      	b.n	8003574 <HAL_GPIO_Init+0x228>
 800356a:	2302      	movs	r3, #2
 800356c:	e002      	b.n	8003574 <HAL_GPIO_Init+0x228>
 800356e:	2301      	movs	r3, #1
 8003570:	e000      	b.n	8003574 <HAL_GPIO_Init+0x228>
 8003572:	2300      	movs	r3, #0
 8003574:	69fa      	ldr	r2, [r7, #28]
 8003576:	f002 0203 	and.w	r2, r2, #3
 800357a:	0092      	lsls	r2, r2, #2
 800357c:	4093      	lsls	r3, r2
 800357e:	69ba      	ldr	r2, [r7, #24]
 8003580:	4313      	orrs	r3, r2
 8003582:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003584:	4935      	ldr	r1, [pc, #212]	; (800365c <HAL_GPIO_Init+0x310>)
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	089b      	lsrs	r3, r3, #2
 800358a:	3302      	adds	r3, #2
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003592:	4b3b      	ldr	r3, [pc, #236]	; (8003680 <HAL_GPIO_Init+0x334>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	43db      	mvns	r3, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4013      	ands	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035b6:	4a32      	ldr	r2, [pc, #200]	; (8003680 <HAL_GPIO_Init+0x334>)
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035bc:	4b30      	ldr	r3, [pc, #192]	; (8003680 <HAL_GPIO_Init+0x334>)
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035e0:	4a27      	ldr	r2, [pc, #156]	; (8003680 <HAL_GPIO_Init+0x334>)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035e6:	4b26      	ldr	r3, [pc, #152]	; (8003680 <HAL_GPIO_Init+0x334>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800360a:	4a1d      	ldr	r2, [pc, #116]	; (8003680 <HAL_GPIO_Init+0x334>)
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003610:	4b1b      	ldr	r3, [pc, #108]	; (8003680 <HAL_GPIO_Init+0x334>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003634:	4a12      	ldr	r2, [pc, #72]	; (8003680 <HAL_GPIO_Init+0x334>)
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	3301      	adds	r3, #1
 800363e:	61fb      	str	r3, [r7, #28]
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	2b0f      	cmp	r3, #15
 8003644:	f67f ae90 	bls.w	8003368 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003648:	bf00      	nop
 800364a:	bf00      	nop
 800364c:	3724      	adds	r7, #36	; 0x24
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40023800 	.word	0x40023800
 800365c:	40013800 	.word	0x40013800
 8003660:	40020000 	.word	0x40020000
 8003664:	40020400 	.word	0x40020400
 8003668:	40020800 	.word	0x40020800
 800366c:	40020c00 	.word	0x40020c00
 8003670:	40021000 	.word	0x40021000
 8003674:	40021400 	.word	0x40021400
 8003678:	40021800 	.word	0x40021800
 800367c:	40021c00 	.word	0x40021c00
 8003680:	40013c00 	.word	0x40013c00

08003684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d101      	bne.n	8003696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e267      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d075      	beq.n	800378e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036a2:	4b88      	ldr	r3, [pc, #544]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d00c      	beq.n	80036c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ae:	4b85      	ldr	r3, [pc, #532]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d112      	bne.n	80036e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ba:	4b82      	ldr	r3, [pc, #520]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036c6:	d10b      	bne.n	80036e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c8:	4b7e      	ldr	r3, [pc, #504]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d05b      	beq.n	800378c <HAL_RCC_OscConfig+0x108>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d157      	bne.n	800378c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e242      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036e8:	d106      	bne.n	80036f8 <HAL_RCC_OscConfig+0x74>
 80036ea:	4b76      	ldr	r3, [pc, #472]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a75      	ldr	r2, [pc, #468]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80036f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	e01d      	b.n	8003734 <HAL_RCC_OscConfig+0xb0>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003700:	d10c      	bne.n	800371c <HAL_RCC_OscConfig+0x98>
 8003702:	4b70      	ldr	r3, [pc, #448]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a6f      	ldr	r2, [pc, #444]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	4b6d      	ldr	r3, [pc, #436]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a6c      	ldr	r2, [pc, #432]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e00b      	b.n	8003734 <HAL_RCC_OscConfig+0xb0>
 800371c:	4b69      	ldr	r3, [pc, #420]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a68      	ldr	r2, [pc, #416]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	4b66      	ldr	r3, [pc, #408]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a65      	ldr	r2, [pc, #404]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 800372e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d013      	beq.n	8003764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800373c:	f7fe fb86 	bl	8001e4c <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003744:	f7fe fb82 	bl	8001e4c <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b64      	cmp	r3, #100	; 0x64
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e207      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	4b5b      	ldr	r3, [pc, #364]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0xc0>
 8003762:	e014      	b.n	800378e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fe fb72 	bl	8001e4c <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800376c:	f7fe fb6e 	bl	8001e4c <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b64      	cmp	r3, #100	; 0x64
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e1f3      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377e:	4b51      	ldr	r3, [pc, #324]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0xe8>
 800378a:	e000      	b.n	800378e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800378c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d063      	beq.n	8003862 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800379a:	4b4a      	ldr	r3, [pc, #296]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00b      	beq.n	80037be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037a6:	4b47      	ldr	r3, [pc, #284]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d11c      	bne.n	80037ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037b2:	4b44      	ldr	r3, [pc, #272]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d116      	bne.n	80037ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037be:	4b41      	ldr	r3, [pc, #260]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <HAL_RCC_OscConfig+0x152>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d001      	beq.n	80037d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e1c7      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d6:	4b3b      	ldr	r3, [pc, #236]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	4937      	ldr	r1, [pc, #220]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ea:	e03a      	b.n	8003862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d020      	beq.n	8003836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037f4:	4b34      	ldr	r3, [pc, #208]	; (80038c8 <HAL_RCC_OscConfig+0x244>)
 80037f6:	2201      	movs	r2, #1
 80037f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fa:	f7fe fb27 	bl	8001e4c <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003802:	f7fe fb23 	bl	8001e4c <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e1a8      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003814:	4b2b      	ldr	r3, [pc, #172]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0f0      	beq.n	8003802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003820:	4b28      	ldr	r3, [pc, #160]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	4925      	ldr	r1, [pc, #148]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003830:	4313      	orrs	r3, r2
 8003832:	600b      	str	r3, [r1, #0]
 8003834:	e015      	b.n	8003862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003836:	4b24      	ldr	r3, [pc, #144]	; (80038c8 <HAL_RCC_OscConfig+0x244>)
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fe fb06 	bl	8001e4c <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003844:	f7fe fb02 	bl	8001e4c <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e187      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003856:	4b1b      	ldr	r3, [pc, #108]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d036      	beq.n	80038dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d016      	beq.n	80038a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003876:	4b15      	ldr	r3, [pc, #84]	; (80038cc <HAL_RCC_OscConfig+0x248>)
 8003878:	2201      	movs	r2, #1
 800387a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800387c:	f7fe fae6 	bl	8001e4c <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003884:	f7fe fae2 	bl	8001e4c <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e167      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003896:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <HAL_RCC_OscConfig+0x240>)
 8003898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d0f0      	beq.n	8003884 <HAL_RCC_OscConfig+0x200>
 80038a2:	e01b      	b.n	80038dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a4:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_RCC_OscConfig+0x248>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038aa:	f7fe facf 	bl	8001e4c <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b0:	e00e      	b.n	80038d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038b2:	f7fe facb 	bl	8001e4c <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d907      	bls.n	80038d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e150      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
 80038c4:	40023800 	.word	0x40023800
 80038c8:	42470000 	.word	0x42470000
 80038cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d0:	4b88      	ldr	r3, [pc, #544]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 80038d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1ea      	bne.n	80038b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8097 	beq.w	8003a18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ea:	2300      	movs	r3, #0
 80038ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038ee:	4b81      	ldr	r3, [pc, #516]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10f      	bne.n	800391a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038fa:	2300      	movs	r3, #0
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	4b7d      	ldr	r3, [pc, #500]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003902:	4a7c      	ldr	r2, [pc, #496]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003908:	6413      	str	r3, [r2, #64]	; 0x40
 800390a:	4b7a      	ldr	r3, [pc, #488]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003912:	60bb      	str	r3, [r7, #8]
 8003914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003916:	2301      	movs	r3, #1
 8003918:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391a:	4b77      	ldr	r3, [pc, #476]	; (8003af8 <HAL_RCC_OscConfig+0x474>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003922:	2b00      	cmp	r3, #0
 8003924:	d118      	bne.n	8003958 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003926:	4b74      	ldr	r3, [pc, #464]	; (8003af8 <HAL_RCC_OscConfig+0x474>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a73      	ldr	r2, [pc, #460]	; (8003af8 <HAL_RCC_OscConfig+0x474>)
 800392c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003932:	f7fe fa8b 	bl	8001e4c <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800393a:	f7fe fa87 	bl	8001e4c <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e10c      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800394c:	4b6a      	ldr	r3, [pc, #424]	; (8003af8 <HAL_RCC_OscConfig+0x474>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d106      	bne.n	800396e <HAL_RCC_OscConfig+0x2ea>
 8003960:	4b64      	ldr	r3, [pc, #400]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	4a63      	ldr	r2, [pc, #396]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003966:	f043 0301 	orr.w	r3, r3, #1
 800396a:	6713      	str	r3, [r2, #112]	; 0x70
 800396c:	e01c      	b.n	80039a8 <HAL_RCC_OscConfig+0x324>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	2b05      	cmp	r3, #5
 8003974:	d10c      	bne.n	8003990 <HAL_RCC_OscConfig+0x30c>
 8003976:	4b5f      	ldr	r3, [pc, #380]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397a:	4a5e      	ldr	r2, [pc, #376]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 800397c:	f043 0304 	orr.w	r3, r3, #4
 8003980:	6713      	str	r3, [r2, #112]	; 0x70
 8003982:	4b5c      	ldr	r3, [pc, #368]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003986:	4a5b      	ldr	r2, [pc, #364]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	6713      	str	r3, [r2, #112]	; 0x70
 800398e:	e00b      	b.n	80039a8 <HAL_RCC_OscConfig+0x324>
 8003990:	4b58      	ldr	r3, [pc, #352]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003994:	4a57      	ldr	r2, [pc, #348]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003996:	f023 0301 	bic.w	r3, r3, #1
 800399a:	6713      	str	r3, [r2, #112]	; 0x70
 800399c:	4b55      	ldr	r3, [pc, #340]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	4a54      	ldr	r2, [pc, #336]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 80039a2:	f023 0304 	bic.w	r3, r3, #4
 80039a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d015      	beq.n	80039dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b0:	f7fe fa4c 	bl	8001e4c <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039b6:	e00a      	b.n	80039ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039b8:	f7fe fa48 	bl	8001e4c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e0cb      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ce:	4b49      	ldr	r3, [pc, #292]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 80039d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0ee      	beq.n	80039b8 <HAL_RCC_OscConfig+0x334>
 80039da:	e014      	b.n	8003a06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039dc:	f7fe fa36 	bl	8001e4c <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e2:	e00a      	b.n	80039fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e4:	f7fe fa32 	bl	8001e4c <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e0b5      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039fa:	4b3e      	ldr	r3, [pc, #248]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1ee      	bne.n	80039e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a06:	7dfb      	ldrb	r3, [r7, #23]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d105      	bne.n	8003a18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a0c:	4b39      	ldr	r3, [pc, #228]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	4a38      	ldr	r2, [pc, #224]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 80a1 	beq.w	8003b64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a22:	4b34      	ldr	r3, [pc, #208]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
 8003a2a:	2b08      	cmp	r3, #8
 8003a2c:	d05c      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d141      	bne.n	8003aba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a36:	4b31      	ldr	r3, [pc, #196]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3c:	f7fe fa06 	bl	8001e4c <HAL_GetTick>
 8003a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a42:	e008      	b.n	8003a56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a44:	f7fe fa02 	bl	8001e4c <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d901      	bls.n	8003a56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e087      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a56:	4b27      	ldr	r3, [pc, #156]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1f0      	bne.n	8003a44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69da      	ldr	r2, [r3, #28]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	019b      	lsls	r3, r3, #6
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	085b      	lsrs	r3, r3, #1
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	041b      	lsls	r3, r3, #16
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	061b      	lsls	r3, r3, #24
 8003a86:	491b      	ldr	r1, [pc, #108]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a8c:	4b1b      	ldr	r3, [pc, #108]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a92:	f7fe f9db 	bl	8001e4c <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a9a:	f7fe f9d7 	bl	8001e4c <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e05c      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aac:	4b11      	ldr	r3, [pc, #68]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0f0      	beq.n	8003a9a <HAL_RCC_OscConfig+0x416>
 8003ab8:	e054      	b.n	8003b64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aba:	4b10      	ldr	r3, [pc, #64]	; (8003afc <HAL_RCC_OscConfig+0x478>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac0:	f7fe f9c4 	bl	8001e4c <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac8:	f7fe f9c0 	bl	8001e4c <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e045      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ada:	4b06      	ldr	r3, [pc, #24]	; (8003af4 <HAL_RCC_OscConfig+0x470>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x444>
 8003ae6:	e03d      	b.n	8003b64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d107      	bne.n	8003b00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e038      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
 8003af4:	40023800 	.word	0x40023800
 8003af8:	40007000 	.word	0x40007000
 8003afc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b00:	4b1b      	ldr	r3, [pc, #108]	; (8003b70 <HAL_RCC_OscConfig+0x4ec>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	699b      	ldr	r3, [r3, #24]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d028      	beq.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d121      	bne.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d11a      	bne.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b30:	4013      	ands	r3, r2
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d111      	bne.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b46:	085b      	lsrs	r3, r3, #1
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d107      	bne.n	8003b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e000      	b.n	8003b66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40023800 	.word	0x40023800

08003b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d101      	bne.n	8003b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e0cc      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b88:	4b68      	ldr	r3, [pc, #416]	; (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d90c      	bls.n	8003bb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b96:	4b65      	ldr	r3, [pc, #404]	; (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9e:	4b63      	ldr	r3, [pc, #396]	; (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d001      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e0b8      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d020      	beq.n	8003bfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bc8:	4b59      	ldr	r3, [pc, #356]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	4a58      	ldr	r2, [pc, #352]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d005      	beq.n	8003bec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003be0:	4b53      	ldr	r3, [pc, #332]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	4a52      	ldr	r2, [pc, #328]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bec:	4b50      	ldr	r3, [pc, #320]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	494d      	ldr	r1, [pc, #308]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d044      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d107      	bne.n	8003c22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c12:	4b47      	ldr	r3, [pc, #284]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d119      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e07f      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d003      	beq.n	8003c32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c2e:	2b03      	cmp	r3, #3
 8003c30:	d107      	bne.n	8003c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c32:	4b3f      	ldr	r3, [pc, #252]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d109      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e06f      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c42:	4b3b      	ldr	r3, [pc, #236]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e067      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c52:	4b37      	ldr	r3, [pc, #220]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f023 0203 	bic.w	r2, r3, #3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	4934      	ldr	r1, [pc, #208]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c64:	f7fe f8f2 	bl	8001e4c <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c6c:	f7fe f8ee 	bl	8001e4c <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e04f      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c82:	4b2b      	ldr	r3, [pc, #172]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 020c 	and.w	r2, r3, #12
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d1eb      	bne.n	8003c6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c94:	4b25      	ldr	r3, [pc, #148]	; (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0307 	and.w	r3, r3, #7
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d20c      	bcs.n	8003cbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca2:	4b22      	ldr	r3, [pc, #136]	; (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003caa:	4b20      	ldr	r3, [pc, #128]	; (8003d2c <HAL_RCC_ClockConfig+0x1b8>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e032      	b.n	8003d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cc8:	4b19      	ldr	r3, [pc, #100]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	4916      	ldr	r1, [pc, #88]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d009      	beq.n	8003cfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ce6:	4b12      	ldr	r3, [pc, #72]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	490e      	ldr	r1, [pc, #56]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cfa:	f000 f821 	bl	8003d40 <HAL_RCC_GetSysClockFreq>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	091b      	lsrs	r3, r3, #4
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	490a      	ldr	r1, [pc, #40]	; (8003d34 <HAL_RCC_ClockConfig+0x1c0>)
 8003d0c:	5ccb      	ldrb	r3, [r1, r3]
 8003d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d12:	4a09      	ldr	r2, [pc, #36]	; (8003d38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d16:	4b09      	ldr	r3, [pc, #36]	; (8003d3c <HAL_RCC_ClockConfig+0x1c8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fd feda 	bl	8001ad4 <HAL_InitTick>

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023c00 	.word	0x40023c00
 8003d30:	40023800 	.word	0x40023800
 8003d34:	0800ac30 	.word	0x0800ac30
 8003d38:	20000000 	.word	0x20000000
 8003d3c:	20000004 	.word	0x20000004

08003d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d44:	b090      	sub	sp, #64	; 0x40
 8003d46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d50:	2300      	movs	r3, #0
 8003d52:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d58:	4b59      	ldr	r3, [pc, #356]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 030c 	and.w	r3, r3, #12
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d00d      	beq.n	8003d80 <HAL_RCC_GetSysClockFreq+0x40>
 8003d64:	2b08      	cmp	r3, #8
 8003d66:	f200 80a1 	bhi.w	8003eac <HAL_RCC_GetSysClockFreq+0x16c>
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <HAL_RCC_GetSysClockFreq+0x34>
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d003      	beq.n	8003d7a <HAL_RCC_GetSysClockFreq+0x3a>
 8003d72:	e09b      	b.n	8003eac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d74:	4b53      	ldr	r3, [pc, #332]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d76:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003d78:	e09b      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d7a:	4b53      	ldr	r3, [pc, #332]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d7e:	e098      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d80:	4b4f      	ldr	r3, [pc, #316]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d88:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d8a:	4b4d      	ldr	r3, [pc, #308]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d028      	beq.n	8003de8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d96:	4b4a      	ldr	r3, [pc, #296]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	099b      	lsrs	r3, r3, #6
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	623b      	str	r3, [r7, #32]
 8003da0:	627a      	str	r2, [r7, #36]	; 0x24
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003da8:	2100      	movs	r1, #0
 8003daa:	4b47      	ldr	r3, [pc, #284]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dac:	fb03 f201 	mul.w	r2, r3, r1
 8003db0:	2300      	movs	r3, #0
 8003db2:	fb00 f303 	mul.w	r3, r0, r3
 8003db6:	4413      	add	r3, r2
 8003db8:	4a43      	ldr	r2, [pc, #268]	; (8003ec8 <HAL_RCC_GetSysClockFreq+0x188>)
 8003dba:	fba0 1202 	umull	r1, r2, r0, r2
 8003dbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dc0:	460a      	mov	r2, r1
 8003dc2:	62ba      	str	r2, [r7, #40]	; 0x28
 8003dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dc6:	4413      	add	r3, r2
 8003dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dcc:	2200      	movs	r2, #0
 8003dce:	61bb      	str	r3, [r7, #24]
 8003dd0:	61fa      	str	r2, [r7, #28]
 8003dd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003dda:	f7fc ff55 	bl	8000c88 <__aeabi_uldivmod>
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4613      	mov	r3, r2
 8003de4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003de6:	e053      	b.n	8003e90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de8:	4b35      	ldr	r3, [pc, #212]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	099b      	lsrs	r3, r3, #6
 8003dee:	2200      	movs	r2, #0
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	617a      	str	r2, [r7, #20]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003dfa:	f04f 0b00 	mov.w	fp, #0
 8003dfe:	4652      	mov	r2, sl
 8003e00:	465b      	mov	r3, fp
 8003e02:	f04f 0000 	mov.w	r0, #0
 8003e06:	f04f 0100 	mov.w	r1, #0
 8003e0a:	0159      	lsls	r1, r3, #5
 8003e0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e10:	0150      	lsls	r0, r2, #5
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	ebb2 080a 	subs.w	r8, r2, sl
 8003e1a:	eb63 090b 	sbc.w	r9, r3, fp
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003e2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003e2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003e32:	ebb2 0408 	subs.w	r4, r2, r8
 8003e36:	eb63 0509 	sbc.w	r5, r3, r9
 8003e3a:	f04f 0200 	mov.w	r2, #0
 8003e3e:	f04f 0300 	mov.w	r3, #0
 8003e42:	00eb      	lsls	r3, r5, #3
 8003e44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e48:	00e2      	lsls	r2, r4, #3
 8003e4a:	4614      	mov	r4, r2
 8003e4c:	461d      	mov	r5, r3
 8003e4e:	eb14 030a 	adds.w	r3, r4, sl
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	eb45 030b 	adc.w	r3, r5, fp
 8003e58:	607b      	str	r3, [r7, #4]
 8003e5a:	f04f 0200 	mov.w	r2, #0
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e66:	4629      	mov	r1, r5
 8003e68:	028b      	lsls	r3, r1, #10
 8003e6a:	4621      	mov	r1, r4
 8003e6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e70:	4621      	mov	r1, r4
 8003e72:	028a      	lsls	r2, r1, #10
 8003e74:	4610      	mov	r0, r2
 8003e76:	4619      	mov	r1, r3
 8003e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	60bb      	str	r3, [r7, #8]
 8003e7e:	60fa      	str	r2, [r7, #12]
 8003e80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e84:	f7fc ff00 	bl	8000c88 <__aeabi_uldivmod>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e90:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	0c1b      	lsrs	r3, r3, #16
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003ea0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003eaa:	e002      	b.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003eac:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003eae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003eb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3740      	adds	r7, #64	; 0x40
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40023800 	.word	0x40023800
 8003ec4:	00f42400 	.word	0x00f42400
 8003ec8:	017d7840 	.word	0x017d7840

08003ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ed0:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	20000000 	.word	0x20000000

08003ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ee8:	f7ff fff0 	bl	8003ecc <HAL_RCC_GetHCLKFreq>
 8003eec:	4602      	mov	r2, r0
 8003eee:	4b05      	ldr	r3, [pc, #20]	; (8003f04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	0a9b      	lsrs	r3, r3, #10
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	4903      	ldr	r1, [pc, #12]	; (8003f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003efa:	5ccb      	ldrb	r3, [r1, r3]
 8003efc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40023800 	.word	0x40023800
 8003f08:	0800ac40 	.word	0x0800ac40

08003f0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f10:	f7ff ffdc 	bl	8003ecc <HAL_RCC_GetHCLKFreq>
 8003f14:	4602      	mov	r2, r0
 8003f16:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	0b5b      	lsrs	r3, r3, #13
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	4903      	ldr	r1, [pc, #12]	; (8003f30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f22:	5ccb      	ldrb	r3, [r1, r3]
 8003f24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	0800ac40 	.word	0x0800ac40

08003f34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	220f      	movs	r2, #15
 8003f42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f44:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <HAL_RCC_GetClockConfig+0x5c>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0203 	and.w	r2, r3, #3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f50:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <HAL_RCC_GetClockConfig+0x5c>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <HAL_RCC_GetClockConfig+0x5c>)
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f68:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <HAL_RCC_GetClockConfig+0x5c>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	08db      	lsrs	r3, r3, #3
 8003f6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f76:	4b07      	ldr	r3, [pc, #28]	; (8003f94 <HAL_RCC_GetClockConfig+0x60>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0207 	and.w	r2, r3, #7
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	601a      	str	r2, [r3, #0]
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40023800 	.word	0x40023800
 8003f94:	40023c00 	.word	0x40023c00

08003f98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e041      	b.n	800402e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f839 	bl	8004036 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	f000 f9d8 	bl	800438c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3708      	adds	r7, #8
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b01      	cmp	r3, #1
 800405e:	d001      	beq.n	8004064 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e04e      	b.n	8004102 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2202      	movs	r2, #2
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68da      	ldr	r2, [r3, #12]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a23      	ldr	r2, [pc, #140]	; (8004110 <HAL_TIM_Base_Start_IT+0xc4>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d022      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0x80>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800408e:	d01d      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0x80>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a1f      	ldr	r2, [pc, #124]	; (8004114 <HAL_TIM_Base_Start_IT+0xc8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d018      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0x80>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1e      	ldr	r2, [pc, #120]	; (8004118 <HAL_TIM_Base_Start_IT+0xcc>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d013      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0x80>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1c      	ldr	r2, [pc, #112]	; (800411c <HAL_TIM_Base_Start_IT+0xd0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d00e      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0x80>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a1b      	ldr	r2, [pc, #108]	; (8004120 <HAL_TIM_Base_Start_IT+0xd4>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d009      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0x80>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a19      	ldr	r2, [pc, #100]	; (8004124 <HAL_TIM_Base_Start_IT+0xd8>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d004      	beq.n	80040cc <HAL_TIM_Base_Start_IT+0x80>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a18      	ldr	r2, [pc, #96]	; (8004128 <HAL_TIM_Base_Start_IT+0xdc>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d111      	bne.n	80040f0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2b06      	cmp	r3, #6
 80040dc:	d010      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f042 0201 	orr.w	r2, r2, #1
 80040ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ee:	e007      	b.n	8004100 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40010000 	.word	0x40010000
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800
 800411c:	40000c00 	.word	0x40000c00
 8004120:	40010400 	.word	0x40010400
 8004124:	40014000 	.word	0x40014000
 8004128:	40001800 	.word	0x40001800

0800412c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b02      	cmp	r3, #2
 8004140:	d122      	bne.n	8004188 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b02      	cmp	r3, #2
 800414e:	d11b      	bne.n	8004188 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0202 	mvn.w	r2, #2
 8004158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2201      	movs	r2, #1
 800415e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f8ee 	bl	8004350 <HAL_TIM_IC_CaptureCallback>
 8004174:	e005      	b.n	8004182 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f8e0 	bl	800433c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f8f1 	bl	8004364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b04      	cmp	r3, #4
 8004194:	d122      	bne.n	80041dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b04      	cmp	r3, #4
 80041a2:	d11b      	bne.n	80041dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f06f 0204 	mvn.w	r2, #4
 80041ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2202      	movs	r2, #2
 80041b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f8c4 	bl	8004350 <HAL_TIM_IC_CaptureCallback>
 80041c8:	e005      	b.n	80041d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f8b6 	bl	800433c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f8c7 	bl	8004364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0308 	and.w	r3, r3, #8
 80041e6:	2b08      	cmp	r3, #8
 80041e8:	d122      	bne.n	8004230 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d11b      	bne.n	8004230 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f06f 0208 	mvn.w	r2, #8
 8004200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2204      	movs	r2, #4
 8004206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f89a 	bl	8004350 <HAL_TIM_IC_CaptureCallback>
 800421c:	e005      	b.n	800422a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f88c 	bl	800433c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f89d 	bl	8004364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0310 	and.w	r3, r3, #16
 800423a:	2b10      	cmp	r3, #16
 800423c:	d122      	bne.n	8004284 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0310 	and.w	r3, r3, #16
 8004248:	2b10      	cmp	r3, #16
 800424a:	d11b      	bne.n	8004284 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0210 	mvn.w	r2, #16
 8004254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2208      	movs	r2, #8
 800425a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 f870 	bl	8004350 <HAL_TIM_IC_CaptureCallback>
 8004270:	e005      	b.n	800427e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f862 	bl	800433c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f873 	bl	8004364 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b01      	cmp	r3, #1
 8004290:	d10e      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b01      	cmp	r3, #1
 800429e:	d107      	bne.n	80042b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f06f 0201 	mvn.w	r2, #1
 80042a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fd fabe 	bl	800182c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ba:	2b80      	cmp	r3, #128	; 0x80
 80042bc:	d10e      	bne.n	80042dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c8:	2b80      	cmp	r3, #128	; 0x80
 80042ca:	d107      	bne.n	80042dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 f902 	bl	80044e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e6:	2b40      	cmp	r3, #64	; 0x40
 80042e8:	d10e      	bne.n	8004308 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f4:	2b40      	cmp	r3, #64	; 0x40
 80042f6:	d107      	bne.n	8004308 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f838 	bl	8004378 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	f003 0320 	and.w	r3, r3, #32
 8004312:	2b20      	cmp	r3, #32
 8004314:	d10e      	bne.n	8004334 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0320 	and.w	r3, r3, #32
 8004320:	2b20      	cmp	r3, #32
 8004322:	d107      	bne.n	8004334 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0220 	mvn.w	r2, #32
 800432c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f8cc 	bl	80044cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004334:	bf00      	nop
 8004336:	3708      	adds	r7, #8
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800433c:	b480      	push	{r7}
 800433e:	b083      	sub	sp, #12
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004344:	bf00      	nop
 8004346:	370c      	adds	r7, #12
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004358:	bf00      	nop
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a40      	ldr	r2, [pc, #256]	; (80044a0 <TIM_Base_SetConfig+0x114>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d013      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043aa:	d00f      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a3d      	ldr	r2, [pc, #244]	; (80044a4 <TIM_Base_SetConfig+0x118>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d00b      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a3c      	ldr	r2, [pc, #240]	; (80044a8 <TIM_Base_SetConfig+0x11c>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d007      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a3b      	ldr	r2, [pc, #236]	; (80044ac <TIM_Base_SetConfig+0x120>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d003      	beq.n	80043cc <TIM_Base_SetConfig+0x40>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a3a      	ldr	r2, [pc, #232]	; (80044b0 <TIM_Base_SetConfig+0x124>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d108      	bne.n	80043de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a2f      	ldr	r2, [pc, #188]	; (80044a0 <TIM_Base_SetConfig+0x114>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d02b      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ec:	d027      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a2c      	ldr	r2, [pc, #176]	; (80044a4 <TIM_Base_SetConfig+0x118>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d023      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a2b      	ldr	r2, [pc, #172]	; (80044a8 <TIM_Base_SetConfig+0x11c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d01f      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a2a      	ldr	r2, [pc, #168]	; (80044ac <TIM_Base_SetConfig+0x120>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d01b      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a29      	ldr	r2, [pc, #164]	; (80044b0 <TIM_Base_SetConfig+0x124>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d017      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a28      	ldr	r2, [pc, #160]	; (80044b4 <TIM_Base_SetConfig+0x128>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d013      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a27      	ldr	r2, [pc, #156]	; (80044b8 <TIM_Base_SetConfig+0x12c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00f      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a26      	ldr	r2, [pc, #152]	; (80044bc <TIM_Base_SetConfig+0x130>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00b      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a25      	ldr	r2, [pc, #148]	; (80044c0 <TIM_Base_SetConfig+0x134>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d007      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a24      	ldr	r2, [pc, #144]	; (80044c4 <TIM_Base_SetConfig+0x138>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d003      	beq.n	800443e <TIM_Base_SetConfig+0xb2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a23      	ldr	r2, [pc, #140]	; (80044c8 <TIM_Base_SetConfig+0x13c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d108      	bne.n	8004450 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a0a      	ldr	r2, [pc, #40]	; (80044a0 <TIM_Base_SetConfig+0x114>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d003      	beq.n	8004484 <TIM_Base_SetConfig+0xf8>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a0c      	ldr	r2, [pc, #48]	; (80044b0 <TIM_Base_SetConfig+0x124>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d103      	bne.n	800448c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	691a      	ldr	r2, [r3, #16]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	615a      	str	r2, [r3, #20]
}
 8004492:	bf00      	nop
 8004494:	3714      	adds	r7, #20
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	40010000 	.word	0x40010000
 80044a4:	40000400 	.word	0x40000400
 80044a8:	40000800 	.word	0x40000800
 80044ac:	40000c00 	.word	0x40000c00
 80044b0:	40010400 	.word	0x40010400
 80044b4:	40014000 	.word	0x40014000
 80044b8:	40014400 	.word	0x40014400
 80044bc:	40014800 	.word	0x40014800
 80044c0:	40001800 	.word	0x40001800
 80044c4:	40001c00 	.word	0x40001c00
 80044c8:	40002000 	.word	0x40002000

080044cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d101      	bne.n	8004506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e03f      	b.n	8004586 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fd fa5e 	bl	80019dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2224      	movs	r2, #36	; 0x24
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004536:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f929 	bl	8004790 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	691a      	ldr	r2, [r3, #16]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800454c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695a      	ldr	r2, [r3, #20]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800455c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68da      	ldr	r2, [r3, #12]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800456c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2220      	movs	r2, #32
 8004578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b08a      	sub	sp, #40	; 0x28
 8004592:	af02      	add	r7, sp, #8
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	603b      	str	r3, [r7, #0]
 800459a:	4613      	mov	r3, r2
 800459c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800459e:	2300      	movs	r3, #0
 80045a0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b20      	cmp	r3, #32
 80045ac:	d17c      	bne.n	80046a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <HAL_UART_Transmit+0x2c>
 80045b4:	88fb      	ldrh	r3, [r7, #6]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e075      	b.n	80046aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_UART_Transmit+0x3e>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e06e      	b.n	80046aa <HAL_UART_Transmit+0x11c>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2221      	movs	r2, #33	; 0x21
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045e2:	f7fd fc33 	bl	8001e4c <HAL_GetTick>
 80045e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	88fa      	ldrh	r2, [r7, #6]
 80045ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	88fa      	ldrh	r2, [r7, #6]
 80045f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045fc:	d108      	bne.n	8004610 <HAL_UART_Transmit+0x82>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d104      	bne.n	8004610 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004606:	2300      	movs	r3, #0
 8004608:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	61bb      	str	r3, [r7, #24]
 800460e:	e003      	b.n	8004618 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004614:	2300      	movs	r3, #0
 8004616:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004620:	e02a      	b.n	8004678 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	9300      	str	r3, [sp, #0]
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	2200      	movs	r2, #0
 800462a:	2180      	movs	r1, #128	; 0x80
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f000 f840 	bl	80046b2 <UART_WaitOnFlagUntilTimeout>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	d001      	beq.n	800463c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e036      	b.n	80046aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10b      	bne.n	800465a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	461a      	mov	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004650:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	3302      	adds	r3, #2
 8004656:	61bb      	str	r3, [r7, #24]
 8004658:	e007      	b.n	800466a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	781a      	ldrb	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	3301      	adds	r3, #1
 8004668:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800467c:	b29b      	uxth	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1cf      	bne.n	8004622 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2200      	movs	r2, #0
 800468a:	2140      	movs	r1, #64	; 0x40
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 f810 	bl	80046b2 <UART_WaitOnFlagUntilTimeout>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e006      	b.n	80046aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	e000      	b.n	80046aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80046a8:	2302      	movs	r3, #2
  }
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3720      	adds	r7, #32
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b090      	sub	sp, #64	; 0x40
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	603b      	str	r3, [r7, #0]
 80046be:	4613      	mov	r3, r2
 80046c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c2:	e050      	b.n	8004766 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ca:	d04c      	beq.n	8004766 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80046d2:	f7fd fbbb 	bl	8001e4c <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046de:	429a      	cmp	r2, r3
 80046e0:	d241      	bcs.n	8004766 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	330c      	adds	r3, #12
 80046e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	330c      	adds	r3, #12
 8004700:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004702:	637a      	str	r2, [r7, #52]	; 0x34
 8004704:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004708:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e5      	bne.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3314      	adds	r3, #20
 800471c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	613b      	str	r3, [r7, #16]
   return(result);
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	f023 0301 	bic.w	r3, r3, #1
 800472c:	63bb      	str	r3, [r7, #56]	; 0x38
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	3314      	adds	r3, #20
 8004734:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004736:	623a      	str	r2, [r7, #32]
 8004738:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	69f9      	ldr	r1, [r7, #28]
 800473c:	6a3a      	ldr	r2, [r7, #32]
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	61bb      	str	r3, [r7, #24]
   return(result);
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e5      	bne.n	8004716 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2220      	movs	r2, #32
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2220      	movs	r2, #32
 8004756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e00f      	b.n	8004786 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4013      	ands	r3, r2
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	429a      	cmp	r2, r3
 8004774:	bf0c      	ite	eq
 8004776:	2301      	moveq	r3, #1
 8004778:	2300      	movne	r3, #0
 800477a:	b2db      	uxtb	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	79fb      	ldrb	r3, [r7, #7]
 8004780:	429a      	cmp	r2, r3
 8004782:	d09f      	beq.n	80046c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3740      	adds	r7, #64	; 0x40
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
	...

08004790 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004790:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004794:	b0c0      	sub	sp, #256	; 0x100
 8004796:	af00      	add	r7, sp, #0
 8004798:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80047a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047ac:	68d9      	ldr	r1, [r3, #12]
 80047ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	ea40 0301 	orr.w	r3, r0, r1
 80047b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80047e8:	f021 010c 	bic.w	r1, r1, #12
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80047f6:	430b      	orrs	r3, r1
 80047f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80047fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480a:	6999      	ldr	r1, [r3, #24]
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	ea40 0301 	orr.w	r3, r0, r1
 8004816:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	4b8f      	ldr	r3, [pc, #572]	; (8004a5c <UART_SetConfig+0x2cc>)
 8004820:	429a      	cmp	r2, r3
 8004822:	d005      	beq.n	8004830 <UART_SetConfig+0xa0>
 8004824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	4b8d      	ldr	r3, [pc, #564]	; (8004a60 <UART_SetConfig+0x2d0>)
 800482c:	429a      	cmp	r2, r3
 800482e:	d104      	bne.n	800483a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004830:	f7ff fb6c 	bl	8003f0c <HAL_RCC_GetPCLK2Freq>
 8004834:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004838:	e003      	b.n	8004842 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800483a:	f7ff fb53 	bl	8003ee4 <HAL_RCC_GetPCLK1Freq>
 800483e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800484c:	f040 810c 	bne.w	8004a68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004854:	2200      	movs	r2, #0
 8004856:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800485a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800485e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004862:	4622      	mov	r2, r4
 8004864:	462b      	mov	r3, r5
 8004866:	1891      	adds	r1, r2, r2
 8004868:	65b9      	str	r1, [r7, #88]	; 0x58
 800486a:	415b      	adcs	r3, r3
 800486c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800486e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004872:	4621      	mov	r1, r4
 8004874:	eb12 0801 	adds.w	r8, r2, r1
 8004878:	4629      	mov	r1, r5
 800487a:	eb43 0901 	adc.w	r9, r3, r1
 800487e:	f04f 0200 	mov.w	r2, #0
 8004882:	f04f 0300 	mov.w	r3, #0
 8004886:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800488a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800488e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004892:	4690      	mov	r8, r2
 8004894:	4699      	mov	r9, r3
 8004896:	4623      	mov	r3, r4
 8004898:	eb18 0303 	adds.w	r3, r8, r3
 800489c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80048a0:	462b      	mov	r3, r5
 80048a2:	eb49 0303 	adc.w	r3, r9, r3
 80048a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80048aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80048b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80048ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80048be:	460b      	mov	r3, r1
 80048c0:	18db      	adds	r3, r3, r3
 80048c2:	653b      	str	r3, [r7, #80]	; 0x50
 80048c4:	4613      	mov	r3, r2
 80048c6:	eb42 0303 	adc.w	r3, r2, r3
 80048ca:	657b      	str	r3, [r7, #84]	; 0x54
 80048cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80048d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80048d4:	f7fc f9d8 	bl	8000c88 <__aeabi_uldivmod>
 80048d8:	4602      	mov	r2, r0
 80048da:	460b      	mov	r3, r1
 80048dc:	4b61      	ldr	r3, [pc, #388]	; (8004a64 <UART_SetConfig+0x2d4>)
 80048de:	fba3 2302 	umull	r2, r3, r3, r2
 80048e2:	095b      	lsrs	r3, r3, #5
 80048e4:	011c      	lsls	r4, r3, #4
 80048e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048ea:	2200      	movs	r2, #0
 80048ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80048f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80048f8:	4642      	mov	r2, r8
 80048fa:	464b      	mov	r3, r9
 80048fc:	1891      	adds	r1, r2, r2
 80048fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004900:	415b      	adcs	r3, r3
 8004902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004904:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004908:	4641      	mov	r1, r8
 800490a:	eb12 0a01 	adds.w	sl, r2, r1
 800490e:	4649      	mov	r1, r9
 8004910:	eb43 0b01 	adc.w	fp, r3, r1
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004920:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004924:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004928:	4692      	mov	sl, r2
 800492a:	469b      	mov	fp, r3
 800492c:	4643      	mov	r3, r8
 800492e:	eb1a 0303 	adds.w	r3, sl, r3
 8004932:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004936:	464b      	mov	r3, r9
 8004938:	eb4b 0303 	adc.w	r3, fp, r3
 800493c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800494c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004950:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004954:	460b      	mov	r3, r1
 8004956:	18db      	adds	r3, r3, r3
 8004958:	643b      	str	r3, [r7, #64]	; 0x40
 800495a:	4613      	mov	r3, r2
 800495c:	eb42 0303 	adc.w	r3, r2, r3
 8004960:	647b      	str	r3, [r7, #68]	; 0x44
 8004962:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004966:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800496a:	f7fc f98d 	bl	8000c88 <__aeabi_uldivmod>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4611      	mov	r1, r2
 8004974:	4b3b      	ldr	r3, [pc, #236]	; (8004a64 <UART_SetConfig+0x2d4>)
 8004976:	fba3 2301 	umull	r2, r3, r3, r1
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	2264      	movs	r2, #100	; 0x64
 800497e:	fb02 f303 	mul.w	r3, r2, r3
 8004982:	1acb      	subs	r3, r1, r3
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800498a:	4b36      	ldr	r3, [pc, #216]	; (8004a64 <UART_SetConfig+0x2d4>)
 800498c:	fba3 2302 	umull	r2, r3, r3, r2
 8004990:	095b      	lsrs	r3, r3, #5
 8004992:	005b      	lsls	r3, r3, #1
 8004994:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004998:	441c      	add	r4, r3
 800499a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800499e:	2200      	movs	r2, #0
 80049a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80049a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80049ac:	4642      	mov	r2, r8
 80049ae:	464b      	mov	r3, r9
 80049b0:	1891      	adds	r1, r2, r2
 80049b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80049b4:	415b      	adcs	r3, r3
 80049b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80049bc:	4641      	mov	r1, r8
 80049be:	1851      	adds	r1, r2, r1
 80049c0:	6339      	str	r1, [r7, #48]	; 0x30
 80049c2:	4649      	mov	r1, r9
 80049c4:	414b      	adcs	r3, r1
 80049c6:	637b      	str	r3, [r7, #52]	; 0x34
 80049c8:	f04f 0200 	mov.w	r2, #0
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80049d4:	4659      	mov	r1, fp
 80049d6:	00cb      	lsls	r3, r1, #3
 80049d8:	4651      	mov	r1, sl
 80049da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049de:	4651      	mov	r1, sl
 80049e0:	00ca      	lsls	r2, r1, #3
 80049e2:	4610      	mov	r0, r2
 80049e4:	4619      	mov	r1, r3
 80049e6:	4603      	mov	r3, r0
 80049e8:	4642      	mov	r2, r8
 80049ea:	189b      	adds	r3, r3, r2
 80049ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049f0:	464b      	mov	r3, r9
 80049f2:	460a      	mov	r2, r1
 80049f4:	eb42 0303 	adc.w	r3, r2, r3
 80049f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a10:	460b      	mov	r3, r1
 8004a12:	18db      	adds	r3, r3, r3
 8004a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a16:	4613      	mov	r3, r2
 8004a18:	eb42 0303 	adc.w	r3, r2, r3
 8004a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a26:	f7fc f92f 	bl	8000c88 <__aeabi_uldivmod>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <UART_SetConfig+0x2d4>)
 8004a30:	fba3 1302 	umull	r1, r3, r3, r2
 8004a34:	095b      	lsrs	r3, r3, #5
 8004a36:	2164      	movs	r1, #100	; 0x64
 8004a38:	fb01 f303 	mul.w	r3, r1, r3
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	3332      	adds	r3, #50	; 0x32
 8004a42:	4a08      	ldr	r2, [pc, #32]	; (8004a64 <UART_SetConfig+0x2d4>)
 8004a44:	fba2 2303 	umull	r2, r3, r2, r3
 8004a48:	095b      	lsrs	r3, r3, #5
 8004a4a:	f003 0207 	and.w	r2, r3, #7
 8004a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4422      	add	r2, r4
 8004a56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a58:	e105      	b.n	8004c66 <UART_SetConfig+0x4d6>
 8004a5a:	bf00      	nop
 8004a5c:	40011000 	.word	0x40011000
 8004a60:	40011400 	.word	0x40011400
 8004a64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004a76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004a7a:	4642      	mov	r2, r8
 8004a7c:	464b      	mov	r3, r9
 8004a7e:	1891      	adds	r1, r2, r2
 8004a80:	6239      	str	r1, [r7, #32]
 8004a82:	415b      	adcs	r3, r3
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24
 8004a86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a8a:	4641      	mov	r1, r8
 8004a8c:	1854      	adds	r4, r2, r1
 8004a8e:	4649      	mov	r1, r9
 8004a90:	eb43 0501 	adc.w	r5, r3, r1
 8004a94:	f04f 0200 	mov.w	r2, #0
 8004a98:	f04f 0300 	mov.w	r3, #0
 8004a9c:	00eb      	lsls	r3, r5, #3
 8004a9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aa2:	00e2      	lsls	r2, r4, #3
 8004aa4:	4614      	mov	r4, r2
 8004aa6:	461d      	mov	r5, r3
 8004aa8:	4643      	mov	r3, r8
 8004aaa:	18e3      	adds	r3, r4, r3
 8004aac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ab0:	464b      	mov	r3, r9
 8004ab2:	eb45 0303 	adc.w	r3, r5, r3
 8004ab6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ac6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	008b      	lsls	r3, r1, #2
 8004ada:	4621      	mov	r1, r4
 8004adc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ae0:	4621      	mov	r1, r4
 8004ae2:	008a      	lsls	r2, r1, #2
 8004ae4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ae8:	f7fc f8ce 	bl	8000c88 <__aeabi_uldivmod>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4b60      	ldr	r3, [pc, #384]	; (8004c74 <UART_SetConfig+0x4e4>)
 8004af2:	fba3 2302 	umull	r2, r3, r3, r2
 8004af6:	095b      	lsrs	r3, r3, #5
 8004af8:	011c      	lsls	r4, r3, #4
 8004afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004afe:	2200      	movs	r2, #0
 8004b00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b0c:	4642      	mov	r2, r8
 8004b0e:	464b      	mov	r3, r9
 8004b10:	1891      	adds	r1, r2, r2
 8004b12:	61b9      	str	r1, [r7, #24]
 8004b14:	415b      	adcs	r3, r3
 8004b16:	61fb      	str	r3, [r7, #28]
 8004b18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b1c:	4641      	mov	r1, r8
 8004b1e:	1851      	adds	r1, r2, r1
 8004b20:	6139      	str	r1, [r7, #16]
 8004b22:	4649      	mov	r1, r9
 8004b24:	414b      	adcs	r3, r1
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	f04f 0200 	mov.w	r2, #0
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b34:	4659      	mov	r1, fp
 8004b36:	00cb      	lsls	r3, r1, #3
 8004b38:	4651      	mov	r1, sl
 8004b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b3e:	4651      	mov	r1, sl
 8004b40:	00ca      	lsls	r2, r1, #3
 8004b42:	4610      	mov	r0, r2
 8004b44:	4619      	mov	r1, r3
 8004b46:	4603      	mov	r3, r0
 8004b48:	4642      	mov	r2, r8
 8004b4a:	189b      	adds	r3, r3, r2
 8004b4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b50:	464b      	mov	r3, r9
 8004b52:	460a      	mov	r2, r1
 8004b54:	eb42 0303 	adc.w	r3, r2, r3
 8004b58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004b74:	4649      	mov	r1, r9
 8004b76:	008b      	lsls	r3, r1, #2
 8004b78:	4641      	mov	r1, r8
 8004b7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b7e:	4641      	mov	r1, r8
 8004b80:	008a      	lsls	r2, r1, #2
 8004b82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004b86:	f7fc f87f 	bl	8000c88 <__aeabi_uldivmod>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	4b39      	ldr	r3, [pc, #228]	; (8004c74 <UART_SetConfig+0x4e4>)
 8004b90:	fba3 1302 	umull	r1, r3, r3, r2
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	2164      	movs	r1, #100	; 0x64
 8004b98:	fb01 f303 	mul.w	r3, r1, r3
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	3332      	adds	r3, #50	; 0x32
 8004ba2:	4a34      	ldr	r2, [pc, #208]	; (8004c74 <UART_SetConfig+0x4e4>)
 8004ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba8:	095b      	lsrs	r3, r3, #5
 8004baa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bae:	441c      	add	r4, r3
 8004bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	673b      	str	r3, [r7, #112]	; 0x70
 8004bb8:	677a      	str	r2, [r7, #116]	; 0x74
 8004bba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004bbe:	4642      	mov	r2, r8
 8004bc0:	464b      	mov	r3, r9
 8004bc2:	1891      	adds	r1, r2, r2
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	415b      	adcs	r3, r3
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bce:	4641      	mov	r1, r8
 8004bd0:	1851      	adds	r1, r2, r1
 8004bd2:	6039      	str	r1, [r7, #0]
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	414b      	adcs	r3, r1
 8004bd8:	607b      	str	r3, [r7, #4]
 8004bda:	f04f 0200 	mov.w	r2, #0
 8004bde:	f04f 0300 	mov.w	r3, #0
 8004be2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004be6:	4659      	mov	r1, fp
 8004be8:	00cb      	lsls	r3, r1, #3
 8004bea:	4651      	mov	r1, sl
 8004bec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004bf0:	4651      	mov	r1, sl
 8004bf2:	00ca      	lsls	r2, r1, #3
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	4642      	mov	r2, r8
 8004bfc:	189b      	adds	r3, r3, r2
 8004bfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c00:	464b      	mov	r3, r9
 8004c02:	460a      	mov	r2, r1
 8004c04:	eb42 0303 	adc.w	r3, r2, r3
 8004c08:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	663b      	str	r3, [r7, #96]	; 0x60
 8004c14:	667a      	str	r2, [r7, #100]	; 0x64
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c22:	4649      	mov	r1, r9
 8004c24:	008b      	lsls	r3, r1, #2
 8004c26:	4641      	mov	r1, r8
 8004c28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c2c:	4641      	mov	r1, r8
 8004c2e:	008a      	lsls	r2, r1, #2
 8004c30:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c34:	f7fc f828 	bl	8000c88 <__aeabi_uldivmod>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <UART_SetConfig+0x4e4>)
 8004c3e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	2164      	movs	r1, #100	; 0x64
 8004c46:	fb01 f303 	mul.w	r3, r1, r3
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	3332      	adds	r3, #50	; 0x32
 8004c50:	4a08      	ldr	r2, [pc, #32]	; (8004c74 <UART_SetConfig+0x4e4>)
 8004c52:	fba2 2303 	umull	r2, r3, r2, r3
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	f003 020f 	and.w	r2, r3, #15
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4422      	add	r2, r4
 8004c64:	609a      	str	r2, [r3, #8]
}
 8004c66:	bf00      	nop
 8004c68:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c72:	bf00      	nop
 8004c74:	51eb851f 	.word	0x51eb851f

08004c78 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004c82:	2300      	movs	r3, #0
 8004c84:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004c86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c8a:	2b84      	cmp	r3, #132	; 0x84
 8004c8c:	d005      	beq.n	8004c9a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004c8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4413      	add	r3, r2
 8004c96:	3303      	adds	r3, #3
 8004c98:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004cac:	f000 fade 	bl	800526c <vTaskStartScheduler>
  
  return osOK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	bd80      	pop	{r7, pc}

08004cb6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004cb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cb8:	b089      	sub	sp, #36	; 0x24
 8004cba:	af04      	add	r7, sp, #16
 8004cbc:	6078      	str	r0, [r7, #4]
 8004cbe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	695b      	ldr	r3, [r3, #20]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d020      	beq.n	8004d0a <osThreadCreate+0x54>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	699b      	ldr	r3, [r3, #24]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01c      	beq.n	8004d0a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685c      	ldr	r4, [r3, #4]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681d      	ldr	r5, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691e      	ldr	r6, [r3, #16]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff ffc8 	bl	8004c78 <makeFreeRtosPriority>
 8004ce8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695b      	ldr	r3, [r3, #20]
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cf2:	9202      	str	r2, [sp, #8]
 8004cf4:	9301      	str	r3, [sp, #4]
 8004cf6:	9100      	str	r1, [sp, #0]
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	4632      	mov	r2, r6
 8004cfc:	4629      	mov	r1, r5
 8004cfe:	4620      	mov	r0, r4
 8004d00:	f000 f8ed 	bl	8004ede <xTaskCreateStatic>
 8004d04:	4603      	mov	r3, r0
 8004d06:	60fb      	str	r3, [r7, #12]
 8004d08:	e01c      	b.n	8004d44 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685c      	ldr	r4, [r3, #4]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004d16:	b29e      	uxth	r6, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7ff ffaa 	bl	8004c78 <makeFreeRtosPriority>
 8004d24:	4602      	mov	r2, r0
 8004d26:	f107 030c 	add.w	r3, r7, #12
 8004d2a:	9301      	str	r3, [sp, #4]
 8004d2c:	9200      	str	r2, [sp, #0]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	4632      	mov	r2, r6
 8004d32:	4629      	mov	r1, r5
 8004d34:	4620      	mov	r0, r4
 8004d36:	f000 f92f 	bl	8004f98 <xTaskCreate>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d001      	beq.n	8004d44 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004d40:	2300      	movs	r3, #0
 8004d42:	e000      	b.n	8004d46 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004d44:	68fb      	ldr	r3, [r7, #12]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3714      	adds	r7, #20
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d4e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004d4e:	b580      	push	{r7, lr}
 8004d50:	b084      	sub	sp, #16
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <osDelay+0x16>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	e000      	b.n	8004d66 <osDelay+0x18>
 8004d64:	2301      	movs	r3, #1
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fa4c 	bl	8005204 <vTaskDelay>
  
  return osOK;
 8004d6c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f103 0208 	add.w	r2, r3, #8
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d8e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f103 0208 	add.w	r2, r3, #8
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f103 0208 	add.w	r2, r3, #8
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr

08004db6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689a      	ldr	r2, [r3, #8]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	683a      	ldr	r2, [r7, #0]
 8004df4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	601a      	str	r2, [r3, #0]
}
 8004e0c:	bf00      	nop
 8004e0e:	3714      	adds	r7, #20
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2e:	d103      	bne.n	8004e38 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	60fb      	str	r3, [r7, #12]
 8004e36:	e00c      	b.n	8004e52 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3308      	adds	r3, #8
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	e002      	b.n	8004e46 <vListInsert+0x2e>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d2f6      	bcs.n	8004e40 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	1c5a      	adds	r2, r3, #1
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	601a      	str	r2, [r3, #0]
}
 8004e7e:	bf00      	nop
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b085      	sub	sp, #20
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6892      	ldr	r2, [r2, #8]
 8004ea0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6852      	ldr	r2, [r2, #4]
 8004eaa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d103      	bne.n	8004ebe <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	1e5a      	subs	r2, r3, #1
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004ede:	b580      	push	{r7, lr}
 8004ee0:	b08e      	sub	sp, #56	; 0x38
 8004ee2:	af04      	add	r7, sp, #16
 8004ee4:	60f8      	str	r0, [r7, #12]
 8004ee6:	60b9      	str	r1, [r7, #8]
 8004ee8:	607a      	str	r2, [r7, #4]
 8004eea:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10a      	bne.n	8004f08 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004f04:	bf00      	nop
 8004f06:	e7fe      	b.n	8004f06 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d10a      	bne.n	8004f24 <xTaskCreateStatic+0x46>
	__asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	61fb      	str	r3, [r7, #28]
}
 8004f20:	bf00      	nop
 8004f22:	e7fe      	b.n	8004f22 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004f24:	2354      	movs	r3, #84	; 0x54
 8004f26:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b54      	cmp	r3, #84	; 0x54
 8004f2c:	d00a      	beq.n	8004f44 <xTaskCreateStatic+0x66>
	__asm volatile
 8004f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f32:	f383 8811 	msr	BASEPRI, r3
 8004f36:	f3bf 8f6f 	isb	sy
 8004f3a:	f3bf 8f4f 	dsb	sy
 8004f3e:	61bb      	str	r3, [r7, #24]
}
 8004f40:	bf00      	nop
 8004f42:	e7fe      	b.n	8004f42 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004f44:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d01e      	beq.n	8004f8a <xTaskCreateStatic+0xac>
 8004f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d01b      	beq.n	8004f8a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004f64:	2300      	movs	r3, #0
 8004f66:	9303      	str	r3, [sp, #12]
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	9302      	str	r3, [sp, #8]
 8004f6c:	f107 0314 	add.w	r3, r7, #20
 8004f70:	9301      	str	r3, [sp, #4]
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	9300      	str	r3, [sp, #0]
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f850 	bl	8005022 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f84:	f000 f8d4 	bl	8005130 <prvAddNewTaskToReadyList>
 8004f88:	e001      	b.n	8004f8e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f8e:	697b      	ldr	r3, [r7, #20]
	}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3728      	adds	r7, #40	; 0x28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08c      	sub	sp, #48	; 0x30
 8004f9c:	af04      	add	r7, sp, #16
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	603b      	str	r3, [r7, #0]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004fa8:	88fb      	ldrh	r3, [r7, #6]
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fec3 	bl	8005d38 <pvPortMalloc>
 8004fb2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00e      	beq.n	8004fd8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004fba:	2054      	movs	r0, #84	; 0x54
 8004fbc:	f000 febc 	bl	8005d38 <pvPortMalloc>
 8004fc0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	631a      	str	r2, [r3, #48]	; 0x30
 8004fce:	e005      	b.n	8004fdc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004fd0:	6978      	ldr	r0, [r7, #20]
 8004fd2:	f000 ff7d 	bl	8005ed0 <vPortFree>
 8004fd6:	e001      	b.n	8004fdc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d017      	beq.n	8005012 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004fe2:	69fb      	ldr	r3, [r7, #28]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004fea:	88fa      	ldrh	r2, [r7, #6]
 8004fec:	2300      	movs	r3, #0
 8004fee:	9303      	str	r3, [sp, #12]
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	9302      	str	r3, [sp, #8]
 8004ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff6:	9301      	str	r3, [sp, #4]
 8004ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffa:	9300      	str	r3, [sp, #0]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68b9      	ldr	r1, [r7, #8]
 8005000:	68f8      	ldr	r0, [r7, #12]
 8005002:	f000 f80e 	bl	8005022 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005006:	69f8      	ldr	r0, [r7, #28]
 8005008:	f000 f892 	bl	8005130 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800500c:	2301      	movs	r3, #1
 800500e:	61bb      	str	r3, [r7, #24]
 8005010:	e002      	b.n	8005018 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005012:	f04f 33ff 	mov.w	r3, #4294967295
 8005016:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005018:	69bb      	ldr	r3, [r7, #24]
	}
 800501a:	4618      	mov	r0, r3
 800501c:	3720      	adds	r7, #32
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b088      	sub	sp, #32
 8005026:	af00      	add	r7, sp, #0
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	607a      	str	r2, [r7, #4]
 800502e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800503a:	3b01      	subs	r3, #1
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	f023 0307 	bic.w	r3, r3, #7
 8005048:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00a      	beq.n	800506a <prvInitialiseNewTask+0x48>
	__asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	617b      	str	r3, [r7, #20]
}
 8005066:	bf00      	nop
 8005068:	e7fe      	b.n	8005068 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d01f      	beq.n	80050b0 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005070:	2300      	movs	r3, #0
 8005072:	61fb      	str	r3, [r7, #28]
 8005074:	e012      	b.n	800509c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	4413      	add	r3, r2
 800507c:	7819      	ldrb	r1, [r3, #0]
 800507e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	4413      	add	r3, r2
 8005084:	3334      	adds	r3, #52	; 0x34
 8005086:	460a      	mov	r2, r1
 8005088:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	4413      	add	r3, r2
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d006      	beq.n	80050a4 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	3301      	adds	r3, #1
 800509a:	61fb      	str	r3, [r7, #28]
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	2b0f      	cmp	r3, #15
 80050a0:	d9e9      	bls.n	8005076 <prvInitialiseNewTask+0x54>
 80050a2:	e000      	b.n	80050a6 <prvInitialiseNewTask+0x84>
			{
				break;
 80050a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050ae:	e003      	b.n	80050b8 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80050b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80050b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ba:	2b06      	cmp	r3, #6
 80050bc:	d901      	bls.n	80050c2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80050be:	2306      	movs	r3, #6
 80050c0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050c6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050cc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80050ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d0:	2200      	movs	r2, #0
 80050d2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	3304      	adds	r3, #4
 80050d8:	4618      	mov	r0, r3
 80050da:	f7ff fe6c 	bl	8004db6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	3318      	adds	r3, #24
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff fe67 	bl	8004db6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f0:	f1c3 0207 	rsb	r2, r3, #7
 80050f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050fc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80050fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005100:	2200      	movs	r2, #0
 8005102:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	68f9      	ldr	r1, [r7, #12]
 8005110:	69b8      	ldr	r0, [r7, #24]
 8005112:	f000 fc05 	bl	8005920 <pxPortInitialiseStack>
 8005116:	4602      	mov	r2, r0
 8005118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005126:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005128:	bf00      	nop
 800512a:	3720      	adds	r7, #32
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005138:	f000 fd1c 	bl	8005b74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800513c:	4b2a      	ldr	r3, [pc, #168]	; (80051e8 <prvAddNewTaskToReadyList+0xb8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	3301      	adds	r3, #1
 8005142:	4a29      	ldr	r2, [pc, #164]	; (80051e8 <prvAddNewTaskToReadyList+0xb8>)
 8005144:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005146:	4b29      	ldr	r3, [pc, #164]	; (80051ec <prvAddNewTaskToReadyList+0xbc>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d109      	bne.n	8005162 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800514e:	4a27      	ldr	r2, [pc, #156]	; (80051ec <prvAddNewTaskToReadyList+0xbc>)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005154:	4b24      	ldr	r3, [pc, #144]	; (80051e8 <prvAddNewTaskToReadyList+0xb8>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d110      	bne.n	800517e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800515c:	f000 fabc 	bl	80056d8 <prvInitialiseTaskLists>
 8005160:	e00d      	b.n	800517e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005162:	4b23      	ldr	r3, [pc, #140]	; (80051f0 <prvAddNewTaskToReadyList+0xc0>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d109      	bne.n	800517e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800516a:	4b20      	ldr	r3, [pc, #128]	; (80051ec <prvAddNewTaskToReadyList+0xbc>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005174:	429a      	cmp	r2, r3
 8005176:	d802      	bhi.n	800517e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005178:	4a1c      	ldr	r2, [pc, #112]	; (80051ec <prvAddNewTaskToReadyList+0xbc>)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800517e:	4b1d      	ldr	r3, [pc, #116]	; (80051f4 <prvAddNewTaskToReadyList+0xc4>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3301      	adds	r3, #1
 8005184:	4a1b      	ldr	r2, [pc, #108]	; (80051f4 <prvAddNewTaskToReadyList+0xc4>)
 8005186:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	2201      	movs	r2, #1
 800518e:	409a      	lsls	r2, r3
 8005190:	4b19      	ldr	r3, [pc, #100]	; (80051f8 <prvAddNewTaskToReadyList+0xc8>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4313      	orrs	r3, r2
 8005196:	4a18      	ldr	r2, [pc, #96]	; (80051f8 <prvAddNewTaskToReadyList+0xc8>)
 8005198:	6013      	str	r3, [r2, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800519e:	4613      	mov	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4413      	add	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4a15      	ldr	r2, [pc, #84]	; (80051fc <prvAddNewTaskToReadyList+0xcc>)
 80051a8:	441a      	add	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	3304      	adds	r3, #4
 80051ae:	4619      	mov	r1, r3
 80051b0:	4610      	mov	r0, r2
 80051b2:	f7ff fe0d 	bl	8004dd0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80051b6:	f000 fd0d 	bl	8005bd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80051ba:	4b0d      	ldr	r3, [pc, #52]	; (80051f0 <prvAddNewTaskToReadyList+0xc0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00e      	beq.n	80051e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80051c2:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <prvAddNewTaskToReadyList+0xbc>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d207      	bcs.n	80051e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80051d0:	4b0b      	ldr	r3, [pc, #44]	; (8005200 <prvAddNewTaskToReadyList+0xd0>)
 80051d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051e0:	bf00      	nop
 80051e2:	3708      	adds	r7, #8
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	20000730 	.word	0x20000730
 80051ec:	20000630 	.word	0x20000630
 80051f0:	2000073c 	.word	0x2000073c
 80051f4:	2000074c 	.word	0x2000074c
 80051f8:	20000738 	.word	0x20000738
 80051fc:	20000634 	.word	0x20000634
 8005200:	e000ed04 	.word	0xe000ed04

08005204 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800520c:	2300      	movs	r3, #0
 800520e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d017      	beq.n	8005246 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005216:	4b13      	ldr	r3, [pc, #76]	; (8005264 <vTaskDelay+0x60>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <vTaskDelay+0x30>
	__asm volatile
 800521e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	60bb      	str	r3, [r7, #8]
}
 8005230:	bf00      	nop
 8005232:	e7fe      	b.n	8005232 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005234:	f000 f87a 	bl	800532c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005238:	2100      	movs	r1, #0
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 fb0a 	bl	8005854 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005240:	f000 f882 	bl	8005348 <xTaskResumeAll>
 8005244:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d107      	bne.n	800525c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800524c:	4b06      	ldr	r3, [pc, #24]	; (8005268 <vTaskDelay+0x64>)
 800524e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005252:	601a      	str	r2, [r3, #0]
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800525c:	bf00      	nop
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	20000758 	.word	0x20000758
 8005268:	e000ed04 	.word	0xe000ed04

0800526c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08a      	sub	sp, #40	; 0x28
 8005270:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005272:	2300      	movs	r3, #0
 8005274:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005276:	2300      	movs	r3, #0
 8005278:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800527a:	463a      	mov	r2, r7
 800527c:	1d39      	adds	r1, r7, #4
 800527e:	f107 0308 	add.w	r3, r7, #8
 8005282:	4618      	mov	r0, r3
 8005284:	f7fb feb8 	bl	8000ff8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005288:	6839      	ldr	r1, [r7, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	9202      	str	r2, [sp, #8]
 8005290:	9301      	str	r3, [sp, #4]
 8005292:	2300      	movs	r3, #0
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	2300      	movs	r3, #0
 8005298:	460a      	mov	r2, r1
 800529a:	491e      	ldr	r1, [pc, #120]	; (8005314 <vTaskStartScheduler+0xa8>)
 800529c:	481e      	ldr	r0, [pc, #120]	; (8005318 <vTaskStartScheduler+0xac>)
 800529e:	f7ff fe1e 	bl	8004ede <xTaskCreateStatic>
 80052a2:	4603      	mov	r3, r0
 80052a4:	4a1d      	ldr	r2, [pc, #116]	; (800531c <vTaskStartScheduler+0xb0>)
 80052a6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80052a8:	4b1c      	ldr	r3, [pc, #112]	; (800531c <vTaskStartScheduler+0xb0>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80052b0:	2301      	movs	r3, #1
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	e001      	b.n	80052ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80052b6:	2300      	movs	r3, #0
 80052b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d116      	bne.n	80052ee <vTaskStartScheduler+0x82>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	613b      	str	r3, [r7, #16]
}
 80052d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80052d4:	4b12      	ldr	r3, [pc, #72]	; (8005320 <vTaskStartScheduler+0xb4>)
 80052d6:	f04f 32ff 	mov.w	r2, #4294967295
 80052da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80052dc:	4b11      	ldr	r3, [pc, #68]	; (8005324 <vTaskStartScheduler+0xb8>)
 80052de:	2201      	movs	r2, #1
 80052e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80052e2:	4b11      	ldr	r3, [pc, #68]	; (8005328 <vTaskStartScheduler+0xbc>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052e8:	f000 fba2 	bl	8005a30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052ec:	e00e      	b.n	800530c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f4:	d10a      	bne.n	800530c <vTaskStartScheduler+0xa0>
	__asm volatile
 80052f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fa:	f383 8811 	msr	BASEPRI, r3
 80052fe:	f3bf 8f6f 	isb	sy
 8005302:	f3bf 8f4f 	dsb	sy
 8005306:	60fb      	str	r3, [r7, #12]
}
 8005308:	bf00      	nop
 800530a:	e7fe      	b.n	800530a <vTaskStartScheduler+0x9e>
}
 800530c:	bf00      	nop
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	0800ac28 	.word	0x0800ac28
 8005318:	080056a9 	.word	0x080056a9
 800531c:	20000754 	.word	0x20000754
 8005320:	20000750 	.word	0x20000750
 8005324:	2000073c 	.word	0x2000073c
 8005328:	20000734 	.word	0x20000734

0800532c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005330:	4b04      	ldr	r3, [pc, #16]	; (8005344 <vTaskSuspendAll+0x18>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3301      	adds	r3, #1
 8005336:	4a03      	ldr	r2, [pc, #12]	; (8005344 <vTaskSuspendAll+0x18>)
 8005338:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800533a:	bf00      	nop
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	20000758 	.word	0x20000758

08005348 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800534e:	2300      	movs	r3, #0
 8005350:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005352:	2300      	movs	r3, #0
 8005354:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005356:	4b41      	ldr	r3, [pc, #260]	; (800545c <xTaskResumeAll+0x114>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10a      	bne.n	8005374 <xTaskResumeAll+0x2c>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	603b      	str	r3, [r7, #0]
}
 8005370:	bf00      	nop
 8005372:	e7fe      	b.n	8005372 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005374:	f000 fbfe 	bl	8005b74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005378:	4b38      	ldr	r3, [pc, #224]	; (800545c <xTaskResumeAll+0x114>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3b01      	subs	r3, #1
 800537e:	4a37      	ldr	r2, [pc, #220]	; (800545c <xTaskResumeAll+0x114>)
 8005380:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005382:	4b36      	ldr	r3, [pc, #216]	; (800545c <xTaskResumeAll+0x114>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d161      	bne.n	800544e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800538a:	4b35      	ldr	r3, [pc, #212]	; (8005460 <xTaskResumeAll+0x118>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d05d      	beq.n	800544e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005392:	e02e      	b.n	80053f2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005394:	4b33      	ldr	r3, [pc, #204]	; (8005464 <xTaskResumeAll+0x11c>)
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3318      	adds	r3, #24
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff fd72 	bl	8004e8a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3304      	adds	r3, #4
 80053aa:	4618      	mov	r0, r3
 80053ac:	f7ff fd6d 	bl	8004e8a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	2201      	movs	r2, #1
 80053b6:	409a      	lsls	r2, r3
 80053b8:	4b2b      	ldr	r3, [pc, #172]	; (8005468 <xTaskResumeAll+0x120>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4313      	orrs	r3, r2
 80053be:	4a2a      	ldr	r2, [pc, #168]	; (8005468 <xTaskResumeAll+0x120>)
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c6:	4613      	mov	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4413      	add	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4a27      	ldr	r2, [pc, #156]	; (800546c <xTaskResumeAll+0x124>)
 80053d0:	441a      	add	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3304      	adds	r3, #4
 80053d6:	4619      	mov	r1, r3
 80053d8:	4610      	mov	r0, r2
 80053da:	f7ff fcf9 	bl	8004dd0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e2:	4b23      	ldr	r3, [pc, #140]	; (8005470 <xTaskResumeAll+0x128>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d302      	bcc.n	80053f2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80053ec:	4b21      	ldr	r3, [pc, #132]	; (8005474 <xTaskResumeAll+0x12c>)
 80053ee:	2201      	movs	r2, #1
 80053f0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053f2:	4b1c      	ldr	r3, [pc, #112]	; (8005464 <xTaskResumeAll+0x11c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1cc      	bne.n	8005394 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005400:	f000 fa08 	bl	8005814 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005404:	4b1c      	ldr	r3, [pc, #112]	; (8005478 <xTaskResumeAll+0x130>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d010      	beq.n	8005432 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005410:	f000 f836 	bl	8005480 <xTaskIncrementTick>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800541a:	4b16      	ldr	r3, [pc, #88]	; (8005474 <xTaskResumeAll+0x12c>)
 800541c:	2201      	movs	r2, #1
 800541e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	3b01      	subs	r3, #1
 8005424:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1f1      	bne.n	8005410 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800542c:	4b12      	ldr	r3, [pc, #72]	; (8005478 <xTaskResumeAll+0x130>)
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005432:	4b10      	ldr	r3, [pc, #64]	; (8005474 <xTaskResumeAll+0x12c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d009      	beq.n	800544e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800543a:	2301      	movs	r3, #1
 800543c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800543e:	4b0f      	ldr	r3, [pc, #60]	; (800547c <xTaskResumeAll+0x134>)
 8005440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800544e:	f000 fbc1 	bl	8005bd4 <vPortExitCritical>

	return xAlreadyYielded;
 8005452:	68bb      	ldr	r3, [r7, #8]
}
 8005454:	4618      	mov	r0, r3
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}
 800545c:	20000758 	.word	0x20000758
 8005460:	20000730 	.word	0x20000730
 8005464:	200006f0 	.word	0x200006f0
 8005468:	20000738 	.word	0x20000738
 800546c:	20000634 	.word	0x20000634
 8005470:	20000630 	.word	0x20000630
 8005474:	20000744 	.word	0x20000744
 8005478:	20000740 	.word	0x20000740
 800547c:	e000ed04 	.word	0xe000ed04

08005480 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800548a:	4b4e      	ldr	r3, [pc, #312]	; (80055c4 <xTaskIncrementTick+0x144>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	f040 808e 	bne.w	80055b0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005494:	4b4c      	ldr	r3, [pc, #304]	; (80055c8 <xTaskIncrementTick+0x148>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3301      	adds	r3, #1
 800549a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800549c:	4a4a      	ldr	r2, [pc, #296]	; (80055c8 <xTaskIncrementTick+0x148>)
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d120      	bne.n	80054ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80054a8:	4b48      	ldr	r3, [pc, #288]	; (80055cc <xTaskIncrementTick+0x14c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	603b      	str	r3, [r7, #0]
}
 80054c4:	bf00      	nop
 80054c6:	e7fe      	b.n	80054c6 <xTaskIncrementTick+0x46>
 80054c8:	4b40      	ldr	r3, [pc, #256]	; (80055cc <xTaskIncrementTick+0x14c>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	4b40      	ldr	r3, [pc, #256]	; (80055d0 <xTaskIncrementTick+0x150>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a3e      	ldr	r2, [pc, #248]	; (80055cc <xTaskIncrementTick+0x14c>)
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	4a3e      	ldr	r2, [pc, #248]	; (80055d0 <xTaskIncrementTick+0x150>)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	4b3d      	ldr	r3, [pc, #244]	; (80055d4 <xTaskIncrementTick+0x154>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3301      	adds	r3, #1
 80054e2:	4a3c      	ldr	r2, [pc, #240]	; (80055d4 <xTaskIncrementTick+0x154>)
 80054e4:	6013      	str	r3, [r2, #0]
 80054e6:	f000 f995 	bl	8005814 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054ea:	4b3b      	ldr	r3, [pc, #236]	; (80055d8 <xTaskIncrementTick+0x158>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d348      	bcc.n	8005586 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054f4:	4b35      	ldr	r3, [pc, #212]	; (80055cc <xTaskIncrementTick+0x14c>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d104      	bne.n	8005508 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054fe:	4b36      	ldr	r3, [pc, #216]	; (80055d8 <xTaskIncrementTick+0x158>)
 8005500:	f04f 32ff 	mov.w	r2, #4294967295
 8005504:	601a      	str	r2, [r3, #0]
					break;
 8005506:	e03e      	b.n	8005586 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005508:	4b30      	ldr	r3, [pc, #192]	; (80055cc <xTaskIncrementTick+0x14c>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	429a      	cmp	r2, r3
 800551e:	d203      	bcs.n	8005528 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005520:	4a2d      	ldr	r2, [pc, #180]	; (80055d8 <xTaskIncrementTick+0x158>)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005526:	e02e      	b.n	8005586 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	3304      	adds	r3, #4
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff fcac 	bl	8004e8a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005536:	2b00      	cmp	r3, #0
 8005538:	d004      	beq.n	8005544 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	3318      	adds	r3, #24
 800553e:	4618      	mov	r0, r3
 8005540:	f7ff fca3 	bl	8004e8a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005548:	2201      	movs	r2, #1
 800554a:	409a      	lsls	r2, r3
 800554c:	4b23      	ldr	r3, [pc, #140]	; (80055dc <xTaskIncrementTick+0x15c>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4313      	orrs	r3, r2
 8005552:	4a22      	ldr	r2, [pc, #136]	; (80055dc <xTaskIncrementTick+0x15c>)
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555a:	4613      	mov	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	4a1f      	ldr	r2, [pc, #124]	; (80055e0 <xTaskIncrementTick+0x160>)
 8005564:	441a      	add	r2, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	3304      	adds	r3, #4
 800556a:	4619      	mov	r1, r3
 800556c:	4610      	mov	r0, r2
 800556e:	f7ff fc2f 	bl	8004dd0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005576:	4b1b      	ldr	r3, [pc, #108]	; (80055e4 <xTaskIncrementTick+0x164>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	429a      	cmp	r2, r3
 800557e:	d3b9      	bcc.n	80054f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005580:	2301      	movs	r3, #1
 8005582:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005584:	e7b6      	b.n	80054f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005586:	4b17      	ldr	r3, [pc, #92]	; (80055e4 <xTaskIncrementTick+0x164>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800558c:	4914      	ldr	r1, [pc, #80]	; (80055e0 <xTaskIncrementTick+0x160>)
 800558e:	4613      	mov	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	440b      	add	r3, r1
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d901      	bls.n	80055a2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800559e:	2301      	movs	r3, #1
 80055a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80055a2:	4b11      	ldr	r3, [pc, #68]	; (80055e8 <xTaskIncrementTick+0x168>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d007      	beq.n	80055ba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80055aa:	2301      	movs	r3, #1
 80055ac:	617b      	str	r3, [r7, #20]
 80055ae:	e004      	b.n	80055ba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80055b0:	4b0e      	ldr	r3, [pc, #56]	; (80055ec <xTaskIncrementTick+0x16c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3301      	adds	r3, #1
 80055b6:	4a0d      	ldr	r2, [pc, #52]	; (80055ec <xTaskIncrementTick+0x16c>)
 80055b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80055ba:	697b      	ldr	r3, [r7, #20]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20000758 	.word	0x20000758
 80055c8:	20000734 	.word	0x20000734
 80055cc:	200006e8 	.word	0x200006e8
 80055d0:	200006ec 	.word	0x200006ec
 80055d4:	20000748 	.word	0x20000748
 80055d8:	20000750 	.word	0x20000750
 80055dc:	20000738 	.word	0x20000738
 80055e0:	20000634 	.word	0x20000634
 80055e4:	20000630 	.word	0x20000630
 80055e8:	20000744 	.word	0x20000744
 80055ec:	20000740 	.word	0x20000740

080055f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055f6:	4b27      	ldr	r3, [pc, #156]	; (8005694 <vTaskSwitchContext+0xa4>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d003      	beq.n	8005606 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055fe:	4b26      	ldr	r3, [pc, #152]	; (8005698 <vTaskSwitchContext+0xa8>)
 8005600:	2201      	movs	r2, #1
 8005602:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005604:	e03f      	b.n	8005686 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005606:	4b24      	ldr	r3, [pc, #144]	; (8005698 <vTaskSwitchContext+0xa8>)
 8005608:	2200      	movs	r2, #0
 800560a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800560c:	4b23      	ldr	r3, [pc, #140]	; (800569c <vTaskSwitchContext+0xac>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	fab3 f383 	clz	r3, r3
 8005618:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800561a:	7afb      	ldrb	r3, [r7, #11]
 800561c:	f1c3 031f 	rsb	r3, r3, #31
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	491f      	ldr	r1, [pc, #124]	; (80056a0 <vTaskSwitchContext+0xb0>)
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	4613      	mov	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	4413      	add	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	440b      	add	r3, r1
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d10a      	bne.n	800564c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	607b      	str	r3, [r7, #4]
}
 8005648:	bf00      	nop
 800564a:	e7fe      	b.n	800564a <vTaskSwitchContext+0x5a>
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	4613      	mov	r3, r2
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	4413      	add	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4a12      	ldr	r2, [pc, #72]	; (80056a0 <vTaskSwitchContext+0xb0>)
 8005658:	4413      	add	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	605a      	str	r2, [r3, #4]
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	685a      	ldr	r2, [r3, #4]
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	3308      	adds	r3, #8
 800566e:	429a      	cmp	r2, r3
 8005670:	d104      	bne.n	800567c <vTaskSwitchContext+0x8c>
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	605a      	str	r2, [r3, #4]
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	4a08      	ldr	r2, [pc, #32]	; (80056a4 <vTaskSwitchContext+0xb4>)
 8005684:	6013      	str	r3, [r2, #0]
}
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	20000758 	.word	0x20000758
 8005698:	20000744 	.word	0x20000744
 800569c:	20000738 	.word	0x20000738
 80056a0:	20000634 	.word	0x20000634
 80056a4:	20000630 	.word	0x20000630

080056a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b082      	sub	sp, #8
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056b0:	f000 f852 	bl	8005758 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056b4:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <prvIdleTask+0x28>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d9f9      	bls.n	80056b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80056bc:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <prvIdleTask+0x2c>)
 80056be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	f3bf 8f4f 	dsb	sy
 80056c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056cc:	e7f0      	b.n	80056b0 <prvIdleTask+0x8>
 80056ce:	bf00      	nop
 80056d0:	20000634 	.word	0x20000634
 80056d4:	e000ed04 	.word	0xe000ed04

080056d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056de:	2300      	movs	r3, #0
 80056e0:	607b      	str	r3, [r7, #4]
 80056e2:	e00c      	b.n	80056fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	4613      	mov	r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	4413      	add	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4a12      	ldr	r2, [pc, #72]	; (8005738 <prvInitialiseTaskLists+0x60>)
 80056f0:	4413      	add	r3, r2
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7ff fb3f 	bl	8004d76 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	3301      	adds	r3, #1
 80056fc:	607b      	str	r3, [r7, #4]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b06      	cmp	r3, #6
 8005702:	d9ef      	bls.n	80056e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005704:	480d      	ldr	r0, [pc, #52]	; (800573c <prvInitialiseTaskLists+0x64>)
 8005706:	f7ff fb36 	bl	8004d76 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800570a:	480d      	ldr	r0, [pc, #52]	; (8005740 <prvInitialiseTaskLists+0x68>)
 800570c:	f7ff fb33 	bl	8004d76 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005710:	480c      	ldr	r0, [pc, #48]	; (8005744 <prvInitialiseTaskLists+0x6c>)
 8005712:	f7ff fb30 	bl	8004d76 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005716:	480c      	ldr	r0, [pc, #48]	; (8005748 <prvInitialiseTaskLists+0x70>)
 8005718:	f7ff fb2d 	bl	8004d76 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800571c:	480b      	ldr	r0, [pc, #44]	; (800574c <prvInitialiseTaskLists+0x74>)
 800571e:	f7ff fb2a 	bl	8004d76 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005722:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <prvInitialiseTaskLists+0x78>)
 8005724:	4a05      	ldr	r2, [pc, #20]	; (800573c <prvInitialiseTaskLists+0x64>)
 8005726:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005728:	4b0a      	ldr	r3, [pc, #40]	; (8005754 <prvInitialiseTaskLists+0x7c>)
 800572a:	4a05      	ldr	r2, [pc, #20]	; (8005740 <prvInitialiseTaskLists+0x68>)
 800572c:	601a      	str	r2, [r3, #0]
}
 800572e:	bf00      	nop
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	20000634 	.word	0x20000634
 800573c:	200006c0 	.word	0x200006c0
 8005740:	200006d4 	.word	0x200006d4
 8005744:	200006f0 	.word	0x200006f0
 8005748:	20000704 	.word	0x20000704
 800574c:	2000071c 	.word	0x2000071c
 8005750:	200006e8 	.word	0x200006e8
 8005754:	200006ec 	.word	0x200006ec

08005758 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800575e:	e019      	b.n	8005794 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005760:	f000 fa08 	bl	8005b74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005764:	4b10      	ldr	r3, [pc, #64]	; (80057a8 <prvCheckTasksWaitingTermination+0x50>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	3304      	adds	r3, #4
 8005770:	4618      	mov	r0, r3
 8005772:	f7ff fb8a 	bl	8004e8a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005776:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <prvCheckTasksWaitingTermination+0x54>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	3b01      	subs	r3, #1
 800577c:	4a0b      	ldr	r2, [pc, #44]	; (80057ac <prvCheckTasksWaitingTermination+0x54>)
 800577e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005780:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <prvCheckTasksWaitingTermination+0x58>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	3b01      	subs	r3, #1
 8005786:	4a0a      	ldr	r2, [pc, #40]	; (80057b0 <prvCheckTasksWaitingTermination+0x58>)
 8005788:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800578a:	f000 fa23 	bl	8005bd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f000 f810 	bl	80057b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005794:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <prvCheckTasksWaitingTermination+0x58>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1e1      	bne.n	8005760 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800579c:	bf00      	nop
 800579e:	bf00      	nop
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	20000704 	.word	0x20000704
 80057ac:	20000730 	.word	0x20000730
 80057b0:	20000718 	.word	0x20000718

080057b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d108      	bne.n	80057d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	4618      	mov	r0, r3
 80057cc:	f000 fb80 	bl	8005ed0 <vPortFree>
				vPortFree( pxTCB );
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fb7d 	bl	8005ed0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057d6:	e018      	b.n	800580a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d103      	bne.n	80057ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fb74 	bl	8005ed0 <vPortFree>
	}
 80057e8:	e00f      	b.n	800580a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d00a      	beq.n	800580a <prvDeleteTCB+0x56>
	__asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	60fb      	str	r3, [r7, #12]
}
 8005806:	bf00      	nop
 8005808:	e7fe      	b.n	8005808 <prvDeleteTCB+0x54>
	}
 800580a:	bf00      	nop
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
	...

08005814 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800581a:	4b0c      	ldr	r3, [pc, #48]	; (800584c <prvResetNextTaskUnblockTime+0x38>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d104      	bne.n	800582e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005824:	4b0a      	ldr	r3, [pc, #40]	; (8005850 <prvResetNextTaskUnblockTime+0x3c>)
 8005826:	f04f 32ff 	mov.w	r2, #4294967295
 800582a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800582c:	e008      	b.n	8005840 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800582e:	4b07      	ldr	r3, [pc, #28]	; (800584c <prvResetNextTaskUnblockTime+0x38>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	4a04      	ldr	r2, [pc, #16]	; (8005850 <prvResetNextTaskUnblockTime+0x3c>)
 800583e:	6013      	str	r3, [r2, #0]
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	200006e8 	.word	0x200006e8
 8005850:	20000750 	.word	0x20000750

08005854 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800585e:	4b29      	ldr	r3, [pc, #164]	; (8005904 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005864:	4b28      	ldr	r3, [pc, #160]	; (8005908 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	3304      	adds	r3, #4
 800586a:	4618      	mov	r0, r3
 800586c:	f7ff fb0d 	bl	8004e8a <uxListRemove>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10b      	bne.n	800588e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005876:	4b24      	ldr	r3, [pc, #144]	; (8005908 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	2201      	movs	r2, #1
 800587e:	fa02 f303 	lsl.w	r3, r2, r3
 8005882:	43da      	mvns	r2, r3
 8005884:	4b21      	ldr	r3, [pc, #132]	; (800590c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4013      	ands	r3, r2
 800588a:	4a20      	ldr	r2, [pc, #128]	; (800590c <prvAddCurrentTaskToDelayedList+0xb8>)
 800588c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005894:	d10a      	bne.n	80058ac <prvAddCurrentTaskToDelayedList+0x58>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d007      	beq.n	80058ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800589c:	4b1a      	ldr	r3, [pc, #104]	; (8005908 <prvAddCurrentTaskToDelayedList+0xb4>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	3304      	adds	r3, #4
 80058a2:	4619      	mov	r1, r3
 80058a4:	481a      	ldr	r0, [pc, #104]	; (8005910 <prvAddCurrentTaskToDelayedList+0xbc>)
 80058a6:	f7ff fa93 	bl	8004dd0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80058aa:	e026      	b.n	80058fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4413      	add	r3, r2
 80058b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80058b4:	4b14      	ldr	r3, [pc, #80]	; (8005908 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68ba      	ldr	r2, [r7, #8]
 80058ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d209      	bcs.n	80058d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058c4:	4b13      	ldr	r3, [pc, #76]	; (8005914 <prvAddCurrentTaskToDelayedList+0xc0>)
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	4b0f      	ldr	r3, [pc, #60]	; (8005908 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	3304      	adds	r3, #4
 80058ce:	4619      	mov	r1, r3
 80058d0:	4610      	mov	r0, r2
 80058d2:	f7ff faa1 	bl	8004e18 <vListInsert>
}
 80058d6:	e010      	b.n	80058fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058d8:	4b0f      	ldr	r3, [pc, #60]	; (8005918 <prvAddCurrentTaskToDelayedList+0xc4>)
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	4b0a      	ldr	r3, [pc, #40]	; (8005908 <prvAddCurrentTaskToDelayedList+0xb4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3304      	adds	r3, #4
 80058e2:	4619      	mov	r1, r3
 80058e4:	4610      	mov	r0, r2
 80058e6:	f7ff fa97 	bl	8004e18 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058ea:	4b0c      	ldr	r3, [pc, #48]	; (800591c <prvAddCurrentTaskToDelayedList+0xc8>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68ba      	ldr	r2, [r7, #8]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d202      	bcs.n	80058fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80058f4:	4a09      	ldr	r2, [pc, #36]	; (800591c <prvAddCurrentTaskToDelayedList+0xc8>)
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	6013      	str	r3, [r2, #0]
}
 80058fa:	bf00      	nop
 80058fc:	3710      	adds	r7, #16
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	20000734 	.word	0x20000734
 8005908:	20000630 	.word	0x20000630
 800590c:	20000738 	.word	0x20000738
 8005910:	2000071c 	.word	0x2000071c
 8005914:	200006ec 	.word	0x200006ec
 8005918:	200006e8 	.word	0x200006e8
 800591c:	20000750 	.word	0x20000750

08005920 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	3b04      	subs	r3, #4
 8005930:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005938:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	3b04      	subs	r3, #4
 800593e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f023 0201 	bic.w	r2, r3, #1
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	3b04      	subs	r3, #4
 800594e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005950:	4a0c      	ldr	r2, [pc, #48]	; (8005984 <pxPortInitialiseStack+0x64>)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3b14      	subs	r3, #20
 800595a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	3b04      	subs	r3, #4
 8005966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f06f 0202 	mvn.w	r2, #2
 800596e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3b20      	subs	r3, #32
 8005974:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005976:	68fb      	ldr	r3, [r7, #12]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3714      	adds	r7, #20
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	08005989 	.word	0x08005989

08005988 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005992:	4b12      	ldr	r3, [pc, #72]	; (80059dc <prvTaskExitError+0x54>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800599a:	d00a      	beq.n	80059b2 <prvTaskExitError+0x2a>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	60fb      	str	r3, [r7, #12]
}
 80059ae:	bf00      	nop
 80059b0:	e7fe      	b.n	80059b0 <prvTaskExitError+0x28>
	__asm volatile
 80059b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b6:	f383 8811 	msr	BASEPRI, r3
 80059ba:	f3bf 8f6f 	isb	sy
 80059be:	f3bf 8f4f 	dsb	sy
 80059c2:	60bb      	str	r3, [r7, #8]
}
 80059c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059c6:	bf00      	nop
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d0fc      	beq.n	80059c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059ce:	bf00      	nop
 80059d0:	bf00      	nop
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr
 80059dc:	2000000c 	.word	0x2000000c

080059e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80059e0:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <pxCurrentTCBConst2>)
 80059e2:	6819      	ldr	r1, [r3, #0]
 80059e4:	6808      	ldr	r0, [r1, #0]
 80059e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ea:	f380 8809 	msr	PSP, r0
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	f04f 0000 	mov.w	r0, #0
 80059f6:	f380 8811 	msr	BASEPRI, r0
 80059fa:	4770      	bx	lr
 80059fc:	f3af 8000 	nop.w

08005a00 <pxCurrentTCBConst2>:
 8005a00:	20000630 	.word	0x20000630
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005a04:	bf00      	nop
 8005a06:	bf00      	nop

08005a08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005a08:	4808      	ldr	r0, [pc, #32]	; (8005a2c <prvPortStartFirstTask+0x24>)
 8005a0a:	6800      	ldr	r0, [r0, #0]
 8005a0c:	6800      	ldr	r0, [r0, #0]
 8005a0e:	f380 8808 	msr	MSP, r0
 8005a12:	f04f 0000 	mov.w	r0, #0
 8005a16:	f380 8814 	msr	CONTROL, r0
 8005a1a:	b662      	cpsie	i
 8005a1c:	b661      	cpsie	f
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	f3bf 8f6f 	isb	sy
 8005a26:	df00      	svc	0
 8005a28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a2a:	bf00      	nop
 8005a2c:	e000ed08 	.word	0xe000ed08

08005a30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b086      	sub	sp, #24
 8005a34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a36:	4b46      	ldr	r3, [pc, #280]	; (8005b50 <xPortStartScheduler+0x120>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a46      	ldr	r2, [pc, #280]	; (8005b54 <xPortStartScheduler+0x124>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d10a      	bne.n	8005a56 <xPortStartScheduler+0x26>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	613b      	str	r3, [r7, #16]
}
 8005a52:	bf00      	nop
 8005a54:	e7fe      	b.n	8005a54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a56:	4b3e      	ldr	r3, [pc, #248]	; (8005b50 <xPortStartScheduler+0x120>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a3f      	ldr	r2, [pc, #252]	; (8005b58 <xPortStartScheduler+0x128>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d10a      	bne.n	8005a76 <xPortStartScheduler+0x46>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	60fb      	str	r3, [r7, #12]
}
 8005a72:	bf00      	nop
 8005a74:	e7fe      	b.n	8005a74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a76:	4b39      	ldr	r3, [pc, #228]	; (8005b5c <xPortStartScheduler+0x12c>)
 8005a78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	781b      	ldrb	r3, [r3, #0]
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	22ff      	movs	r2, #255	; 0xff
 8005a86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a90:	78fb      	ldrb	r3, [r7, #3]
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005a98:	b2da      	uxtb	r2, r3
 8005a9a:	4b31      	ldr	r3, [pc, #196]	; (8005b60 <xPortStartScheduler+0x130>)
 8005a9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a9e:	4b31      	ldr	r3, [pc, #196]	; (8005b64 <xPortStartScheduler+0x134>)
 8005aa0:	2207      	movs	r2, #7
 8005aa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aa4:	e009      	b.n	8005aba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005aa6:	4b2f      	ldr	r3, [pc, #188]	; (8005b64 <xPortStartScheduler+0x134>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	4a2d      	ldr	r2, [pc, #180]	; (8005b64 <xPortStartScheduler+0x134>)
 8005aae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005ab0:	78fb      	ldrb	r3, [r7, #3]
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005aba:	78fb      	ldrb	r3, [r7, #3]
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ac2:	2b80      	cmp	r3, #128	; 0x80
 8005ac4:	d0ef      	beq.n	8005aa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ac6:	4b27      	ldr	r3, [pc, #156]	; (8005b64 <xPortStartScheduler+0x134>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f1c3 0307 	rsb	r3, r3, #7
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d00a      	beq.n	8005ae8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	60bb      	str	r3, [r7, #8]
}
 8005ae4:	bf00      	nop
 8005ae6:	e7fe      	b.n	8005ae6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ae8:	4b1e      	ldr	r3, [pc, #120]	; (8005b64 <xPortStartScheduler+0x134>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	4a1d      	ldr	r2, [pc, #116]	; (8005b64 <xPortStartScheduler+0x134>)
 8005af0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005af2:	4b1c      	ldr	r3, [pc, #112]	; (8005b64 <xPortStartScheduler+0x134>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005afa:	4a1a      	ldr	r2, [pc, #104]	; (8005b64 <xPortStartScheduler+0x134>)
 8005afc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005b06:	4b18      	ldr	r3, [pc, #96]	; (8005b68 <xPortStartScheduler+0x138>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a17      	ldr	r2, [pc, #92]	; (8005b68 <xPortStartScheduler+0x138>)
 8005b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005b12:	4b15      	ldr	r3, [pc, #84]	; (8005b68 <xPortStartScheduler+0x138>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a14      	ldr	r2, [pc, #80]	; (8005b68 <xPortStartScheduler+0x138>)
 8005b18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005b1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b1e:	f000 f8dd 	bl	8005cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b22:	4b12      	ldr	r3, [pc, #72]	; (8005b6c <xPortStartScheduler+0x13c>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b28:	f000 f8fc 	bl	8005d24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b2c:	4b10      	ldr	r3, [pc, #64]	; (8005b70 <xPortStartScheduler+0x140>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a0f      	ldr	r2, [pc, #60]	; (8005b70 <xPortStartScheduler+0x140>)
 8005b32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005b36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b38:	f7ff ff66 	bl	8005a08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b3c:	f7ff fd58 	bl	80055f0 <vTaskSwitchContext>
	prvTaskExitError();
 8005b40:	f7ff ff22 	bl	8005988 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3718      	adds	r7, #24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	e000ed00 	.word	0xe000ed00
 8005b54:	410fc271 	.word	0x410fc271
 8005b58:	410fc270 	.word	0x410fc270
 8005b5c:	e000e400 	.word	0xe000e400
 8005b60:	2000075c 	.word	0x2000075c
 8005b64:	20000760 	.word	0x20000760
 8005b68:	e000ed20 	.word	0xe000ed20
 8005b6c:	2000000c 	.word	0x2000000c
 8005b70:	e000ef34 	.word	0xe000ef34

08005b74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
	__asm volatile
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	607b      	str	r3, [r7, #4]
}
 8005b8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b8e:	4b0f      	ldr	r3, [pc, #60]	; (8005bcc <vPortEnterCritical+0x58>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	3301      	adds	r3, #1
 8005b94:	4a0d      	ldr	r2, [pc, #52]	; (8005bcc <vPortEnterCritical+0x58>)
 8005b96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b98:	4b0c      	ldr	r3, [pc, #48]	; (8005bcc <vPortEnterCritical+0x58>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d10f      	bne.n	8005bc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	; (8005bd0 <vPortEnterCritical+0x5c>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00a      	beq.n	8005bc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bae:	f383 8811 	msr	BASEPRI, r3
 8005bb2:	f3bf 8f6f 	isb	sy
 8005bb6:	f3bf 8f4f 	dsb	sy
 8005bba:	603b      	str	r3, [r7, #0]
}
 8005bbc:	bf00      	nop
 8005bbe:	e7fe      	b.n	8005bbe <vPortEnterCritical+0x4a>
	}
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	2000000c 	.word	0x2000000c
 8005bd0:	e000ed04 	.word	0xe000ed04

08005bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005bda:	4b12      	ldr	r3, [pc, #72]	; (8005c24 <vPortExitCritical+0x50>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10a      	bne.n	8005bf8 <vPortExitCritical+0x24>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	607b      	str	r3, [r7, #4]
}
 8005bf4:	bf00      	nop
 8005bf6:	e7fe      	b.n	8005bf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005bf8:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <vPortExitCritical+0x50>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	3b01      	subs	r3, #1
 8005bfe:	4a09      	ldr	r2, [pc, #36]	; (8005c24 <vPortExitCritical+0x50>)
 8005c00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005c02:	4b08      	ldr	r3, [pc, #32]	; (8005c24 <vPortExitCritical+0x50>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d105      	bne.n	8005c16 <vPortExitCritical+0x42>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	2000000c 	.word	0x2000000c
	...

08005c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c30:	f3ef 8009 	mrs	r0, PSP
 8005c34:	f3bf 8f6f 	isb	sy
 8005c38:	4b15      	ldr	r3, [pc, #84]	; (8005c90 <pxCurrentTCBConst>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	f01e 0f10 	tst.w	lr, #16
 8005c40:	bf08      	it	eq
 8005c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c4a:	6010      	str	r0, [r2, #0]
 8005c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005c54:	f380 8811 	msr	BASEPRI, r0
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f7ff fcc6 	bl	80055f0 <vTaskSwitchContext>
 8005c64:	f04f 0000 	mov.w	r0, #0
 8005c68:	f380 8811 	msr	BASEPRI, r0
 8005c6c:	bc09      	pop	{r0, r3}
 8005c6e:	6819      	ldr	r1, [r3, #0]
 8005c70:	6808      	ldr	r0, [r1, #0]
 8005c72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c76:	f01e 0f10 	tst.w	lr, #16
 8005c7a:	bf08      	it	eq
 8005c7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c80:	f380 8809 	msr	PSP, r0
 8005c84:	f3bf 8f6f 	isb	sy
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	f3af 8000 	nop.w

08005c90 <pxCurrentTCBConst>:
 8005c90:	20000630 	.word	0x20000630
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c94:	bf00      	nop
 8005c96:	bf00      	nop

08005c98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	607b      	str	r3, [r7, #4]
}
 8005cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005cb2:	f7ff fbe5 	bl	8005480 <xTaskIncrementTick>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005cbc:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <SysTick_Handler+0x40>)
 8005cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cc2:	601a      	str	r2, [r3, #0]
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	f383 8811 	msr	BASEPRI, r3
}
 8005cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005cd0:	bf00      	nop
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	e000ed04 	.word	0xe000ed04

08005cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005cdc:	b480      	push	{r7}
 8005cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <vPortSetupTimerInterrupt+0x34>)
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ce6:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <vPortSetupTimerInterrupt+0x38>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005cec:	4b0a      	ldr	r3, [pc, #40]	; (8005d18 <vPortSetupTimerInterrupt+0x3c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a0a      	ldr	r2, [pc, #40]	; (8005d1c <vPortSetupTimerInterrupt+0x40>)
 8005cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf6:	099b      	lsrs	r3, r3, #6
 8005cf8:	4a09      	ldr	r2, [pc, #36]	; (8005d20 <vPortSetupTimerInterrupt+0x44>)
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cfe:	4b04      	ldr	r3, [pc, #16]	; (8005d10 <vPortSetupTimerInterrupt+0x34>)
 8005d00:	2207      	movs	r2, #7
 8005d02:	601a      	str	r2, [r3, #0]
}
 8005d04:	bf00      	nop
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	e000e010 	.word	0xe000e010
 8005d14:	e000e018 	.word	0xe000e018
 8005d18:	20000000 	.word	0x20000000
 8005d1c:	10624dd3 	.word	0x10624dd3
 8005d20:	e000e014 	.word	0xe000e014

08005d24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005d34 <vPortEnableVFP+0x10>
 8005d28:	6801      	ldr	r1, [r0, #0]
 8005d2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005d2e:	6001      	str	r1, [r0, #0]
 8005d30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d32:	bf00      	nop
 8005d34:	e000ed88 	.word	0xe000ed88

08005d38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08a      	sub	sp, #40	; 0x28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d40:	2300      	movs	r3, #0
 8005d42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d44:	f7ff faf2 	bl	800532c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d48:	4b5b      	ldr	r3, [pc, #364]	; (8005eb8 <pvPortMalloc+0x180>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d50:	f000 f920 	bl	8005f94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d54:	4b59      	ldr	r3, [pc, #356]	; (8005ebc <pvPortMalloc+0x184>)
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f040 8093 	bne.w	8005e88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d01d      	beq.n	8005da4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005d68:	2208      	movs	r2, #8
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f003 0307 	and.w	r3, r3, #7
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d014      	beq.n	8005da4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f023 0307 	bic.w	r3, r3, #7
 8005d80:	3308      	adds	r3, #8
 8005d82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <pvPortMalloc+0x6c>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	617b      	str	r3, [r7, #20]
}
 8005da0:	bf00      	nop
 8005da2:	e7fe      	b.n	8005da2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d06e      	beq.n	8005e88 <pvPortMalloc+0x150>
 8005daa:	4b45      	ldr	r3, [pc, #276]	; (8005ec0 <pvPortMalloc+0x188>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d869      	bhi.n	8005e88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005db4:	4b43      	ldr	r3, [pc, #268]	; (8005ec4 <pvPortMalloc+0x18c>)
 8005db6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005db8:	4b42      	ldr	r3, [pc, #264]	; (8005ec4 <pvPortMalloc+0x18c>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dbe:	e004      	b.n	8005dca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d903      	bls.n	8005ddc <pvPortMalloc+0xa4>
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1f1      	bne.n	8005dc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ddc:	4b36      	ldr	r3, [pc, #216]	; (8005eb8 <pvPortMalloc+0x180>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d050      	beq.n	8005e88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2208      	movs	r2, #8
 8005dec:	4413      	add	r3, r2
 8005dee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	1ad2      	subs	r2, r2, r3
 8005e00:	2308      	movs	r3, #8
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d91f      	bls.n	8005e48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00a      	beq.n	8005e30 <pvPortMalloc+0xf8>
	__asm volatile
 8005e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1e:	f383 8811 	msr	BASEPRI, r3
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	613b      	str	r3, [r7, #16]
}
 8005e2c:	bf00      	nop
 8005e2e:	e7fe      	b.n	8005e2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	1ad2      	subs	r2, r2, r3
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e42:	69b8      	ldr	r0, [r7, #24]
 8005e44:	f000 f908 	bl	8006058 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e48:	4b1d      	ldr	r3, [pc, #116]	; (8005ec0 <pvPortMalloc+0x188>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	4a1b      	ldr	r2, [pc, #108]	; (8005ec0 <pvPortMalloc+0x188>)
 8005e54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e56:	4b1a      	ldr	r3, [pc, #104]	; (8005ec0 <pvPortMalloc+0x188>)
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	4b1b      	ldr	r3, [pc, #108]	; (8005ec8 <pvPortMalloc+0x190>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d203      	bcs.n	8005e6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e62:	4b17      	ldr	r3, [pc, #92]	; (8005ec0 <pvPortMalloc+0x188>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a18      	ldr	r2, [pc, #96]	; (8005ec8 <pvPortMalloc+0x190>)
 8005e68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	4b13      	ldr	r3, [pc, #76]	; (8005ebc <pvPortMalloc+0x184>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	431a      	orrs	r2, r3
 8005e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e7e:	4b13      	ldr	r3, [pc, #76]	; (8005ecc <pvPortMalloc+0x194>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	3301      	adds	r3, #1
 8005e84:	4a11      	ldr	r2, [pc, #68]	; (8005ecc <pvPortMalloc+0x194>)
 8005e86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e88:	f7ff fa5e 	bl	8005348 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	f003 0307 	and.w	r3, r3, #7
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d00a      	beq.n	8005eac <pvPortMalloc+0x174>
	__asm volatile
 8005e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9a:	f383 8811 	msr	BASEPRI, r3
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f3bf 8f4f 	dsb	sy
 8005ea6:	60fb      	str	r3, [r7, #12]
}
 8005ea8:	bf00      	nop
 8005eaa:	e7fe      	b.n	8005eaa <pvPortMalloc+0x172>
	return pvReturn;
 8005eac:	69fb      	ldr	r3, [r7, #28]
}
 8005eae:	4618      	mov	r0, r3
 8005eb0:	3728      	adds	r7, #40	; 0x28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	bf00      	nop
 8005eb8:	2000436c 	.word	0x2000436c
 8005ebc:	20004380 	.word	0x20004380
 8005ec0:	20004370 	.word	0x20004370
 8005ec4:	20004364 	.word	0x20004364
 8005ec8:	20004374 	.word	0x20004374
 8005ecc:	20004378 	.word	0x20004378

08005ed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d04d      	beq.n	8005f7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005ee2:	2308      	movs	r3, #8
 8005ee4:	425b      	negs	r3, r3
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	4413      	add	r3, r2
 8005eea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	4b24      	ldr	r3, [pc, #144]	; (8005f88 <vPortFree+0xb8>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d10a      	bne.n	8005f14 <vPortFree+0x44>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	60fb      	str	r3, [r7, #12]
}
 8005f10:	bf00      	nop
 8005f12:	e7fe      	b.n	8005f12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00a      	beq.n	8005f32 <vPortFree+0x62>
	__asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	60bb      	str	r3, [r7, #8]
}
 8005f2e:	bf00      	nop
 8005f30:	e7fe      	b.n	8005f30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	685a      	ldr	r2, [r3, #4]
 8005f36:	4b14      	ldr	r3, [pc, #80]	; (8005f88 <vPortFree+0xb8>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d01e      	beq.n	8005f7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d11a      	bne.n	8005f7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	4b0e      	ldr	r3, [pc, #56]	; (8005f88 <vPortFree+0xb8>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	43db      	mvns	r3, r3
 8005f52:	401a      	ands	r2, r3
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f58:	f7ff f9e8 	bl	800532c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	4b0a      	ldr	r3, [pc, #40]	; (8005f8c <vPortFree+0xbc>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4413      	add	r3, r2
 8005f66:	4a09      	ldr	r2, [pc, #36]	; (8005f8c <vPortFree+0xbc>)
 8005f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f6a:	6938      	ldr	r0, [r7, #16]
 8005f6c:	f000 f874 	bl	8006058 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f70:	4b07      	ldr	r3, [pc, #28]	; (8005f90 <vPortFree+0xc0>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3301      	adds	r3, #1
 8005f76:	4a06      	ldr	r2, [pc, #24]	; (8005f90 <vPortFree+0xc0>)
 8005f78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f7a:	f7ff f9e5 	bl	8005348 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f7e:	bf00      	nop
 8005f80:	3718      	adds	r7, #24
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20004380 	.word	0x20004380
 8005f8c:	20004370 	.word	0x20004370
 8005f90:	2000437c 	.word	0x2000437c

08005f94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005fa0:	4b27      	ldr	r3, [pc, #156]	; (8006040 <prvHeapInit+0xac>)
 8005fa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00c      	beq.n	8005fc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	3307      	adds	r3, #7
 8005fb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	f023 0307 	bic.w	r3, r3, #7
 8005fba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	4a1f      	ldr	r2, [pc, #124]	; (8006040 <prvHeapInit+0xac>)
 8005fc4:	4413      	add	r3, r2
 8005fc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fcc:	4a1d      	ldr	r2, [pc, #116]	; (8006044 <prvHeapInit+0xb0>)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005fd2:	4b1c      	ldr	r3, [pc, #112]	; (8006044 <prvHeapInit+0xb0>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	4413      	add	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005fe0:	2208      	movs	r2, #8
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	1a9b      	subs	r3, r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0307 	bic.w	r3, r3, #7
 8005fee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	4a15      	ldr	r2, [pc, #84]	; (8006048 <prvHeapInit+0xb4>)
 8005ff4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ff6:	4b14      	ldr	r3, [pc, #80]	; (8006048 <prvHeapInit+0xb4>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ffe:	4b12      	ldr	r3, [pc, #72]	; (8006048 <prvHeapInit+0xb4>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2200      	movs	r2, #0
 8006004:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	1ad2      	subs	r2, r2, r3
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006014:	4b0c      	ldr	r3, [pc, #48]	; (8006048 <prvHeapInit+0xb4>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	4a0a      	ldr	r2, [pc, #40]	; (800604c <prvHeapInit+0xb8>)
 8006022:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	4a09      	ldr	r2, [pc, #36]	; (8006050 <prvHeapInit+0xbc>)
 800602a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800602c:	4b09      	ldr	r3, [pc, #36]	; (8006054 <prvHeapInit+0xc0>)
 800602e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006032:	601a      	str	r2, [r3, #0]
}
 8006034:	bf00      	nop
 8006036:	3714      	adds	r7, #20
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr
 8006040:	20000764 	.word	0x20000764
 8006044:	20004364 	.word	0x20004364
 8006048:	2000436c 	.word	0x2000436c
 800604c:	20004374 	.word	0x20004374
 8006050:	20004370 	.word	0x20004370
 8006054:	20004380 	.word	0x20004380

08006058 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006060:	4b28      	ldr	r3, [pc, #160]	; (8006104 <prvInsertBlockIntoFreeList+0xac>)
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	e002      	b.n	800606c <prvInsertBlockIntoFreeList+0x14>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	60fb      	str	r3, [r7, #12]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	429a      	cmp	r2, r3
 8006074:	d8f7      	bhi.n	8006066 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	4413      	add	r3, r2
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	429a      	cmp	r2, r3
 8006086:	d108      	bne.n	800609a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	441a      	add	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	441a      	add	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d118      	bne.n	80060e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	4b15      	ldr	r3, [pc, #84]	; (8006108 <prvInsertBlockIntoFreeList+0xb0>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d00d      	beq.n	80060d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	685a      	ldr	r2, [r3, #4]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	441a      	add	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	601a      	str	r2, [r3, #0]
 80060d4:	e008      	b.n	80060e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060d6:	4b0c      	ldr	r3, [pc, #48]	; (8006108 <prvInsertBlockIntoFreeList+0xb0>)
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	601a      	str	r2, [r3, #0]
 80060de:	e003      	b.n	80060e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d002      	beq.n	80060f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	20004364 	.word	0x20004364
 8006108:	2000436c 	.word	0x2000436c

0800610c <difftime>:
 800610c:	1a80      	subs	r0, r0, r2
 800610e:	b508      	push	{r3, lr}
 8006110:	eb61 0103 	sbc.w	r1, r1, r3
 8006114:	f7fa fa42 	bl	800059c <__aeabi_l2d>
 8006118:	ec41 0b10 	vmov	d0, r0, r1
 800611c:	bd08      	pop	{r3, pc}
	...

08006120 <__errno>:
 8006120:	4b01      	ldr	r3, [pc, #4]	; (8006128 <__errno+0x8>)
 8006122:	6818      	ldr	r0, [r3, #0]
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	20000010 	.word	0x20000010

0800612c <__libc_init_array>:
 800612c:	b570      	push	{r4, r5, r6, lr}
 800612e:	4d0d      	ldr	r5, [pc, #52]	; (8006164 <__libc_init_array+0x38>)
 8006130:	4c0d      	ldr	r4, [pc, #52]	; (8006168 <__libc_init_array+0x3c>)
 8006132:	1b64      	subs	r4, r4, r5
 8006134:	10a4      	asrs	r4, r4, #2
 8006136:	2600      	movs	r6, #0
 8006138:	42a6      	cmp	r6, r4
 800613a:	d109      	bne.n	8006150 <__libc_init_array+0x24>
 800613c:	4d0b      	ldr	r5, [pc, #44]	; (800616c <__libc_init_array+0x40>)
 800613e:	4c0c      	ldr	r4, [pc, #48]	; (8006170 <__libc_init_array+0x44>)
 8006140:	f004 fcca 	bl	800aad8 <_init>
 8006144:	1b64      	subs	r4, r4, r5
 8006146:	10a4      	asrs	r4, r4, #2
 8006148:	2600      	movs	r6, #0
 800614a:	42a6      	cmp	r6, r4
 800614c:	d105      	bne.n	800615a <__libc_init_array+0x2e>
 800614e:	bd70      	pop	{r4, r5, r6, pc}
 8006150:	f855 3b04 	ldr.w	r3, [r5], #4
 8006154:	4798      	blx	r3
 8006156:	3601      	adds	r6, #1
 8006158:	e7ee      	b.n	8006138 <__libc_init_array+0xc>
 800615a:	f855 3b04 	ldr.w	r3, [r5], #4
 800615e:	4798      	blx	r3
 8006160:	3601      	adds	r6, #1
 8006162:	e7f2      	b.n	800614a <__libc_init_array+0x1e>
 8006164:	0800b0f4 	.word	0x0800b0f4
 8006168:	0800b0f4 	.word	0x0800b0f4
 800616c:	0800b0f4 	.word	0x0800b0f4
 8006170:	0800b0f8 	.word	0x0800b0f8

08006174 <malloc>:
 8006174:	4b02      	ldr	r3, [pc, #8]	; (8006180 <malloc+0xc>)
 8006176:	4601      	mov	r1, r0
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	f000 b88d 	b.w	8006298 <_malloc_r>
 800617e:	bf00      	nop
 8006180:	20000010 	.word	0x20000010

08006184 <free>:
 8006184:	4b02      	ldr	r3, [pc, #8]	; (8006190 <free+0xc>)
 8006186:	4601      	mov	r1, r0
 8006188:	6818      	ldr	r0, [r3, #0]
 800618a:	f000 b819 	b.w	80061c0 <_free_r>
 800618e:	bf00      	nop
 8006190:	20000010 	.word	0x20000010

08006194 <memcpy>:
 8006194:	440a      	add	r2, r1
 8006196:	4291      	cmp	r1, r2
 8006198:	f100 33ff 	add.w	r3, r0, #4294967295
 800619c:	d100      	bne.n	80061a0 <memcpy+0xc>
 800619e:	4770      	bx	lr
 80061a0:	b510      	push	{r4, lr}
 80061a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061aa:	4291      	cmp	r1, r2
 80061ac:	d1f9      	bne.n	80061a2 <memcpy+0xe>
 80061ae:	bd10      	pop	{r4, pc}

080061b0 <memset>:
 80061b0:	4402      	add	r2, r0
 80061b2:	4603      	mov	r3, r0
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d100      	bne.n	80061ba <memset+0xa>
 80061b8:	4770      	bx	lr
 80061ba:	f803 1b01 	strb.w	r1, [r3], #1
 80061be:	e7f9      	b.n	80061b4 <memset+0x4>

080061c0 <_free_r>:
 80061c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061c2:	2900      	cmp	r1, #0
 80061c4:	d044      	beq.n	8006250 <_free_r+0x90>
 80061c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061ca:	9001      	str	r0, [sp, #4]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f1a1 0404 	sub.w	r4, r1, #4
 80061d2:	bfb8      	it	lt
 80061d4:	18e4      	addlt	r4, r4, r3
 80061d6:	f003 f85d 	bl	8009294 <__malloc_lock>
 80061da:	4a1e      	ldr	r2, [pc, #120]	; (8006254 <_free_r+0x94>)
 80061dc:	9801      	ldr	r0, [sp, #4]
 80061de:	6813      	ldr	r3, [r2, #0]
 80061e0:	b933      	cbnz	r3, 80061f0 <_free_r+0x30>
 80061e2:	6063      	str	r3, [r4, #4]
 80061e4:	6014      	str	r4, [r2, #0]
 80061e6:	b003      	add	sp, #12
 80061e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061ec:	f003 b858 	b.w	80092a0 <__malloc_unlock>
 80061f0:	42a3      	cmp	r3, r4
 80061f2:	d908      	bls.n	8006206 <_free_r+0x46>
 80061f4:	6825      	ldr	r5, [r4, #0]
 80061f6:	1961      	adds	r1, r4, r5
 80061f8:	428b      	cmp	r3, r1
 80061fa:	bf01      	itttt	eq
 80061fc:	6819      	ldreq	r1, [r3, #0]
 80061fe:	685b      	ldreq	r3, [r3, #4]
 8006200:	1949      	addeq	r1, r1, r5
 8006202:	6021      	streq	r1, [r4, #0]
 8006204:	e7ed      	b.n	80061e2 <_free_r+0x22>
 8006206:	461a      	mov	r2, r3
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	b10b      	cbz	r3, 8006210 <_free_r+0x50>
 800620c:	42a3      	cmp	r3, r4
 800620e:	d9fa      	bls.n	8006206 <_free_r+0x46>
 8006210:	6811      	ldr	r1, [r2, #0]
 8006212:	1855      	adds	r5, r2, r1
 8006214:	42a5      	cmp	r5, r4
 8006216:	d10b      	bne.n	8006230 <_free_r+0x70>
 8006218:	6824      	ldr	r4, [r4, #0]
 800621a:	4421      	add	r1, r4
 800621c:	1854      	adds	r4, r2, r1
 800621e:	42a3      	cmp	r3, r4
 8006220:	6011      	str	r1, [r2, #0]
 8006222:	d1e0      	bne.n	80061e6 <_free_r+0x26>
 8006224:	681c      	ldr	r4, [r3, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	6053      	str	r3, [r2, #4]
 800622a:	4421      	add	r1, r4
 800622c:	6011      	str	r1, [r2, #0]
 800622e:	e7da      	b.n	80061e6 <_free_r+0x26>
 8006230:	d902      	bls.n	8006238 <_free_r+0x78>
 8006232:	230c      	movs	r3, #12
 8006234:	6003      	str	r3, [r0, #0]
 8006236:	e7d6      	b.n	80061e6 <_free_r+0x26>
 8006238:	6825      	ldr	r5, [r4, #0]
 800623a:	1961      	adds	r1, r4, r5
 800623c:	428b      	cmp	r3, r1
 800623e:	bf04      	itt	eq
 8006240:	6819      	ldreq	r1, [r3, #0]
 8006242:	685b      	ldreq	r3, [r3, #4]
 8006244:	6063      	str	r3, [r4, #4]
 8006246:	bf04      	itt	eq
 8006248:	1949      	addeq	r1, r1, r5
 800624a:	6021      	streq	r1, [r4, #0]
 800624c:	6054      	str	r4, [r2, #4]
 800624e:	e7ca      	b.n	80061e6 <_free_r+0x26>
 8006250:	b003      	add	sp, #12
 8006252:	bd30      	pop	{r4, r5, pc}
 8006254:	20004384 	.word	0x20004384

08006258 <sbrk_aligned>:
 8006258:	b570      	push	{r4, r5, r6, lr}
 800625a:	4e0e      	ldr	r6, [pc, #56]	; (8006294 <sbrk_aligned+0x3c>)
 800625c:	460c      	mov	r4, r1
 800625e:	6831      	ldr	r1, [r6, #0]
 8006260:	4605      	mov	r5, r0
 8006262:	b911      	cbnz	r1, 800626a <sbrk_aligned+0x12>
 8006264:	f000 ff06 	bl	8007074 <_sbrk_r>
 8006268:	6030      	str	r0, [r6, #0]
 800626a:	4621      	mov	r1, r4
 800626c:	4628      	mov	r0, r5
 800626e:	f000 ff01 	bl	8007074 <_sbrk_r>
 8006272:	1c43      	adds	r3, r0, #1
 8006274:	d00a      	beq.n	800628c <sbrk_aligned+0x34>
 8006276:	1cc4      	adds	r4, r0, #3
 8006278:	f024 0403 	bic.w	r4, r4, #3
 800627c:	42a0      	cmp	r0, r4
 800627e:	d007      	beq.n	8006290 <sbrk_aligned+0x38>
 8006280:	1a21      	subs	r1, r4, r0
 8006282:	4628      	mov	r0, r5
 8006284:	f000 fef6 	bl	8007074 <_sbrk_r>
 8006288:	3001      	adds	r0, #1
 800628a:	d101      	bne.n	8006290 <sbrk_aligned+0x38>
 800628c:	f04f 34ff 	mov.w	r4, #4294967295
 8006290:	4620      	mov	r0, r4
 8006292:	bd70      	pop	{r4, r5, r6, pc}
 8006294:	20004388 	.word	0x20004388

08006298 <_malloc_r>:
 8006298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800629c:	1ccd      	adds	r5, r1, #3
 800629e:	f025 0503 	bic.w	r5, r5, #3
 80062a2:	3508      	adds	r5, #8
 80062a4:	2d0c      	cmp	r5, #12
 80062a6:	bf38      	it	cc
 80062a8:	250c      	movcc	r5, #12
 80062aa:	2d00      	cmp	r5, #0
 80062ac:	4607      	mov	r7, r0
 80062ae:	db01      	blt.n	80062b4 <_malloc_r+0x1c>
 80062b0:	42a9      	cmp	r1, r5
 80062b2:	d905      	bls.n	80062c0 <_malloc_r+0x28>
 80062b4:	230c      	movs	r3, #12
 80062b6:	603b      	str	r3, [r7, #0]
 80062b8:	2600      	movs	r6, #0
 80062ba:	4630      	mov	r0, r6
 80062bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062c0:	4e2e      	ldr	r6, [pc, #184]	; (800637c <_malloc_r+0xe4>)
 80062c2:	f002 ffe7 	bl	8009294 <__malloc_lock>
 80062c6:	6833      	ldr	r3, [r6, #0]
 80062c8:	461c      	mov	r4, r3
 80062ca:	bb34      	cbnz	r4, 800631a <_malloc_r+0x82>
 80062cc:	4629      	mov	r1, r5
 80062ce:	4638      	mov	r0, r7
 80062d0:	f7ff ffc2 	bl	8006258 <sbrk_aligned>
 80062d4:	1c43      	adds	r3, r0, #1
 80062d6:	4604      	mov	r4, r0
 80062d8:	d14d      	bne.n	8006376 <_malloc_r+0xde>
 80062da:	6834      	ldr	r4, [r6, #0]
 80062dc:	4626      	mov	r6, r4
 80062de:	2e00      	cmp	r6, #0
 80062e0:	d140      	bne.n	8006364 <_malloc_r+0xcc>
 80062e2:	6823      	ldr	r3, [r4, #0]
 80062e4:	4631      	mov	r1, r6
 80062e6:	4638      	mov	r0, r7
 80062e8:	eb04 0803 	add.w	r8, r4, r3
 80062ec:	f000 fec2 	bl	8007074 <_sbrk_r>
 80062f0:	4580      	cmp	r8, r0
 80062f2:	d13a      	bne.n	800636a <_malloc_r+0xd2>
 80062f4:	6821      	ldr	r1, [r4, #0]
 80062f6:	3503      	adds	r5, #3
 80062f8:	1a6d      	subs	r5, r5, r1
 80062fa:	f025 0503 	bic.w	r5, r5, #3
 80062fe:	3508      	adds	r5, #8
 8006300:	2d0c      	cmp	r5, #12
 8006302:	bf38      	it	cc
 8006304:	250c      	movcc	r5, #12
 8006306:	4629      	mov	r1, r5
 8006308:	4638      	mov	r0, r7
 800630a:	f7ff ffa5 	bl	8006258 <sbrk_aligned>
 800630e:	3001      	adds	r0, #1
 8006310:	d02b      	beq.n	800636a <_malloc_r+0xd2>
 8006312:	6823      	ldr	r3, [r4, #0]
 8006314:	442b      	add	r3, r5
 8006316:	6023      	str	r3, [r4, #0]
 8006318:	e00e      	b.n	8006338 <_malloc_r+0xa0>
 800631a:	6822      	ldr	r2, [r4, #0]
 800631c:	1b52      	subs	r2, r2, r5
 800631e:	d41e      	bmi.n	800635e <_malloc_r+0xc6>
 8006320:	2a0b      	cmp	r2, #11
 8006322:	d916      	bls.n	8006352 <_malloc_r+0xba>
 8006324:	1961      	adds	r1, r4, r5
 8006326:	42a3      	cmp	r3, r4
 8006328:	6025      	str	r5, [r4, #0]
 800632a:	bf18      	it	ne
 800632c:	6059      	strne	r1, [r3, #4]
 800632e:	6863      	ldr	r3, [r4, #4]
 8006330:	bf08      	it	eq
 8006332:	6031      	streq	r1, [r6, #0]
 8006334:	5162      	str	r2, [r4, r5]
 8006336:	604b      	str	r3, [r1, #4]
 8006338:	4638      	mov	r0, r7
 800633a:	f104 060b 	add.w	r6, r4, #11
 800633e:	f002 ffaf 	bl	80092a0 <__malloc_unlock>
 8006342:	f026 0607 	bic.w	r6, r6, #7
 8006346:	1d23      	adds	r3, r4, #4
 8006348:	1af2      	subs	r2, r6, r3
 800634a:	d0b6      	beq.n	80062ba <_malloc_r+0x22>
 800634c:	1b9b      	subs	r3, r3, r6
 800634e:	50a3      	str	r3, [r4, r2]
 8006350:	e7b3      	b.n	80062ba <_malloc_r+0x22>
 8006352:	6862      	ldr	r2, [r4, #4]
 8006354:	42a3      	cmp	r3, r4
 8006356:	bf0c      	ite	eq
 8006358:	6032      	streq	r2, [r6, #0]
 800635a:	605a      	strne	r2, [r3, #4]
 800635c:	e7ec      	b.n	8006338 <_malloc_r+0xa0>
 800635e:	4623      	mov	r3, r4
 8006360:	6864      	ldr	r4, [r4, #4]
 8006362:	e7b2      	b.n	80062ca <_malloc_r+0x32>
 8006364:	4634      	mov	r4, r6
 8006366:	6876      	ldr	r6, [r6, #4]
 8006368:	e7b9      	b.n	80062de <_malloc_r+0x46>
 800636a:	230c      	movs	r3, #12
 800636c:	603b      	str	r3, [r7, #0]
 800636e:	4638      	mov	r0, r7
 8006370:	f002 ff96 	bl	80092a0 <__malloc_unlock>
 8006374:	e7a1      	b.n	80062ba <_malloc_r+0x22>
 8006376:	6025      	str	r5, [r4, #0]
 8006378:	e7de      	b.n	8006338 <_malloc_r+0xa0>
 800637a:	bf00      	nop
 800637c:	20004384 	.word	0x20004384

08006380 <__cvt>:
 8006380:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006384:	ec55 4b10 	vmov	r4, r5, d0
 8006388:	2d00      	cmp	r5, #0
 800638a:	460e      	mov	r6, r1
 800638c:	4619      	mov	r1, r3
 800638e:	462b      	mov	r3, r5
 8006390:	bfbb      	ittet	lt
 8006392:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006396:	461d      	movlt	r5, r3
 8006398:	2300      	movge	r3, #0
 800639a:	232d      	movlt	r3, #45	; 0x2d
 800639c:	700b      	strb	r3, [r1, #0]
 800639e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80063a4:	4691      	mov	r9, r2
 80063a6:	f023 0820 	bic.w	r8, r3, #32
 80063aa:	bfbc      	itt	lt
 80063ac:	4622      	movlt	r2, r4
 80063ae:	4614      	movlt	r4, r2
 80063b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063b4:	d005      	beq.n	80063c2 <__cvt+0x42>
 80063b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80063ba:	d100      	bne.n	80063be <__cvt+0x3e>
 80063bc:	3601      	adds	r6, #1
 80063be:	2102      	movs	r1, #2
 80063c0:	e000      	b.n	80063c4 <__cvt+0x44>
 80063c2:	2103      	movs	r1, #3
 80063c4:	ab03      	add	r3, sp, #12
 80063c6:	9301      	str	r3, [sp, #4]
 80063c8:	ab02      	add	r3, sp, #8
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	ec45 4b10 	vmov	d0, r4, r5
 80063d0:	4653      	mov	r3, sl
 80063d2:	4632      	mov	r2, r6
 80063d4:	f001 fdd8 	bl	8007f88 <_dtoa_r>
 80063d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80063dc:	4607      	mov	r7, r0
 80063de:	d102      	bne.n	80063e6 <__cvt+0x66>
 80063e0:	f019 0f01 	tst.w	r9, #1
 80063e4:	d022      	beq.n	800642c <__cvt+0xac>
 80063e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80063ea:	eb07 0906 	add.w	r9, r7, r6
 80063ee:	d110      	bne.n	8006412 <__cvt+0x92>
 80063f0:	783b      	ldrb	r3, [r7, #0]
 80063f2:	2b30      	cmp	r3, #48	; 0x30
 80063f4:	d10a      	bne.n	800640c <__cvt+0x8c>
 80063f6:	2200      	movs	r2, #0
 80063f8:	2300      	movs	r3, #0
 80063fa:	4620      	mov	r0, r4
 80063fc:	4629      	mov	r1, r5
 80063fe:	f7fa fb63 	bl	8000ac8 <__aeabi_dcmpeq>
 8006402:	b918      	cbnz	r0, 800640c <__cvt+0x8c>
 8006404:	f1c6 0601 	rsb	r6, r6, #1
 8006408:	f8ca 6000 	str.w	r6, [sl]
 800640c:	f8da 3000 	ldr.w	r3, [sl]
 8006410:	4499      	add	r9, r3
 8006412:	2200      	movs	r2, #0
 8006414:	2300      	movs	r3, #0
 8006416:	4620      	mov	r0, r4
 8006418:	4629      	mov	r1, r5
 800641a:	f7fa fb55 	bl	8000ac8 <__aeabi_dcmpeq>
 800641e:	b108      	cbz	r0, 8006424 <__cvt+0xa4>
 8006420:	f8cd 900c 	str.w	r9, [sp, #12]
 8006424:	2230      	movs	r2, #48	; 0x30
 8006426:	9b03      	ldr	r3, [sp, #12]
 8006428:	454b      	cmp	r3, r9
 800642a:	d307      	bcc.n	800643c <__cvt+0xbc>
 800642c:	9b03      	ldr	r3, [sp, #12]
 800642e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006430:	1bdb      	subs	r3, r3, r7
 8006432:	4638      	mov	r0, r7
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	b004      	add	sp, #16
 8006438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800643c:	1c59      	adds	r1, r3, #1
 800643e:	9103      	str	r1, [sp, #12]
 8006440:	701a      	strb	r2, [r3, #0]
 8006442:	e7f0      	b.n	8006426 <__cvt+0xa6>

08006444 <__exponent>:
 8006444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006446:	4603      	mov	r3, r0
 8006448:	2900      	cmp	r1, #0
 800644a:	bfb8      	it	lt
 800644c:	4249      	neglt	r1, r1
 800644e:	f803 2b02 	strb.w	r2, [r3], #2
 8006452:	bfb4      	ite	lt
 8006454:	222d      	movlt	r2, #45	; 0x2d
 8006456:	222b      	movge	r2, #43	; 0x2b
 8006458:	2909      	cmp	r1, #9
 800645a:	7042      	strb	r2, [r0, #1]
 800645c:	dd2a      	ble.n	80064b4 <__exponent+0x70>
 800645e:	f10d 0407 	add.w	r4, sp, #7
 8006462:	46a4      	mov	ip, r4
 8006464:	270a      	movs	r7, #10
 8006466:	46a6      	mov	lr, r4
 8006468:	460a      	mov	r2, r1
 800646a:	fb91 f6f7 	sdiv	r6, r1, r7
 800646e:	fb07 1516 	mls	r5, r7, r6, r1
 8006472:	3530      	adds	r5, #48	; 0x30
 8006474:	2a63      	cmp	r2, #99	; 0x63
 8006476:	f104 34ff 	add.w	r4, r4, #4294967295
 800647a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800647e:	4631      	mov	r1, r6
 8006480:	dcf1      	bgt.n	8006466 <__exponent+0x22>
 8006482:	3130      	adds	r1, #48	; 0x30
 8006484:	f1ae 0502 	sub.w	r5, lr, #2
 8006488:	f804 1c01 	strb.w	r1, [r4, #-1]
 800648c:	1c44      	adds	r4, r0, #1
 800648e:	4629      	mov	r1, r5
 8006490:	4561      	cmp	r1, ip
 8006492:	d30a      	bcc.n	80064aa <__exponent+0x66>
 8006494:	f10d 0209 	add.w	r2, sp, #9
 8006498:	eba2 020e 	sub.w	r2, r2, lr
 800649c:	4565      	cmp	r5, ip
 800649e:	bf88      	it	hi
 80064a0:	2200      	movhi	r2, #0
 80064a2:	4413      	add	r3, r2
 80064a4:	1a18      	subs	r0, r3, r0
 80064a6:	b003      	add	sp, #12
 80064a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80064b2:	e7ed      	b.n	8006490 <__exponent+0x4c>
 80064b4:	2330      	movs	r3, #48	; 0x30
 80064b6:	3130      	adds	r1, #48	; 0x30
 80064b8:	7083      	strb	r3, [r0, #2]
 80064ba:	70c1      	strb	r1, [r0, #3]
 80064bc:	1d03      	adds	r3, r0, #4
 80064be:	e7f1      	b.n	80064a4 <__exponent+0x60>

080064c0 <_printf_float>:
 80064c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064c4:	ed2d 8b02 	vpush	{d8}
 80064c8:	b08d      	sub	sp, #52	; 0x34
 80064ca:	460c      	mov	r4, r1
 80064cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80064d0:	4616      	mov	r6, r2
 80064d2:	461f      	mov	r7, r3
 80064d4:	4605      	mov	r5, r0
 80064d6:	f002 fec7 	bl	8009268 <_localeconv_r>
 80064da:	f8d0 a000 	ldr.w	sl, [r0]
 80064de:	4650      	mov	r0, sl
 80064e0:	f7f9 fe76 	bl	80001d0 <strlen>
 80064e4:	2300      	movs	r3, #0
 80064e6:	930a      	str	r3, [sp, #40]	; 0x28
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	9305      	str	r3, [sp, #20]
 80064ec:	f8d8 3000 	ldr.w	r3, [r8]
 80064f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80064f4:	3307      	adds	r3, #7
 80064f6:	f023 0307 	bic.w	r3, r3, #7
 80064fa:	f103 0208 	add.w	r2, r3, #8
 80064fe:	f8c8 2000 	str.w	r2, [r8]
 8006502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006506:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800650a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800650e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006512:	9307      	str	r3, [sp, #28]
 8006514:	f8cd 8018 	str.w	r8, [sp, #24]
 8006518:	ee08 0a10 	vmov	s16, r0
 800651c:	4b9f      	ldr	r3, [pc, #636]	; (800679c <_printf_float+0x2dc>)
 800651e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006522:	f04f 32ff 	mov.w	r2, #4294967295
 8006526:	f7fa fb01 	bl	8000b2c <__aeabi_dcmpun>
 800652a:	bb88      	cbnz	r0, 8006590 <_printf_float+0xd0>
 800652c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006530:	4b9a      	ldr	r3, [pc, #616]	; (800679c <_printf_float+0x2dc>)
 8006532:	f04f 32ff 	mov.w	r2, #4294967295
 8006536:	f7fa fadb 	bl	8000af0 <__aeabi_dcmple>
 800653a:	bb48      	cbnz	r0, 8006590 <_printf_float+0xd0>
 800653c:	2200      	movs	r2, #0
 800653e:	2300      	movs	r3, #0
 8006540:	4640      	mov	r0, r8
 8006542:	4649      	mov	r1, r9
 8006544:	f7fa faca 	bl	8000adc <__aeabi_dcmplt>
 8006548:	b110      	cbz	r0, 8006550 <_printf_float+0x90>
 800654a:	232d      	movs	r3, #45	; 0x2d
 800654c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006550:	4b93      	ldr	r3, [pc, #588]	; (80067a0 <_printf_float+0x2e0>)
 8006552:	4894      	ldr	r0, [pc, #592]	; (80067a4 <_printf_float+0x2e4>)
 8006554:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006558:	bf94      	ite	ls
 800655a:	4698      	movls	r8, r3
 800655c:	4680      	movhi	r8, r0
 800655e:	2303      	movs	r3, #3
 8006560:	6123      	str	r3, [r4, #16]
 8006562:	9b05      	ldr	r3, [sp, #20]
 8006564:	f023 0204 	bic.w	r2, r3, #4
 8006568:	6022      	str	r2, [r4, #0]
 800656a:	f04f 0900 	mov.w	r9, #0
 800656e:	9700      	str	r7, [sp, #0]
 8006570:	4633      	mov	r3, r6
 8006572:	aa0b      	add	r2, sp, #44	; 0x2c
 8006574:	4621      	mov	r1, r4
 8006576:	4628      	mov	r0, r5
 8006578:	f000 f9d8 	bl	800692c <_printf_common>
 800657c:	3001      	adds	r0, #1
 800657e:	f040 8090 	bne.w	80066a2 <_printf_float+0x1e2>
 8006582:	f04f 30ff 	mov.w	r0, #4294967295
 8006586:	b00d      	add	sp, #52	; 0x34
 8006588:	ecbd 8b02 	vpop	{d8}
 800658c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006590:	4642      	mov	r2, r8
 8006592:	464b      	mov	r3, r9
 8006594:	4640      	mov	r0, r8
 8006596:	4649      	mov	r1, r9
 8006598:	f7fa fac8 	bl	8000b2c <__aeabi_dcmpun>
 800659c:	b140      	cbz	r0, 80065b0 <_printf_float+0xf0>
 800659e:	464b      	mov	r3, r9
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	bfbc      	itt	lt
 80065a4:	232d      	movlt	r3, #45	; 0x2d
 80065a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80065aa:	487f      	ldr	r0, [pc, #508]	; (80067a8 <_printf_float+0x2e8>)
 80065ac:	4b7f      	ldr	r3, [pc, #508]	; (80067ac <_printf_float+0x2ec>)
 80065ae:	e7d1      	b.n	8006554 <_printf_float+0x94>
 80065b0:	6863      	ldr	r3, [r4, #4]
 80065b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80065b6:	9206      	str	r2, [sp, #24]
 80065b8:	1c5a      	adds	r2, r3, #1
 80065ba:	d13f      	bne.n	800663c <_printf_float+0x17c>
 80065bc:	2306      	movs	r3, #6
 80065be:	6063      	str	r3, [r4, #4]
 80065c0:	9b05      	ldr	r3, [sp, #20]
 80065c2:	6861      	ldr	r1, [r4, #4]
 80065c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80065c8:	2300      	movs	r3, #0
 80065ca:	9303      	str	r3, [sp, #12]
 80065cc:	ab0a      	add	r3, sp, #40	; 0x28
 80065ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80065d2:	ab09      	add	r3, sp, #36	; 0x24
 80065d4:	ec49 8b10 	vmov	d0, r8, r9
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	6022      	str	r2, [r4, #0]
 80065dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80065e0:	4628      	mov	r0, r5
 80065e2:	f7ff fecd 	bl	8006380 <__cvt>
 80065e6:	9b06      	ldr	r3, [sp, #24]
 80065e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80065ea:	2b47      	cmp	r3, #71	; 0x47
 80065ec:	4680      	mov	r8, r0
 80065ee:	d108      	bne.n	8006602 <_printf_float+0x142>
 80065f0:	1cc8      	adds	r0, r1, #3
 80065f2:	db02      	blt.n	80065fa <_printf_float+0x13a>
 80065f4:	6863      	ldr	r3, [r4, #4]
 80065f6:	4299      	cmp	r1, r3
 80065f8:	dd41      	ble.n	800667e <_printf_float+0x1be>
 80065fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80065fe:	fa5f fb8b 	uxtb.w	fp, fp
 8006602:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006606:	d820      	bhi.n	800664a <_printf_float+0x18a>
 8006608:	3901      	subs	r1, #1
 800660a:	465a      	mov	r2, fp
 800660c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006610:	9109      	str	r1, [sp, #36]	; 0x24
 8006612:	f7ff ff17 	bl	8006444 <__exponent>
 8006616:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006618:	1813      	adds	r3, r2, r0
 800661a:	2a01      	cmp	r2, #1
 800661c:	4681      	mov	r9, r0
 800661e:	6123      	str	r3, [r4, #16]
 8006620:	dc02      	bgt.n	8006628 <_printf_float+0x168>
 8006622:	6822      	ldr	r2, [r4, #0]
 8006624:	07d2      	lsls	r2, r2, #31
 8006626:	d501      	bpl.n	800662c <_printf_float+0x16c>
 8006628:	3301      	adds	r3, #1
 800662a:	6123      	str	r3, [r4, #16]
 800662c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006630:	2b00      	cmp	r3, #0
 8006632:	d09c      	beq.n	800656e <_printf_float+0xae>
 8006634:	232d      	movs	r3, #45	; 0x2d
 8006636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800663a:	e798      	b.n	800656e <_printf_float+0xae>
 800663c:	9a06      	ldr	r2, [sp, #24]
 800663e:	2a47      	cmp	r2, #71	; 0x47
 8006640:	d1be      	bne.n	80065c0 <_printf_float+0x100>
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1bc      	bne.n	80065c0 <_printf_float+0x100>
 8006646:	2301      	movs	r3, #1
 8006648:	e7b9      	b.n	80065be <_printf_float+0xfe>
 800664a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800664e:	d118      	bne.n	8006682 <_printf_float+0x1c2>
 8006650:	2900      	cmp	r1, #0
 8006652:	6863      	ldr	r3, [r4, #4]
 8006654:	dd0b      	ble.n	800666e <_printf_float+0x1ae>
 8006656:	6121      	str	r1, [r4, #16]
 8006658:	b913      	cbnz	r3, 8006660 <_printf_float+0x1a0>
 800665a:	6822      	ldr	r2, [r4, #0]
 800665c:	07d0      	lsls	r0, r2, #31
 800665e:	d502      	bpl.n	8006666 <_printf_float+0x1a6>
 8006660:	3301      	adds	r3, #1
 8006662:	440b      	add	r3, r1
 8006664:	6123      	str	r3, [r4, #16]
 8006666:	65a1      	str	r1, [r4, #88]	; 0x58
 8006668:	f04f 0900 	mov.w	r9, #0
 800666c:	e7de      	b.n	800662c <_printf_float+0x16c>
 800666e:	b913      	cbnz	r3, 8006676 <_printf_float+0x1b6>
 8006670:	6822      	ldr	r2, [r4, #0]
 8006672:	07d2      	lsls	r2, r2, #31
 8006674:	d501      	bpl.n	800667a <_printf_float+0x1ba>
 8006676:	3302      	adds	r3, #2
 8006678:	e7f4      	b.n	8006664 <_printf_float+0x1a4>
 800667a:	2301      	movs	r3, #1
 800667c:	e7f2      	b.n	8006664 <_printf_float+0x1a4>
 800667e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006684:	4299      	cmp	r1, r3
 8006686:	db05      	blt.n	8006694 <_printf_float+0x1d4>
 8006688:	6823      	ldr	r3, [r4, #0]
 800668a:	6121      	str	r1, [r4, #16]
 800668c:	07d8      	lsls	r0, r3, #31
 800668e:	d5ea      	bpl.n	8006666 <_printf_float+0x1a6>
 8006690:	1c4b      	adds	r3, r1, #1
 8006692:	e7e7      	b.n	8006664 <_printf_float+0x1a4>
 8006694:	2900      	cmp	r1, #0
 8006696:	bfd4      	ite	le
 8006698:	f1c1 0202 	rsble	r2, r1, #2
 800669c:	2201      	movgt	r2, #1
 800669e:	4413      	add	r3, r2
 80066a0:	e7e0      	b.n	8006664 <_printf_float+0x1a4>
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	055a      	lsls	r2, r3, #21
 80066a6:	d407      	bmi.n	80066b8 <_printf_float+0x1f8>
 80066a8:	6923      	ldr	r3, [r4, #16]
 80066aa:	4642      	mov	r2, r8
 80066ac:	4631      	mov	r1, r6
 80066ae:	4628      	mov	r0, r5
 80066b0:	47b8      	blx	r7
 80066b2:	3001      	adds	r0, #1
 80066b4:	d12c      	bne.n	8006710 <_printf_float+0x250>
 80066b6:	e764      	b.n	8006582 <_printf_float+0xc2>
 80066b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80066bc:	f240 80e0 	bls.w	8006880 <_printf_float+0x3c0>
 80066c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066c4:	2200      	movs	r2, #0
 80066c6:	2300      	movs	r3, #0
 80066c8:	f7fa f9fe 	bl	8000ac8 <__aeabi_dcmpeq>
 80066cc:	2800      	cmp	r0, #0
 80066ce:	d034      	beq.n	800673a <_printf_float+0x27a>
 80066d0:	4a37      	ldr	r2, [pc, #220]	; (80067b0 <_printf_float+0x2f0>)
 80066d2:	2301      	movs	r3, #1
 80066d4:	4631      	mov	r1, r6
 80066d6:	4628      	mov	r0, r5
 80066d8:	47b8      	blx	r7
 80066da:	3001      	adds	r0, #1
 80066dc:	f43f af51 	beq.w	8006582 <_printf_float+0xc2>
 80066e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066e4:	429a      	cmp	r2, r3
 80066e6:	db02      	blt.n	80066ee <_printf_float+0x22e>
 80066e8:	6823      	ldr	r3, [r4, #0]
 80066ea:	07d8      	lsls	r0, r3, #31
 80066ec:	d510      	bpl.n	8006710 <_printf_float+0x250>
 80066ee:	ee18 3a10 	vmov	r3, s16
 80066f2:	4652      	mov	r2, sl
 80066f4:	4631      	mov	r1, r6
 80066f6:	4628      	mov	r0, r5
 80066f8:	47b8      	blx	r7
 80066fa:	3001      	adds	r0, #1
 80066fc:	f43f af41 	beq.w	8006582 <_printf_float+0xc2>
 8006700:	f04f 0800 	mov.w	r8, #0
 8006704:	f104 091a 	add.w	r9, r4, #26
 8006708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800670a:	3b01      	subs	r3, #1
 800670c:	4543      	cmp	r3, r8
 800670e:	dc09      	bgt.n	8006724 <_printf_float+0x264>
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	079b      	lsls	r3, r3, #30
 8006714:	f100 8105 	bmi.w	8006922 <_printf_float+0x462>
 8006718:	68e0      	ldr	r0, [r4, #12]
 800671a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800671c:	4298      	cmp	r0, r3
 800671e:	bfb8      	it	lt
 8006720:	4618      	movlt	r0, r3
 8006722:	e730      	b.n	8006586 <_printf_float+0xc6>
 8006724:	2301      	movs	r3, #1
 8006726:	464a      	mov	r2, r9
 8006728:	4631      	mov	r1, r6
 800672a:	4628      	mov	r0, r5
 800672c:	47b8      	blx	r7
 800672e:	3001      	adds	r0, #1
 8006730:	f43f af27 	beq.w	8006582 <_printf_float+0xc2>
 8006734:	f108 0801 	add.w	r8, r8, #1
 8006738:	e7e6      	b.n	8006708 <_printf_float+0x248>
 800673a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800673c:	2b00      	cmp	r3, #0
 800673e:	dc39      	bgt.n	80067b4 <_printf_float+0x2f4>
 8006740:	4a1b      	ldr	r2, [pc, #108]	; (80067b0 <_printf_float+0x2f0>)
 8006742:	2301      	movs	r3, #1
 8006744:	4631      	mov	r1, r6
 8006746:	4628      	mov	r0, r5
 8006748:	47b8      	blx	r7
 800674a:	3001      	adds	r0, #1
 800674c:	f43f af19 	beq.w	8006582 <_printf_float+0xc2>
 8006750:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006754:	4313      	orrs	r3, r2
 8006756:	d102      	bne.n	800675e <_printf_float+0x29e>
 8006758:	6823      	ldr	r3, [r4, #0]
 800675a:	07d9      	lsls	r1, r3, #31
 800675c:	d5d8      	bpl.n	8006710 <_printf_float+0x250>
 800675e:	ee18 3a10 	vmov	r3, s16
 8006762:	4652      	mov	r2, sl
 8006764:	4631      	mov	r1, r6
 8006766:	4628      	mov	r0, r5
 8006768:	47b8      	blx	r7
 800676a:	3001      	adds	r0, #1
 800676c:	f43f af09 	beq.w	8006582 <_printf_float+0xc2>
 8006770:	f04f 0900 	mov.w	r9, #0
 8006774:	f104 0a1a 	add.w	sl, r4, #26
 8006778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800677a:	425b      	negs	r3, r3
 800677c:	454b      	cmp	r3, r9
 800677e:	dc01      	bgt.n	8006784 <_printf_float+0x2c4>
 8006780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006782:	e792      	b.n	80066aa <_printf_float+0x1ea>
 8006784:	2301      	movs	r3, #1
 8006786:	4652      	mov	r2, sl
 8006788:	4631      	mov	r1, r6
 800678a:	4628      	mov	r0, r5
 800678c:	47b8      	blx	r7
 800678e:	3001      	adds	r0, #1
 8006790:	f43f aef7 	beq.w	8006582 <_printf_float+0xc2>
 8006794:	f109 0901 	add.w	r9, r9, #1
 8006798:	e7ee      	b.n	8006778 <_printf_float+0x2b8>
 800679a:	bf00      	nop
 800679c:	7fefffff 	.word	0x7fefffff
 80067a0:	0800ac4c 	.word	0x0800ac4c
 80067a4:	0800ac50 	.word	0x0800ac50
 80067a8:	0800ac58 	.word	0x0800ac58
 80067ac:	0800ac54 	.word	0x0800ac54
 80067b0:	0800ac5c 	.word	0x0800ac5c
 80067b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067b8:	429a      	cmp	r2, r3
 80067ba:	bfa8      	it	ge
 80067bc:	461a      	movge	r2, r3
 80067be:	2a00      	cmp	r2, #0
 80067c0:	4691      	mov	r9, r2
 80067c2:	dc37      	bgt.n	8006834 <_printf_float+0x374>
 80067c4:	f04f 0b00 	mov.w	fp, #0
 80067c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067cc:	f104 021a 	add.w	r2, r4, #26
 80067d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067d2:	9305      	str	r3, [sp, #20]
 80067d4:	eba3 0309 	sub.w	r3, r3, r9
 80067d8:	455b      	cmp	r3, fp
 80067da:	dc33      	bgt.n	8006844 <_printf_float+0x384>
 80067dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80067e0:	429a      	cmp	r2, r3
 80067e2:	db3b      	blt.n	800685c <_printf_float+0x39c>
 80067e4:	6823      	ldr	r3, [r4, #0]
 80067e6:	07da      	lsls	r2, r3, #31
 80067e8:	d438      	bmi.n	800685c <_printf_float+0x39c>
 80067ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ec:	9a05      	ldr	r2, [sp, #20]
 80067ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80067f0:	1a9a      	subs	r2, r3, r2
 80067f2:	eba3 0901 	sub.w	r9, r3, r1
 80067f6:	4591      	cmp	r9, r2
 80067f8:	bfa8      	it	ge
 80067fa:	4691      	movge	r9, r2
 80067fc:	f1b9 0f00 	cmp.w	r9, #0
 8006800:	dc35      	bgt.n	800686e <_printf_float+0x3ae>
 8006802:	f04f 0800 	mov.w	r8, #0
 8006806:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800680a:	f104 0a1a 	add.w	sl, r4, #26
 800680e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006812:	1a9b      	subs	r3, r3, r2
 8006814:	eba3 0309 	sub.w	r3, r3, r9
 8006818:	4543      	cmp	r3, r8
 800681a:	f77f af79 	ble.w	8006710 <_printf_float+0x250>
 800681e:	2301      	movs	r3, #1
 8006820:	4652      	mov	r2, sl
 8006822:	4631      	mov	r1, r6
 8006824:	4628      	mov	r0, r5
 8006826:	47b8      	blx	r7
 8006828:	3001      	adds	r0, #1
 800682a:	f43f aeaa 	beq.w	8006582 <_printf_float+0xc2>
 800682e:	f108 0801 	add.w	r8, r8, #1
 8006832:	e7ec      	b.n	800680e <_printf_float+0x34e>
 8006834:	4613      	mov	r3, r2
 8006836:	4631      	mov	r1, r6
 8006838:	4642      	mov	r2, r8
 800683a:	4628      	mov	r0, r5
 800683c:	47b8      	blx	r7
 800683e:	3001      	adds	r0, #1
 8006840:	d1c0      	bne.n	80067c4 <_printf_float+0x304>
 8006842:	e69e      	b.n	8006582 <_printf_float+0xc2>
 8006844:	2301      	movs	r3, #1
 8006846:	4631      	mov	r1, r6
 8006848:	4628      	mov	r0, r5
 800684a:	9205      	str	r2, [sp, #20]
 800684c:	47b8      	blx	r7
 800684e:	3001      	adds	r0, #1
 8006850:	f43f ae97 	beq.w	8006582 <_printf_float+0xc2>
 8006854:	9a05      	ldr	r2, [sp, #20]
 8006856:	f10b 0b01 	add.w	fp, fp, #1
 800685a:	e7b9      	b.n	80067d0 <_printf_float+0x310>
 800685c:	ee18 3a10 	vmov	r3, s16
 8006860:	4652      	mov	r2, sl
 8006862:	4631      	mov	r1, r6
 8006864:	4628      	mov	r0, r5
 8006866:	47b8      	blx	r7
 8006868:	3001      	adds	r0, #1
 800686a:	d1be      	bne.n	80067ea <_printf_float+0x32a>
 800686c:	e689      	b.n	8006582 <_printf_float+0xc2>
 800686e:	9a05      	ldr	r2, [sp, #20]
 8006870:	464b      	mov	r3, r9
 8006872:	4442      	add	r2, r8
 8006874:	4631      	mov	r1, r6
 8006876:	4628      	mov	r0, r5
 8006878:	47b8      	blx	r7
 800687a:	3001      	adds	r0, #1
 800687c:	d1c1      	bne.n	8006802 <_printf_float+0x342>
 800687e:	e680      	b.n	8006582 <_printf_float+0xc2>
 8006880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006882:	2a01      	cmp	r2, #1
 8006884:	dc01      	bgt.n	800688a <_printf_float+0x3ca>
 8006886:	07db      	lsls	r3, r3, #31
 8006888:	d538      	bpl.n	80068fc <_printf_float+0x43c>
 800688a:	2301      	movs	r3, #1
 800688c:	4642      	mov	r2, r8
 800688e:	4631      	mov	r1, r6
 8006890:	4628      	mov	r0, r5
 8006892:	47b8      	blx	r7
 8006894:	3001      	adds	r0, #1
 8006896:	f43f ae74 	beq.w	8006582 <_printf_float+0xc2>
 800689a:	ee18 3a10 	vmov	r3, s16
 800689e:	4652      	mov	r2, sl
 80068a0:	4631      	mov	r1, r6
 80068a2:	4628      	mov	r0, r5
 80068a4:	47b8      	blx	r7
 80068a6:	3001      	adds	r0, #1
 80068a8:	f43f ae6b 	beq.w	8006582 <_printf_float+0xc2>
 80068ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068b0:	2200      	movs	r2, #0
 80068b2:	2300      	movs	r3, #0
 80068b4:	f7fa f908 	bl	8000ac8 <__aeabi_dcmpeq>
 80068b8:	b9d8      	cbnz	r0, 80068f2 <_printf_float+0x432>
 80068ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068bc:	f108 0201 	add.w	r2, r8, #1
 80068c0:	3b01      	subs	r3, #1
 80068c2:	4631      	mov	r1, r6
 80068c4:	4628      	mov	r0, r5
 80068c6:	47b8      	blx	r7
 80068c8:	3001      	adds	r0, #1
 80068ca:	d10e      	bne.n	80068ea <_printf_float+0x42a>
 80068cc:	e659      	b.n	8006582 <_printf_float+0xc2>
 80068ce:	2301      	movs	r3, #1
 80068d0:	4652      	mov	r2, sl
 80068d2:	4631      	mov	r1, r6
 80068d4:	4628      	mov	r0, r5
 80068d6:	47b8      	blx	r7
 80068d8:	3001      	adds	r0, #1
 80068da:	f43f ae52 	beq.w	8006582 <_printf_float+0xc2>
 80068de:	f108 0801 	add.w	r8, r8, #1
 80068e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068e4:	3b01      	subs	r3, #1
 80068e6:	4543      	cmp	r3, r8
 80068e8:	dcf1      	bgt.n	80068ce <_printf_float+0x40e>
 80068ea:	464b      	mov	r3, r9
 80068ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80068f0:	e6dc      	b.n	80066ac <_printf_float+0x1ec>
 80068f2:	f04f 0800 	mov.w	r8, #0
 80068f6:	f104 0a1a 	add.w	sl, r4, #26
 80068fa:	e7f2      	b.n	80068e2 <_printf_float+0x422>
 80068fc:	2301      	movs	r3, #1
 80068fe:	4642      	mov	r2, r8
 8006900:	e7df      	b.n	80068c2 <_printf_float+0x402>
 8006902:	2301      	movs	r3, #1
 8006904:	464a      	mov	r2, r9
 8006906:	4631      	mov	r1, r6
 8006908:	4628      	mov	r0, r5
 800690a:	47b8      	blx	r7
 800690c:	3001      	adds	r0, #1
 800690e:	f43f ae38 	beq.w	8006582 <_printf_float+0xc2>
 8006912:	f108 0801 	add.w	r8, r8, #1
 8006916:	68e3      	ldr	r3, [r4, #12]
 8006918:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800691a:	1a5b      	subs	r3, r3, r1
 800691c:	4543      	cmp	r3, r8
 800691e:	dcf0      	bgt.n	8006902 <_printf_float+0x442>
 8006920:	e6fa      	b.n	8006718 <_printf_float+0x258>
 8006922:	f04f 0800 	mov.w	r8, #0
 8006926:	f104 0919 	add.w	r9, r4, #25
 800692a:	e7f4      	b.n	8006916 <_printf_float+0x456>

0800692c <_printf_common>:
 800692c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006930:	4616      	mov	r6, r2
 8006932:	4699      	mov	r9, r3
 8006934:	688a      	ldr	r2, [r1, #8]
 8006936:	690b      	ldr	r3, [r1, #16]
 8006938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800693c:	4293      	cmp	r3, r2
 800693e:	bfb8      	it	lt
 8006940:	4613      	movlt	r3, r2
 8006942:	6033      	str	r3, [r6, #0]
 8006944:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006948:	4607      	mov	r7, r0
 800694a:	460c      	mov	r4, r1
 800694c:	b10a      	cbz	r2, 8006952 <_printf_common+0x26>
 800694e:	3301      	adds	r3, #1
 8006950:	6033      	str	r3, [r6, #0]
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	0699      	lsls	r1, r3, #26
 8006956:	bf42      	ittt	mi
 8006958:	6833      	ldrmi	r3, [r6, #0]
 800695a:	3302      	addmi	r3, #2
 800695c:	6033      	strmi	r3, [r6, #0]
 800695e:	6825      	ldr	r5, [r4, #0]
 8006960:	f015 0506 	ands.w	r5, r5, #6
 8006964:	d106      	bne.n	8006974 <_printf_common+0x48>
 8006966:	f104 0a19 	add.w	sl, r4, #25
 800696a:	68e3      	ldr	r3, [r4, #12]
 800696c:	6832      	ldr	r2, [r6, #0]
 800696e:	1a9b      	subs	r3, r3, r2
 8006970:	42ab      	cmp	r3, r5
 8006972:	dc26      	bgt.n	80069c2 <_printf_common+0x96>
 8006974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006978:	1e13      	subs	r3, r2, #0
 800697a:	6822      	ldr	r2, [r4, #0]
 800697c:	bf18      	it	ne
 800697e:	2301      	movne	r3, #1
 8006980:	0692      	lsls	r2, r2, #26
 8006982:	d42b      	bmi.n	80069dc <_printf_common+0xb0>
 8006984:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006988:	4649      	mov	r1, r9
 800698a:	4638      	mov	r0, r7
 800698c:	47c0      	blx	r8
 800698e:	3001      	adds	r0, #1
 8006990:	d01e      	beq.n	80069d0 <_printf_common+0xa4>
 8006992:	6823      	ldr	r3, [r4, #0]
 8006994:	68e5      	ldr	r5, [r4, #12]
 8006996:	6832      	ldr	r2, [r6, #0]
 8006998:	f003 0306 	and.w	r3, r3, #6
 800699c:	2b04      	cmp	r3, #4
 800699e:	bf08      	it	eq
 80069a0:	1aad      	subeq	r5, r5, r2
 80069a2:	68a3      	ldr	r3, [r4, #8]
 80069a4:	6922      	ldr	r2, [r4, #16]
 80069a6:	bf0c      	ite	eq
 80069a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069ac:	2500      	movne	r5, #0
 80069ae:	4293      	cmp	r3, r2
 80069b0:	bfc4      	itt	gt
 80069b2:	1a9b      	subgt	r3, r3, r2
 80069b4:	18ed      	addgt	r5, r5, r3
 80069b6:	2600      	movs	r6, #0
 80069b8:	341a      	adds	r4, #26
 80069ba:	42b5      	cmp	r5, r6
 80069bc:	d11a      	bne.n	80069f4 <_printf_common+0xc8>
 80069be:	2000      	movs	r0, #0
 80069c0:	e008      	b.n	80069d4 <_printf_common+0xa8>
 80069c2:	2301      	movs	r3, #1
 80069c4:	4652      	mov	r2, sl
 80069c6:	4649      	mov	r1, r9
 80069c8:	4638      	mov	r0, r7
 80069ca:	47c0      	blx	r8
 80069cc:	3001      	adds	r0, #1
 80069ce:	d103      	bne.n	80069d8 <_printf_common+0xac>
 80069d0:	f04f 30ff 	mov.w	r0, #4294967295
 80069d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d8:	3501      	adds	r5, #1
 80069da:	e7c6      	b.n	800696a <_printf_common+0x3e>
 80069dc:	18e1      	adds	r1, r4, r3
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	2030      	movs	r0, #48	; 0x30
 80069e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069e6:	4422      	add	r2, r4
 80069e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80069ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80069f0:	3302      	adds	r3, #2
 80069f2:	e7c7      	b.n	8006984 <_printf_common+0x58>
 80069f4:	2301      	movs	r3, #1
 80069f6:	4622      	mov	r2, r4
 80069f8:	4649      	mov	r1, r9
 80069fa:	4638      	mov	r0, r7
 80069fc:	47c0      	blx	r8
 80069fe:	3001      	adds	r0, #1
 8006a00:	d0e6      	beq.n	80069d0 <_printf_common+0xa4>
 8006a02:	3601      	adds	r6, #1
 8006a04:	e7d9      	b.n	80069ba <_printf_common+0x8e>
	...

08006a08 <_printf_i>:
 8006a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a0c:	7e0f      	ldrb	r7, [r1, #24]
 8006a0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a10:	2f78      	cmp	r7, #120	; 0x78
 8006a12:	4691      	mov	r9, r2
 8006a14:	4680      	mov	r8, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	469a      	mov	sl, r3
 8006a1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a1e:	d807      	bhi.n	8006a30 <_printf_i+0x28>
 8006a20:	2f62      	cmp	r7, #98	; 0x62
 8006a22:	d80a      	bhi.n	8006a3a <_printf_i+0x32>
 8006a24:	2f00      	cmp	r7, #0
 8006a26:	f000 80d8 	beq.w	8006bda <_printf_i+0x1d2>
 8006a2a:	2f58      	cmp	r7, #88	; 0x58
 8006a2c:	f000 80a3 	beq.w	8006b76 <_printf_i+0x16e>
 8006a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a38:	e03a      	b.n	8006ab0 <_printf_i+0xa8>
 8006a3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a3e:	2b15      	cmp	r3, #21
 8006a40:	d8f6      	bhi.n	8006a30 <_printf_i+0x28>
 8006a42:	a101      	add	r1, pc, #4	; (adr r1, 8006a48 <_printf_i+0x40>)
 8006a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a48:	08006aa1 	.word	0x08006aa1
 8006a4c:	08006ab5 	.word	0x08006ab5
 8006a50:	08006a31 	.word	0x08006a31
 8006a54:	08006a31 	.word	0x08006a31
 8006a58:	08006a31 	.word	0x08006a31
 8006a5c:	08006a31 	.word	0x08006a31
 8006a60:	08006ab5 	.word	0x08006ab5
 8006a64:	08006a31 	.word	0x08006a31
 8006a68:	08006a31 	.word	0x08006a31
 8006a6c:	08006a31 	.word	0x08006a31
 8006a70:	08006a31 	.word	0x08006a31
 8006a74:	08006bc1 	.word	0x08006bc1
 8006a78:	08006ae5 	.word	0x08006ae5
 8006a7c:	08006ba3 	.word	0x08006ba3
 8006a80:	08006a31 	.word	0x08006a31
 8006a84:	08006a31 	.word	0x08006a31
 8006a88:	08006be3 	.word	0x08006be3
 8006a8c:	08006a31 	.word	0x08006a31
 8006a90:	08006ae5 	.word	0x08006ae5
 8006a94:	08006a31 	.word	0x08006a31
 8006a98:	08006a31 	.word	0x08006a31
 8006a9c:	08006bab 	.word	0x08006bab
 8006aa0:	682b      	ldr	r3, [r5, #0]
 8006aa2:	1d1a      	adds	r2, r3, #4
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	602a      	str	r2, [r5, #0]
 8006aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006aac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e0a3      	b.n	8006bfc <_printf_i+0x1f4>
 8006ab4:	6820      	ldr	r0, [r4, #0]
 8006ab6:	6829      	ldr	r1, [r5, #0]
 8006ab8:	0606      	lsls	r6, r0, #24
 8006aba:	f101 0304 	add.w	r3, r1, #4
 8006abe:	d50a      	bpl.n	8006ad6 <_printf_i+0xce>
 8006ac0:	680e      	ldr	r6, [r1, #0]
 8006ac2:	602b      	str	r3, [r5, #0]
 8006ac4:	2e00      	cmp	r6, #0
 8006ac6:	da03      	bge.n	8006ad0 <_printf_i+0xc8>
 8006ac8:	232d      	movs	r3, #45	; 0x2d
 8006aca:	4276      	negs	r6, r6
 8006acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ad0:	485e      	ldr	r0, [pc, #376]	; (8006c4c <_printf_i+0x244>)
 8006ad2:	230a      	movs	r3, #10
 8006ad4:	e019      	b.n	8006b0a <_printf_i+0x102>
 8006ad6:	680e      	ldr	r6, [r1, #0]
 8006ad8:	602b      	str	r3, [r5, #0]
 8006ada:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ade:	bf18      	it	ne
 8006ae0:	b236      	sxthne	r6, r6
 8006ae2:	e7ef      	b.n	8006ac4 <_printf_i+0xbc>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	6820      	ldr	r0, [r4, #0]
 8006ae8:	1d19      	adds	r1, r3, #4
 8006aea:	6029      	str	r1, [r5, #0]
 8006aec:	0601      	lsls	r1, r0, #24
 8006aee:	d501      	bpl.n	8006af4 <_printf_i+0xec>
 8006af0:	681e      	ldr	r6, [r3, #0]
 8006af2:	e002      	b.n	8006afa <_printf_i+0xf2>
 8006af4:	0646      	lsls	r6, r0, #25
 8006af6:	d5fb      	bpl.n	8006af0 <_printf_i+0xe8>
 8006af8:	881e      	ldrh	r6, [r3, #0]
 8006afa:	4854      	ldr	r0, [pc, #336]	; (8006c4c <_printf_i+0x244>)
 8006afc:	2f6f      	cmp	r7, #111	; 0x6f
 8006afe:	bf0c      	ite	eq
 8006b00:	2308      	moveq	r3, #8
 8006b02:	230a      	movne	r3, #10
 8006b04:	2100      	movs	r1, #0
 8006b06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b0a:	6865      	ldr	r5, [r4, #4]
 8006b0c:	60a5      	str	r5, [r4, #8]
 8006b0e:	2d00      	cmp	r5, #0
 8006b10:	bfa2      	ittt	ge
 8006b12:	6821      	ldrge	r1, [r4, #0]
 8006b14:	f021 0104 	bicge.w	r1, r1, #4
 8006b18:	6021      	strge	r1, [r4, #0]
 8006b1a:	b90e      	cbnz	r6, 8006b20 <_printf_i+0x118>
 8006b1c:	2d00      	cmp	r5, #0
 8006b1e:	d04d      	beq.n	8006bbc <_printf_i+0x1b4>
 8006b20:	4615      	mov	r5, r2
 8006b22:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b26:	fb03 6711 	mls	r7, r3, r1, r6
 8006b2a:	5dc7      	ldrb	r7, [r0, r7]
 8006b2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b30:	4637      	mov	r7, r6
 8006b32:	42bb      	cmp	r3, r7
 8006b34:	460e      	mov	r6, r1
 8006b36:	d9f4      	bls.n	8006b22 <_printf_i+0x11a>
 8006b38:	2b08      	cmp	r3, #8
 8006b3a:	d10b      	bne.n	8006b54 <_printf_i+0x14c>
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	07de      	lsls	r6, r3, #31
 8006b40:	d508      	bpl.n	8006b54 <_printf_i+0x14c>
 8006b42:	6923      	ldr	r3, [r4, #16]
 8006b44:	6861      	ldr	r1, [r4, #4]
 8006b46:	4299      	cmp	r1, r3
 8006b48:	bfde      	ittt	le
 8006b4a:	2330      	movle	r3, #48	; 0x30
 8006b4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b54:	1b52      	subs	r2, r2, r5
 8006b56:	6122      	str	r2, [r4, #16]
 8006b58:	f8cd a000 	str.w	sl, [sp]
 8006b5c:	464b      	mov	r3, r9
 8006b5e:	aa03      	add	r2, sp, #12
 8006b60:	4621      	mov	r1, r4
 8006b62:	4640      	mov	r0, r8
 8006b64:	f7ff fee2 	bl	800692c <_printf_common>
 8006b68:	3001      	adds	r0, #1
 8006b6a:	d14c      	bne.n	8006c06 <_printf_i+0x1fe>
 8006b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b70:	b004      	add	sp, #16
 8006b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b76:	4835      	ldr	r0, [pc, #212]	; (8006c4c <_printf_i+0x244>)
 8006b78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b7c:	6829      	ldr	r1, [r5, #0]
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b84:	6029      	str	r1, [r5, #0]
 8006b86:	061d      	lsls	r5, r3, #24
 8006b88:	d514      	bpl.n	8006bb4 <_printf_i+0x1ac>
 8006b8a:	07df      	lsls	r7, r3, #31
 8006b8c:	bf44      	itt	mi
 8006b8e:	f043 0320 	orrmi.w	r3, r3, #32
 8006b92:	6023      	strmi	r3, [r4, #0]
 8006b94:	b91e      	cbnz	r6, 8006b9e <_printf_i+0x196>
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	f023 0320 	bic.w	r3, r3, #32
 8006b9c:	6023      	str	r3, [r4, #0]
 8006b9e:	2310      	movs	r3, #16
 8006ba0:	e7b0      	b.n	8006b04 <_printf_i+0xfc>
 8006ba2:	6823      	ldr	r3, [r4, #0]
 8006ba4:	f043 0320 	orr.w	r3, r3, #32
 8006ba8:	6023      	str	r3, [r4, #0]
 8006baa:	2378      	movs	r3, #120	; 0x78
 8006bac:	4828      	ldr	r0, [pc, #160]	; (8006c50 <_printf_i+0x248>)
 8006bae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bb2:	e7e3      	b.n	8006b7c <_printf_i+0x174>
 8006bb4:	0659      	lsls	r1, r3, #25
 8006bb6:	bf48      	it	mi
 8006bb8:	b2b6      	uxthmi	r6, r6
 8006bba:	e7e6      	b.n	8006b8a <_printf_i+0x182>
 8006bbc:	4615      	mov	r5, r2
 8006bbe:	e7bb      	b.n	8006b38 <_printf_i+0x130>
 8006bc0:	682b      	ldr	r3, [r5, #0]
 8006bc2:	6826      	ldr	r6, [r4, #0]
 8006bc4:	6961      	ldr	r1, [r4, #20]
 8006bc6:	1d18      	adds	r0, r3, #4
 8006bc8:	6028      	str	r0, [r5, #0]
 8006bca:	0635      	lsls	r5, r6, #24
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	d501      	bpl.n	8006bd4 <_printf_i+0x1cc>
 8006bd0:	6019      	str	r1, [r3, #0]
 8006bd2:	e002      	b.n	8006bda <_printf_i+0x1d2>
 8006bd4:	0670      	lsls	r0, r6, #25
 8006bd6:	d5fb      	bpl.n	8006bd0 <_printf_i+0x1c8>
 8006bd8:	8019      	strh	r1, [r3, #0]
 8006bda:	2300      	movs	r3, #0
 8006bdc:	6123      	str	r3, [r4, #16]
 8006bde:	4615      	mov	r5, r2
 8006be0:	e7ba      	b.n	8006b58 <_printf_i+0x150>
 8006be2:	682b      	ldr	r3, [r5, #0]
 8006be4:	1d1a      	adds	r2, r3, #4
 8006be6:	602a      	str	r2, [r5, #0]
 8006be8:	681d      	ldr	r5, [r3, #0]
 8006bea:	6862      	ldr	r2, [r4, #4]
 8006bec:	2100      	movs	r1, #0
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f7f9 faf6 	bl	80001e0 <memchr>
 8006bf4:	b108      	cbz	r0, 8006bfa <_printf_i+0x1f2>
 8006bf6:	1b40      	subs	r0, r0, r5
 8006bf8:	6060      	str	r0, [r4, #4]
 8006bfa:	6863      	ldr	r3, [r4, #4]
 8006bfc:	6123      	str	r3, [r4, #16]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c04:	e7a8      	b.n	8006b58 <_printf_i+0x150>
 8006c06:	6923      	ldr	r3, [r4, #16]
 8006c08:	462a      	mov	r2, r5
 8006c0a:	4649      	mov	r1, r9
 8006c0c:	4640      	mov	r0, r8
 8006c0e:	47d0      	blx	sl
 8006c10:	3001      	adds	r0, #1
 8006c12:	d0ab      	beq.n	8006b6c <_printf_i+0x164>
 8006c14:	6823      	ldr	r3, [r4, #0]
 8006c16:	079b      	lsls	r3, r3, #30
 8006c18:	d413      	bmi.n	8006c42 <_printf_i+0x23a>
 8006c1a:	68e0      	ldr	r0, [r4, #12]
 8006c1c:	9b03      	ldr	r3, [sp, #12]
 8006c1e:	4298      	cmp	r0, r3
 8006c20:	bfb8      	it	lt
 8006c22:	4618      	movlt	r0, r3
 8006c24:	e7a4      	b.n	8006b70 <_printf_i+0x168>
 8006c26:	2301      	movs	r3, #1
 8006c28:	4632      	mov	r2, r6
 8006c2a:	4649      	mov	r1, r9
 8006c2c:	4640      	mov	r0, r8
 8006c2e:	47d0      	blx	sl
 8006c30:	3001      	adds	r0, #1
 8006c32:	d09b      	beq.n	8006b6c <_printf_i+0x164>
 8006c34:	3501      	adds	r5, #1
 8006c36:	68e3      	ldr	r3, [r4, #12]
 8006c38:	9903      	ldr	r1, [sp, #12]
 8006c3a:	1a5b      	subs	r3, r3, r1
 8006c3c:	42ab      	cmp	r3, r5
 8006c3e:	dcf2      	bgt.n	8006c26 <_printf_i+0x21e>
 8006c40:	e7eb      	b.n	8006c1a <_printf_i+0x212>
 8006c42:	2500      	movs	r5, #0
 8006c44:	f104 0619 	add.w	r6, r4, #25
 8006c48:	e7f5      	b.n	8006c36 <_printf_i+0x22e>
 8006c4a:	bf00      	nop
 8006c4c:	0800ac5e 	.word	0x0800ac5e
 8006c50:	0800ac6f 	.word	0x0800ac6f

08006c54 <_scanf_float>:
 8006c54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c58:	b087      	sub	sp, #28
 8006c5a:	4617      	mov	r7, r2
 8006c5c:	9303      	str	r3, [sp, #12]
 8006c5e:	688b      	ldr	r3, [r1, #8]
 8006c60:	1e5a      	subs	r2, r3, #1
 8006c62:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006c66:	bf83      	ittte	hi
 8006c68:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006c6c:	195b      	addhi	r3, r3, r5
 8006c6e:	9302      	strhi	r3, [sp, #8]
 8006c70:	2300      	movls	r3, #0
 8006c72:	bf86      	itte	hi
 8006c74:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006c78:	608b      	strhi	r3, [r1, #8]
 8006c7a:	9302      	strls	r3, [sp, #8]
 8006c7c:	680b      	ldr	r3, [r1, #0]
 8006c7e:	468b      	mov	fp, r1
 8006c80:	2500      	movs	r5, #0
 8006c82:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006c86:	f84b 3b1c 	str.w	r3, [fp], #28
 8006c8a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006c8e:	4680      	mov	r8, r0
 8006c90:	460c      	mov	r4, r1
 8006c92:	465e      	mov	r6, fp
 8006c94:	46aa      	mov	sl, r5
 8006c96:	46a9      	mov	r9, r5
 8006c98:	9501      	str	r5, [sp, #4]
 8006c9a:	68a2      	ldr	r2, [r4, #8]
 8006c9c:	b152      	cbz	r2, 8006cb4 <_scanf_float+0x60>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	2b4e      	cmp	r3, #78	; 0x4e
 8006ca4:	d864      	bhi.n	8006d70 <_scanf_float+0x11c>
 8006ca6:	2b40      	cmp	r3, #64	; 0x40
 8006ca8:	d83c      	bhi.n	8006d24 <_scanf_float+0xd0>
 8006caa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006cae:	b2c8      	uxtb	r0, r1
 8006cb0:	280e      	cmp	r0, #14
 8006cb2:	d93a      	bls.n	8006d2a <_scanf_float+0xd6>
 8006cb4:	f1b9 0f00 	cmp.w	r9, #0
 8006cb8:	d003      	beq.n	8006cc2 <_scanf_float+0x6e>
 8006cba:	6823      	ldr	r3, [r4, #0]
 8006cbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cc6:	f1ba 0f01 	cmp.w	sl, #1
 8006cca:	f200 8113 	bhi.w	8006ef4 <_scanf_float+0x2a0>
 8006cce:	455e      	cmp	r6, fp
 8006cd0:	f200 8105 	bhi.w	8006ede <_scanf_float+0x28a>
 8006cd4:	2501      	movs	r5, #1
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	b007      	add	sp, #28
 8006cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cde:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006ce2:	2a0d      	cmp	r2, #13
 8006ce4:	d8e6      	bhi.n	8006cb4 <_scanf_float+0x60>
 8006ce6:	a101      	add	r1, pc, #4	; (adr r1, 8006cec <_scanf_float+0x98>)
 8006ce8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006cec:	08006e2b 	.word	0x08006e2b
 8006cf0:	08006cb5 	.word	0x08006cb5
 8006cf4:	08006cb5 	.word	0x08006cb5
 8006cf8:	08006cb5 	.word	0x08006cb5
 8006cfc:	08006e8b 	.word	0x08006e8b
 8006d00:	08006e63 	.word	0x08006e63
 8006d04:	08006cb5 	.word	0x08006cb5
 8006d08:	08006cb5 	.word	0x08006cb5
 8006d0c:	08006e39 	.word	0x08006e39
 8006d10:	08006cb5 	.word	0x08006cb5
 8006d14:	08006cb5 	.word	0x08006cb5
 8006d18:	08006cb5 	.word	0x08006cb5
 8006d1c:	08006cb5 	.word	0x08006cb5
 8006d20:	08006df1 	.word	0x08006df1
 8006d24:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006d28:	e7db      	b.n	8006ce2 <_scanf_float+0x8e>
 8006d2a:	290e      	cmp	r1, #14
 8006d2c:	d8c2      	bhi.n	8006cb4 <_scanf_float+0x60>
 8006d2e:	a001      	add	r0, pc, #4	; (adr r0, 8006d34 <_scanf_float+0xe0>)
 8006d30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d34:	08006de3 	.word	0x08006de3
 8006d38:	08006cb5 	.word	0x08006cb5
 8006d3c:	08006de3 	.word	0x08006de3
 8006d40:	08006e77 	.word	0x08006e77
 8006d44:	08006cb5 	.word	0x08006cb5
 8006d48:	08006d91 	.word	0x08006d91
 8006d4c:	08006dcd 	.word	0x08006dcd
 8006d50:	08006dcd 	.word	0x08006dcd
 8006d54:	08006dcd 	.word	0x08006dcd
 8006d58:	08006dcd 	.word	0x08006dcd
 8006d5c:	08006dcd 	.word	0x08006dcd
 8006d60:	08006dcd 	.word	0x08006dcd
 8006d64:	08006dcd 	.word	0x08006dcd
 8006d68:	08006dcd 	.word	0x08006dcd
 8006d6c:	08006dcd 	.word	0x08006dcd
 8006d70:	2b6e      	cmp	r3, #110	; 0x6e
 8006d72:	d809      	bhi.n	8006d88 <_scanf_float+0x134>
 8006d74:	2b60      	cmp	r3, #96	; 0x60
 8006d76:	d8b2      	bhi.n	8006cde <_scanf_float+0x8a>
 8006d78:	2b54      	cmp	r3, #84	; 0x54
 8006d7a:	d077      	beq.n	8006e6c <_scanf_float+0x218>
 8006d7c:	2b59      	cmp	r3, #89	; 0x59
 8006d7e:	d199      	bne.n	8006cb4 <_scanf_float+0x60>
 8006d80:	2d07      	cmp	r5, #7
 8006d82:	d197      	bne.n	8006cb4 <_scanf_float+0x60>
 8006d84:	2508      	movs	r5, #8
 8006d86:	e029      	b.n	8006ddc <_scanf_float+0x188>
 8006d88:	2b74      	cmp	r3, #116	; 0x74
 8006d8a:	d06f      	beq.n	8006e6c <_scanf_float+0x218>
 8006d8c:	2b79      	cmp	r3, #121	; 0x79
 8006d8e:	e7f6      	b.n	8006d7e <_scanf_float+0x12a>
 8006d90:	6821      	ldr	r1, [r4, #0]
 8006d92:	05c8      	lsls	r0, r1, #23
 8006d94:	d51a      	bpl.n	8006dcc <_scanf_float+0x178>
 8006d96:	9b02      	ldr	r3, [sp, #8]
 8006d98:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006d9c:	6021      	str	r1, [r4, #0]
 8006d9e:	f109 0901 	add.w	r9, r9, #1
 8006da2:	b11b      	cbz	r3, 8006dac <_scanf_float+0x158>
 8006da4:	3b01      	subs	r3, #1
 8006da6:	3201      	adds	r2, #1
 8006da8:	9302      	str	r3, [sp, #8]
 8006daa:	60a2      	str	r2, [r4, #8]
 8006dac:	68a3      	ldr	r3, [r4, #8]
 8006dae:	3b01      	subs	r3, #1
 8006db0:	60a3      	str	r3, [r4, #8]
 8006db2:	6923      	ldr	r3, [r4, #16]
 8006db4:	3301      	adds	r3, #1
 8006db6:	6123      	str	r3, [r4, #16]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	607b      	str	r3, [r7, #4]
 8006dc0:	f340 8084 	ble.w	8006ecc <_scanf_float+0x278>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	603b      	str	r3, [r7, #0]
 8006dca:	e766      	b.n	8006c9a <_scanf_float+0x46>
 8006dcc:	eb1a 0f05 	cmn.w	sl, r5
 8006dd0:	f47f af70 	bne.w	8006cb4 <_scanf_float+0x60>
 8006dd4:	6822      	ldr	r2, [r4, #0]
 8006dd6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006dda:	6022      	str	r2, [r4, #0]
 8006ddc:	f806 3b01 	strb.w	r3, [r6], #1
 8006de0:	e7e4      	b.n	8006dac <_scanf_float+0x158>
 8006de2:	6822      	ldr	r2, [r4, #0]
 8006de4:	0610      	lsls	r0, r2, #24
 8006de6:	f57f af65 	bpl.w	8006cb4 <_scanf_float+0x60>
 8006dea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006dee:	e7f4      	b.n	8006dda <_scanf_float+0x186>
 8006df0:	f1ba 0f00 	cmp.w	sl, #0
 8006df4:	d10e      	bne.n	8006e14 <_scanf_float+0x1c0>
 8006df6:	f1b9 0f00 	cmp.w	r9, #0
 8006dfa:	d10e      	bne.n	8006e1a <_scanf_float+0x1c6>
 8006dfc:	6822      	ldr	r2, [r4, #0]
 8006dfe:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006e02:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006e06:	d108      	bne.n	8006e1a <_scanf_float+0x1c6>
 8006e08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e0c:	6022      	str	r2, [r4, #0]
 8006e0e:	f04f 0a01 	mov.w	sl, #1
 8006e12:	e7e3      	b.n	8006ddc <_scanf_float+0x188>
 8006e14:	f1ba 0f02 	cmp.w	sl, #2
 8006e18:	d055      	beq.n	8006ec6 <_scanf_float+0x272>
 8006e1a:	2d01      	cmp	r5, #1
 8006e1c:	d002      	beq.n	8006e24 <_scanf_float+0x1d0>
 8006e1e:	2d04      	cmp	r5, #4
 8006e20:	f47f af48 	bne.w	8006cb4 <_scanf_float+0x60>
 8006e24:	3501      	adds	r5, #1
 8006e26:	b2ed      	uxtb	r5, r5
 8006e28:	e7d8      	b.n	8006ddc <_scanf_float+0x188>
 8006e2a:	f1ba 0f01 	cmp.w	sl, #1
 8006e2e:	f47f af41 	bne.w	8006cb4 <_scanf_float+0x60>
 8006e32:	f04f 0a02 	mov.w	sl, #2
 8006e36:	e7d1      	b.n	8006ddc <_scanf_float+0x188>
 8006e38:	b97d      	cbnz	r5, 8006e5a <_scanf_float+0x206>
 8006e3a:	f1b9 0f00 	cmp.w	r9, #0
 8006e3e:	f47f af3c 	bne.w	8006cba <_scanf_float+0x66>
 8006e42:	6822      	ldr	r2, [r4, #0]
 8006e44:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006e48:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006e4c:	f47f af39 	bne.w	8006cc2 <_scanf_float+0x6e>
 8006e50:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e54:	6022      	str	r2, [r4, #0]
 8006e56:	2501      	movs	r5, #1
 8006e58:	e7c0      	b.n	8006ddc <_scanf_float+0x188>
 8006e5a:	2d03      	cmp	r5, #3
 8006e5c:	d0e2      	beq.n	8006e24 <_scanf_float+0x1d0>
 8006e5e:	2d05      	cmp	r5, #5
 8006e60:	e7de      	b.n	8006e20 <_scanf_float+0x1cc>
 8006e62:	2d02      	cmp	r5, #2
 8006e64:	f47f af26 	bne.w	8006cb4 <_scanf_float+0x60>
 8006e68:	2503      	movs	r5, #3
 8006e6a:	e7b7      	b.n	8006ddc <_scanf_float+0x188>
 8006e6c:	2d06      	cmp	r5, #6
 8006e6e:	f47f af21 	bne.w	8006cb4 <_scanf_float+0x60>
 8006e72:	2507      	movs	r5, #7
 8006e74:	e7b2      	b.n	8006ddc <_scanf_float+0x188>
 8006e76:	6822      	ldr	r2, [r4, #0]
 8006e78:	0591      	lsls	r1, r2, #22
 8006e7a:	f57f af1b 	bpl.w	8006cb4 <_scanf_float+0x60>
 8006e7e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006e82:	6022      	str	r2, [r4, #0]
 8006e84:	f8cd 9004 	str.w	r9, [sp, #4]
 8006e88:	e7a8      	b.n	8006ddc <_scanf_float+0x188>
 8006e8a:	6822      	ldr	r2, [r4, #0]
 8006e8c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006e90:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006e94:	d006      	beq.n	8006ea4 <_scanf_float+0x250>
 8006e96:	0550      	lsls	r0, r2, #21
 8006e98:	f57f af0c 	bpl.w	8006cb4 <_scanf_float+0x60>
 8006e9c:	f1b9 0f00 	cmp.w	r9, #0
 8006ea0:	f43f af0f 	beq.w	8006cc2 <_scanf_float+0x6e>
 8006ea4:	0591      	lsls	r1, r2, #22
 8006ea6:	bf58      	it	pl
 8006ea8:	9901      	ldrpl	r1, [sp, #4]
 8006eaa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006eae:	bf58      	it	pl
 8006eb0:	eba9 0101 	subpl.w	r1, r9, r1
 8006eb4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006eb8:	bf58      	it	pl
 8006eba:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006ebe:	6022      	str	r2, [r4, #0]
 8006ec0:	f04f 0900 	mov.w	r9, #0
 8006ec4:	e78a      	b.n	8006ddc <_scanf_float+0x188>
 8006ec6:	f04f 0a03 	mov.w	sl, #3
 8006eca:	e787      	b.n	8006ddc <_scanf_float+0x188>
 8006ecc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006ed0:	4639      	mov	r1, r7
 8006ed2:	4640      	mov	r0, r8
 8006ed4:	4798      	blx	r3
 8006ed6:	2800      	cmp	r0, #0
 8006ed8:	f43f aedf 	beq.w	8006c9a <_scanf_float+0x46>
 8006edc:	e6ea      	b.n	8006cb4 <_scanf_float+0x60>
 8006ede:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ee2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ee6:	463a      	mov	r2, r7
 8006ee8:	4640      	mov	r0, r8
 8006eea:	4798      	blx	r3
 8006eec:	6923      	ldr	r3, [r4, #16]
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	6123      	str	r3, [r4, #16]
 8006ef2:	e6ec      	b.n	8006cce <_scanf_float+0x7a>
 8006ef4:	1e6b      	subs	r3, r5, #1
 8006ef6:	2b06      	cmp	r3, #6
 8006ef8:	d825      	bhi.n	8006f46 <_scanf_float+0x2f2>
 8006efa:	2d02      	cmp	r5, #2
 8006efc:	d836      	bhi.n	8006f6c <_scanf_float+0x318>
 8006efe:	455e      	cmp	r6, fp
 8006f00:	f67f aee8 	bls.w	8006cd4 <_scanf_float+0x80>
 8006f04:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f08:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f0c:	463a      	mov	r2, r7
 8006f0e:	4640      	mov	r0, r8
 8006f10:	4798      	blx	r3
 8006f12:	6923      	ldr	r3, [r4, #16]
 8006f14:	3b01      	subs	r3, #1
 8006f16:	6123      	str	r3, [r4, #16]
 8006f18:	e7f1      	b.n	8006efe <_scanf_float+0x2aa>
 8006f1a:	9802      	ldr	r0, [sp, #8]
 8006f1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f20:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006f24:	9002      	str	r0, [sp, #8]
 8006f26:	463a      	mov	r2, r7
 8006f28:	4640      	mov	r0, r8
 8006f2a:	4798      	blx	r3
 8006f2c:	6923      	ldr	r3, [r4, #16]
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	6123      	str	r3, [r4, #16]
 8006f32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f36:	fa5f fa8a 	uxtb.w	sl, sl
 8006f3a:	f1ba 0f02 	cmp.w	sl, #2
 8006f3e:	d1ec      	bne.n	8006f1a <_scanf_float+0x2c6>
 8006f40:	3d03      	subs	r5, #3
 8006f42:	b2ed      	uxtb	r5, r5
 8006f44:	1b76      	subs	r6, r6, r5
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	05da      	lsls	r2, r3, #23
 8006f4a:	d52f      	bpl.n	8006fac <_scanf_float+0x358>
 8006f4c:	055b      	lsls	r3, r3, #21
 8006f4e:	d510      	bpl.n	8006f72 <_scanf_float+0x31e>
 8006f50:	455e      	cmp	r6, fp
 8006f52:	f67f aebf 	bls.w	8006cd4 <_scanf_float+0x80>
 8006f56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f5e:	463a      	mov	r2, r7
 8006f60:	4640      	mov	r0, r8
 8006f62:	4798      	blx	r3
 8006f64:	6923      	ldr	r3, [r4, #16]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	6123      	str	r3, [r4, #16]
 8006f6a:	e7f1      	b.n	8006f50 <_scanf_float+0x2fc>
 8006f6c:	46aa      	mov	sl, r5
 8006f6e:	9602      	str	r6, [sp, #8]
 8006f70:	e7df      	b.n	8006f32 <_scanf_float+0x2de>
 8006f72:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f76:	6923      	ldr	r3, [r4, #16]
 8006f78:	2965      	cmp	r1, #101	; 0x65
 8006f7a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f7e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006f82:	6123      	str	r3, [r4, #16]
 8006f84:	d00c      	beq.n	8006fa0 <_scanf_float+0x34c>
 8006f86:	2945      	cmp	r1, #69	; 0x45
 8006f88:	d00a      	beq.n	8006fa0 <_scanf_float+0x34c>
 8006f8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f8e:	463a      	mov	r2, r7
 8006f90:	4640      	mov	r0, r8
 8006f92:	4798      	blx	r3
 8006f94:	6923      	ldr	r3, [r4, #16]
 8006f96:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	1eb5      	subs	r5, r6, #2
 8006f9e:	6123      	str	r3, [r4, #16]
 8006fa0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fa4:	463a      	mov	r2, r7
 8006fa6:	4640      	mov	r0, r8
 8006fa8:	4798      	blx	r3
 8006faa:	462e      	mov	r6, r5
 8006fac:	6825      	ldr	r5, [r4, #0]
 8006fae:	f015 0510 	ands.w	r5, r5, #16
 8006fb2:	d159      	bne.n	8007068 <_scanf_float+0x414>
 8006fb4:	7035      	strb	r5, [r6, #0]
 8006fb6:	6823      	ldr	r3, [r4, #0]
 8006fb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fc0:	d11b      	bne.n	8006ffa <_scanf_float+0x3a6>
 8006fc2:	9b01      	ldr	r3, [sp, #4]
 8006fc4:	454b      	cmp	r3, r9
 8006fc6:	eba3 0209 	sub.w	r2, r3, r9
 8006fca:	d123      	bne.n	8007014 <_scanf_float+0x3c0>
 8006fcc:	2200      	movs	r2, #0
 8006fce:	4659      	mov	r1, fp
 8006fd0:	4640      	mov	r0, r8
 8006fd2:	f000 fea7 	bl	8007d24 <_strtod_r>
 8006fd6:	6822      	ldr	r2, [r4, #0]
 8006fd8:	9b03      	ldr	r3, [sp, #12]
 8006fda:	f012 0f02 	tst.w	r2, #2
 8006fde:	ec57 6b10 	vmov	r6, r7, d0
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	d021      	beq.n	800702a <_scanf_float+0x3d6>
 8006fe6:	9903      	ldr	r1, [sp, #12]
 8006fe8:	1d1a      	adds	r2, r3, #4
 8006fea:	600a      	str	r2, [r1, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	e9c3 6700 	strd	r6, r7, [r3]
 8006ff2:	68e3      	ldr	r3, [r4, #12]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	60e3      	str	r3, [r4, #12]
 8006ff8:	e66d      	b.n	8006cd6 <_scanf_float+0x82>
 8006ffa:	9b04      	ldr	r3, [sp, #16]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0e5      	beq.n	8006fcc <_scanf_float+0x378>
 8007000:	9905      	ldr	r1, [sp, #20]
 8007002:	230a      	movs	r3, #10
 8007004:	462a      	mov	r2, r5
 8007006:	3101      	adds	r1, #1
 8007008:	4640      	mov	r0, r8
 800700a:	f000 ff13 	bl	8007e34 <_strtol_r>
 800700e:	9b04      	ldr	r3, [sp, #16]
 8007010:	9e05      	ldr	r6, [sp, #20]
 8007012:	1ac2      	subs	r2, r0, r3
 8007014:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007018:	429e      	cmp	r6, r3
 800701a:	bf28      	it	cs
 800701c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007020:	4912      	ldr	r1, [pc, #72]	; (800706c <_scanf_float+0x418>)
 8007022:	4630      	mov	r0, r6
 8007024:	f000 f83c 	bl	80070a0 <siprintf>
 8007028:	e7d0      	b.n	8006fcc <_scanf_float+0x378>
 800702a:	9903      	ldr	r1, [sp, #12]
 800702c:	f012 0f04 	tst.w	r2, #4
 8007030:	f103 0204 	add.w	r2, r3, #4
 8007034:	600a      	str	r2, [r1, #0]
 8007036:	d1d9      	bne.n	8006fec <_scanf_float+0x398>
 8007038:	f8d3 8000 	ldr.w	r8, [r3]
 800703c:	ee10 2a10 	vmov	r2, s0
 8007040:	ee10 0a10 	vmov	r0, s0
 8007044:	463b      	mov	r3, r7
 8007046:	4639      	mov	r1, r7
 8007048:	f7f9 fd70 	bl	8000b2c <__aeabi_dcmpun>
 800704c:	b128      	cbz	r0, 800705a <_scanf_float+0x406>
 800704e:	4808      	ldr	r0, [pc, #32]	; (8007070 <_scanf_float+0x41c>)
 8007050:	f000 f820 	bl	8007094 <nanf>
 8007054:	ed88 0a00 	vstr	s0, [r8]
 8007058:	e7cb      	b.n	8006ff2 <_scanf_float+0x39e>
 800705a:	4630      	mov	r0, r6
 800705c:	4639      	mov	r1, r7
 800705e:	f7f9 fdc3 	bl	8000be8 <__aeabi_d2f>
 8007062:	f8c8 0000 	str.w	r0, [r8]
 8007066:	e7c4      	b.n	8006ff2 <_scanf_float+0x39e>
 8007068:	2500      	movs	r5, #0
 800706a:	e634      	b.n	8006cd6 <_scanf_float+0x82>
 800706c:	0800ac80 	.word	0x0800ac80
 8007070:	0800b088 	.word	0x0800b088

08007074 <_sbrk_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	4d06      	ldr	r5, [pc, #24]	; (8007090 <_sbrk_r+0x1c>)
 8007078:	2300      	movs	r3, #0
 800707a:	4604      	mov	r4, r0
 800707c:	4608      	mov	r0, r1
 800707e:	602b      	str	r3, [r5, #0]
 8007080:	f7fa fe3c 	bl	8001cfc <_sbrk>
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	d102      	bne.n	800708e <_sbrk_r+0x1a>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	b103      	cbz	r3, 800708e <_sbrk_r+0x1a>
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	2000438c 	.word	0x2000438c

08007094 <nanf>:
 8007094:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800709c <nanf+0x8>
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	7fc00000 	.word	0x7fc00000

080070a0 <siprintf>:
 80070a0:	b40e      	push	{r1, r2, r3}
 80070a2:	b500      	push	{lr}
 80070a4:	b09c      	sub	sp, #112	; 0x70
 80070a6:	ab1d      	add	r3, sp, #116	; 0x74
 80070a8:	9002      	str	r0, [sp, #8]
 80070aa:	9006      	str	r0, [sp, #24]
 80070ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070b0:	4809      	ldr	r0, [pc, #36]	; (80070d8 <siprintf+0x38>)
 80070b2:	9107      	str	r1, [sp, #28]
 80070b4:	9104      	str	r1, [sp, #16]
 80070b6:	4909      	ldr	r1, [pc, #36]	; (80070dc <siprintf+0x3c>)
 80070b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070bc:	9105      	str	r1, [sp, #20]
 80070be:	6800      	ldr	r0, [r0, #0]
 80070c0:	9301      	str	r3, [sp, #4]
 80070c2:	a902      	add	r1, sp, #8
 80070c4:	f002 fe24 	bl	8009d10 <_svfiprintf_r>
 80070c8:	9b02      	ldr	r3, [sp, #8]
 80070ca:	2200      	movs	r2, #0
 80070cc:	701a      	strb	r2, [r3, #0]
 80070ce:	b01c      	add	sp, #112	; 0x70
 80070d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80070d4:	b003      	add	sp, #12
 80070d6:	4770      	bx	lr
 80070d8:	20000010 	.word	0x20000010
 80070dc:	ffff0208 	.word	0xffff0208

080070e0 <sulp>:
 80070e0:	b570      	push	{r4, r5, r6, lr}
 80070e2:	4604      	mov	r4, r0
 80070e4:	460d      	mov	r5, r1
 80070e6:	ec45 4b10 	vmov	d0, r4, r5
 80070ea:	4616      	mov	r6, r2
 80070ec:	f002 fc50 	bl	8009990 <__ulp>
 80070f0:	ec51 0b10 	vmov	r0, r1, d0
 80070f4:	b17e      	cbz	r6, 8007116 <sulp+0x36>
 80070f6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80070fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80070fe:	2b00      	cmp	r3, #0
 8007100:	dd09      	ble.n	8007116 <sulp+0x36>
 8007102:	051b      	lsls	r3, r3, #20
 8007104:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007108:	2400      	movs	r4, #0
 800710a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800710e:	4622      	mov	r2, r4
 8007110:	462b      	mov	r3, r5
 8007112:	f7f9 fa71 	bl	80005f8 <__aeabi_dmul>
 8007116:	bd70      	pop	{r4, r5, r6, pc}

08007118 <_strtod_l>:
 8007118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800711c:	ed2d 8b02 	vpush	{d8}
 8007120:	b09d      	sub	sp, #116	; 0x74
 8007122:	461f      	mov	r7, r3
 8007124:	2300      	movs	r3, #0
 8007126:	9318      	str	r3, [sp, #96]	; 0x60
 8007128:	4ba2      	ldr	r3, [pc, #648]	; (80073b4 <_strtod_l+0x29c>)
 800712a:	9213      	str	r2, [sp, #76]	; 0x4c
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	9305      	str	r3, [sp, #20]
 8007130:	4604      	mov	r4, r0
 8007132:	4618      	mov	r0, r3
 8007134:	4688      	mov	r8, r1
 8007136:	f7f9 f84b 	bl	80001d0 <strlen>
 800713a:	f04f 0a00 	mov.w	sl, #0
 800713e:	4605      	mov	r5, r0
 8007140:	f04f 0b00 	mov.w	fp, #0
 8007144:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007148:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800714a:	781a      	ldrb	r2, [r3, #0]
 800714c:	2a2b      	cmp	r2, #43	; 0x2b
 800714e:	d04e      	beq.n	80071ee <_strtod_l+0xd6>
 8007150:	d83b      	bhi.n	80071ca <_strtod_l+0xb2>
 8007152:	2a0d      	cmp	r2, #13
 8007154:	d834      	bhi.n	80071c0 <_strtod_l+0xa8>
 8007156:	2a08      	cmp	r2, #8
 8007158:	d834      	bhi.n	80071c4 <_strtod_l+0xac>
 800715a:	2a00      	cmp	r2, #0
 800715c:	d03e      	beq.n	80071dc <_strtod_l+0xc4>
 800715e:	2300      	movs	r3, #0
 8007160:	930a      	str	r3, [sp, #40]	; 0x28
 8007162:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007164:	7833      	ldrb	r3, [r6, #0]
 8007166:	2b30      	cmp	r3, #48	; 0x30
 8007168:	f040 80b0 	bne.w	80072cc <_strtod_l+0x1b4>
 800716c:	7873      	ldrb	r3, [r6, #1]
 800716e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007172:	2b58      	cmp	r3, #88	; 0x58
 8007174:	d168      	bne.n	8007248 <_strtod_l+0x130>
 8007176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007178:	9301      	str	r3, [sp, #4]
 800717a:	ab18      	add	r3, sp, #96	; 0x60
 800717c:	9702      	str	r7, [sp, #8]
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	4a8d      	ldr	r2, [pc, #564]	; (80073b8 <_strtod_l+0x2a0>)
 8007182:	ab19      	add	r3, sp, #100	; 0x64
 8007184:	a917      	add	r1, sp, #92	; 0x5c
 8007186:	4620      	mov	r0, r4
 8007188:	f001 fd54 	bl	8008c34 <__gethex>
 800718c:	f010 0707 	ands.w	r7, r0, #7
 8007190:	4605      	mov	r5, r0
 8007192:	d005      	beq.n	80071a0 <_strtod_l+0x88>
 8007194:	2f06      	cmp	r7, #6
 8007196:	d12c      	bne.n	80071f2 <_strtod_l+0xda>
 8007198:	3601      	adds	r6, #1
 800719a:	2300      	movs	r3, #0
 800719c:	9617      	str	r6, [sp, #92]	; 0x5c
 800719e:	930a      	str	r3, [sp, #40]	; 0x28
 80071a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f040 8590 	bne.w	8007cc8 <_strtod_l+0xbb0>
 80071a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071aa:	b1eb      	cbz	r3, 80071e8 <_strtod_l+0xd0>
 80071ac:	4652      	mov	r2, sl
 80071ae:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80071b2:	ec43 2b10 	vmov	d0, r2, r3
 80071b6:	b01d      	add	sp, #116	; 0x74
 80071b8:	ecbd 8b02 	vpop	{d8}
 80071bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c0:	2a20      	cmp	r2, #32
 80071c2:	d1cc      	bne.n	800715e <_strtod_l+0x46>
 80071c4:	3301      	adds	r3, #1
 80071c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80071c8:	e7be      	b.n	8007148 <_strtod_l+0x30>
 80071ca:	2a2d      	cmp	r2, #45	; 0x2d
 80071cc:	d1c7      	bne.n	800715e <_strtod_l+0x46>
 80071ce:	2201      	movs	r2, #1
 80071d0:	920a      	str	r2, [sp, #40]	; 0x28
 80071d2:	1c5a      	adds	r2, r3, #1
 80071d4:	9217      	str	r2, [sp, #92]	; 0x5c
 80071d6:	785b      	ldrb	r3, [r3, #1]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d1c2      	bne.n	8007162 <_strtod_l+0x4a>
 80071dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071de:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f040 856e 	bne.w	8007cc4 <_strtod_l+0xbac>
 80071e8:	4652      	mov	r2, sl
 80071ea:	465b      	mov	r3, fp
 80071ec:	e7e1      	b.n	80071b2 <_strtod_l+0x9a>
 80071ee:	2200      	movs	r2, #0
 80071f0:	e7ee      	b.n	80071d0 <_strtod_l+0xb8>
 80071f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80071f4:	b13a      	cbz	r2, 8007206 <_strtod_l+0xee>
 80071f6:	2135      	movs	r1, #53	; 0x35
 80071f8:	a81a      	add	r0, sp, #104	; 0x68
 80071fa:	f002 fcd4 	bl	8009ba6 <__copybits>
 80071fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007200:	4620      	mov	r0, r4
 8007202:	f002 f893 	bl	800932c <_Bfree>
 8007206:	3f01      	subs	r7, #1
 8007208:	2f04      	cmp	r7, #4
 800720a:	d806      	bhi.n	800721a <_strtod_l+0x102>
 800720c:	e8df f007 	tbb	[pc, r7]
 8007210:	1714030a 	.word	0x1714030a
 8007214:	0a          	.byte	0x0a
 8007215:	00          	.byte	0x00
 8007216:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800721a:	0728      	lsls	r0, r5, #28
 800721c:	d5c0      	bpl.n	80071a0 <_strtod_l+0x88>
 800721e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007222:	e7bd      	b.n	80071a0 <_strtod_l+0x88>
 8007224:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007228:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800722a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800722e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007232:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007236:	e7f0      	b.n	800721a <_strtod_l+0x102>
 8007238:	f8df b180 	ldr.w	fp, [pc, #384]	; 80073bc <_strtod_l+0x2a4>
 800723c:	e7ed      	b.n	800721a <_strtod_l+0x102>
 800723e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007242:	f04f 3aff 	mov.w	sl, #4294967295
 8007246:	e7e8      	b.n	800721a <_strtod_l+0x102>
 8007248:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800724a:	1c5a      	adds	r2, r3, #1
 800724c:	9217      	str	r2, [sp, #92]	; 0x5c
 800724e:	785b      	ldrb	r3, [r3, #1]
 8007250:	2b30      	cmp	r3, #48	; 0x30
 8007252:	d0f9      	beq.n	8007248 <_strtod_l+0x130>
 8007254:	2b00      	cmp	r3, #0
 8007256:	d0a3      	beq.n	80071a0 <_strtod_l+0x88>
 8007258:	2301      	movs	r3, #1
 800725a:	f04f 0900 	mov.w	r9, #0
 800725e:	9304      	str	r3, [sp, #16]
 8007260:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007262:	9308      	str	r3, [sp, #32]
 8007264:	f8cd 901c 	str.w	r9, [sp, #28]
 8007268:	464f      	mov	r7, r9
 800726a:	220a      	movs	r2, #10
 800726c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800726e:	7806      	ldrb	r6, [r0, #0]
 8007270:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007274:	b2d9      	uxtb	r1, r3
 8007276:	2909      	cmp	r1, #9
 8007278:	d92a      	bls.n	80072d0 <_strtod_l+0x1b8>
 800727a:	9905      	ldr	r1, [sp, #20]
 800727c:	462a      	mov	r2, r5
 800727e:	f002 fe4f 	bl	8009f20 <strncmp>
 8007282:	b398      	cbz	r0, 80072ec <_strtod_l+0x1d4>
 8007284:	2000      	movs	r0, #0
 8007286:	4632      	mov	r2, r6
 8007288:	463d      	mov	r5, r7
 800728a:	9005      	str	r0, [sp, #20]
 800728c:	4603      	mov	r3, r0
 800728e:	2a65      	cmp	r2, #101	; 0x65
 8007290:	d001      	beq.n	8007296 <_strtod_l+0x17e>
 8007292:	2a45      	cmp	r2, #69	; 0x45
 8007294:	d118      	bne.n	80072c8 <_strtod_l+0x1b0>
 8007296:	b91d      	cbnz	r5, 80072a0 <_strtod_l+0x188>
 8007298:	9a04      	ldr	r2, [sp, #16]
 800729a:	4302      	orrs	r2, r0
 800729c:	d09e      	beq.n	80071dc <_strtod_l+0xc4>
 800729e:	2500      	movs	r5, #0
 80072a0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80072a4:	f108 0201 	add.w	r2, r8, #1
 80072a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80072aa:	f898 2001 	ldrb.w	r2, [r8, #1]
 80072ae:	2a2b      	cmp	r2, #43	; 0x2b
 80072b0:	d075      	beq.n	800739e <_strtod_l+0x286>
 80072b2:	2a2d      	cmp	r2, #45	; 0x2d
 80072b4:	d07b      	beq.n	80073ae <_strtod_l+0x296>
 80072b6:	f04f 0c00 	mov.w	ip, #0
 80072ba:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80072be:	2909      	cmp	r1, #9
 80072c0:	f240 8082 	bls.w	80073c8 <_strtod_l+0x2b0>
 80072c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80072c8:	2600      	movs	r6, #0
 80072ca:	e09d      	b.n	8007408 <_strtod_l+0x2f0>
 80072cc:	2300      	movs	r3, #0
 80072ce:	e7c4      	b.n	800725a <_strtod_l+0x142>
 80072d0:	2f08      	cmp	r7, #8
 80072d2:	bfd8      	it	le
 80072d4:	9907      	ldrle	r1, [sp, #28]
 80072d6:	f100 0001 	add.w	r0, r0, #1
 80072da:	bfda      	itte	le
 80072dc:	fb02 3301 	mlale	r3, r2, r1, r3
 80072e0:	9307      	strle	r3, [sp, #28]
 80072e2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80072e6:	3701      	adds	r7, #1
 80072e8:	9017      	str	r0, [sp, #92]	; 0x5c
 80072ea:	e7bf      	b.n	800726c <_strtod_l+0x154>
 80072ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072ee:	195a      	adds	r2, r3, r5
 80072f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80072f2:	5d5a      	ldrb	r2, [r3, r5]
 80072f4:	2f00      	cmp	r7, #0
 80072f6:	d037      	beq.n	8007368 <_strtod_l+0x250>
 80072f8:	9005      	str	r0, [sp, #20]
 80072fa:	463d      	mov	r5, r7
 80072fc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007300:	2b09      	cmp	r3, #9
 8007302:	d912      	bls.n	800732a <_strtod_l+0x212>
 8007304:	2301      	movs	r3, #1
 8007306:	e7c2      	b.n	800728e <_strtod_l+0x176>
 8007308:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800730a:	1c5a      	adds	r2, r3, #1
 800730c:	9217      	str	r2, [sp, #92]	; 0x5c
 800730e:	785a      	ldrb	r2, [r3, #1]
 8007310:	3001      	adds	r0, #1
 8007312:	2a30      	cmp	r2, #48	; 0x30
 8007314:	d0f8      	beq.n	8007308 <_strtod_l+0x1f0>
 8007316:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800731a:	2b08      	cmp	r3, #8
 800731c:	f200 84d9 	bhi.w	8007cd2 <_strtod_l+0xbba>
 8007320:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007322:	9005      	str	r0, [sp, #20]
 8007324:	2000      	movs	r0, #0
 8007326:	9308      	str	r3, [sp, #32]
 8007328:	4605      	mov	r5, r0
 800732a:	3a30      	subs	r2, #48	; 0x30
 800732c:	f100 0301 	add.w	r3, r0, #1
 8007330:	d014      	beq.n	800735c <_strtod_l+0x244>
 8007332:	9905      	ldr	r1, [sp, #20]
 8007334:	4419      	add	r1, r3
 8007336:	9105      	str	r1, [sp, #20]
 8007338:	462b      	mov	r3, r5
 800733a:	eb00 0e05 	add.w	lr, r0, r5
 800733e:	210a      	movs	r1, #10
 8007340:	4573      	cmp	r3, lr
 8007342:	d113      	bne.n	800736c <_strtod_l+0x254>
 8007344:	182b      	adds	r3, r5, r0
 8007346:	2b08      	cmp	r3, #8
 8007348:	f105 0501 	add.w	r5, r5, #1
 800734c:	4405      	add	r5, r0
 800734e:	dc1c      	bgt.n	800738a <_strtod_l+0x272>
 8007350:	9907      	ldr	r1, [sp, #28]
 8007352:	230a      	movs	r3, #10
 8007354:	fb03 2301 	mla	r3, r3, r1, r2
 8007358:	9307      	str	r3, [sp, #28]
 800735a:	2300      	movs	r3, #0
 800735c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800735e:	1c51      	adds	r1, r2, #1
 8007360:	9117      	str	r1, [sp, #92]	; 0x5c
 8007362:	7852      	ldrb	r2, [r2, #1]
 8007364:	4618      	mov	r0, r3
 8007366:	e7c9      	b.n	80072fc <_strtod_l+0x1e4>
 8007368:	4638      	mov	r0, r7
 800736a:	e7d2      	b.n	8007312 <_strtod_l+0x1fa>
 800736c:	2b08      	cmp	r3, #8
 800736e:	dc04      	bgt.n	800737a <_strtod_l+0x262>
 8007370:	9e07      	ldr	r6, [sp, #28]
 8007372:	434e      	muls	r6, r1
 8007374:	9607      	str	r6, [sp, #28]
 8007376:	3301      	adds	r3, #1
 8007378:	e7e2      	b.n	8007340 <_strtod_l+0x228>
 800737a:	f103 0c01 	add.w	ip, r3, #1
 800737e:	f1bc 0f10 	cmp.w	ip, #16
 8007382:	bfd8      	it	le
 8007384:	fb01 f909 	mulle.w	r9, r1, r9
 8007388:	e7f5      	b.n	8007376 <_strtod_l+0x25e>
 800738a:	2d10      	cmp	r5, #16
 800738c:	bfdc      	itt	le
 800738e:	230a      	movle	r3, #10
 8007390:	fb03 2909 	mlale	r9, r3, r9, r2
 8007394:	e7e1      	b.n	800735a <_strtod_l+0x242>
 8007396:	2300      	movs	r3, #0
 8007398:	9305      	str	r3, [sp, #20]
 800739a:	2301      	movs	r3, #1
 800739c:	e77c      	b.n	8007298 <_strtod_l+0x180>
 800739e:	f04f 0c00 	mov.w	ip, #0
 80073a2:	f108 0202 	add.w	r2, r8, #2
 80073a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80073a8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80073ac:	e785      	b.n	80072ba <_strtod_l+0x1a2>
 80073ae:	f04f 0c01 	mov.w	ip, #1
 80073b2:	e7f6      	b.n	80073a2 <_strtod_l+0x28a>
 80073b4:	0800aed0 	.word	0x0800aed0
 80073b8:	0800ac88 	.word	0x0800ac88
 80073bc:	7ff00000 	.word	0x7ff00000
 80073c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073c2:	1c51      	adds	r1, r2, #1
 80073c4:	9117      	str	r1, [sp, #92]	; 0x5c
 80073c6:	7852      	ldrb	r2, [r2, #1]
 80073c8:	2a30      	cmp	r2, #48	; 0x30
 80073ca:	d0f9      	beq.n	80073c0 <_strtod_l+0x2a8>
 80073cc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80073d0:	2908      	cmp	r1, #8
 80073d2:	f63f af79 	bhi.w	80072c8 <_strtod_l+0x1b0>
 80073d6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80073da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073dc:	9206      	str	r2, [sp, #24]
 80073de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80073e0:	1c51      	adds	r1, r2, #1
 80073e2:	9117      	str	r1, [sp, #92]	; 0x5c
 80073e4:	7852      	ldrb	r2, [r2, #1]
 80073e6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80073ea:	2e09      	cmp	r6, #9
 80073ec:	d937      	bls.n	800745e <_strtod_l+0x346>
 80073ee:	9e06      	ldr	r6, [sp, #24]
 80073f0:	1b89      	subs	r1, r1, r6
 80073f2:	2908      	cmp	r1, #8
 80073f4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80073f8:	dc02      	bgt.n	8007400 <_strtod_l+0x2e8>
 80073fa:	4576      	cmp	r6, lr
 80073fc:	bfa8      	it	ge
 80073fe:	4676      	movge	r6, lr
 8007400:	f1bc 0f00 	cmp.w	ip, #0
 8007404:	d000      	beq.n	8007408 <_strtod_l+0x2f0>
 8007406:	4276      	negs	r6, r6
 8007408:	2d00      	cmp	r5, #0
 800740a:	d14d      	bne.n	80074a8 <_strtod_l+0x390>
 800740c:	9904      	ldr	r1, [sp, #16]
 800740e:	4301      	orrs	r1, r0
 8007410:	f47f aec6 	bne.w	80071a0 <_strtod_l+0x88>
 8007414:	2b00      	cmp	r3, #0
 8007416:	f47f aee1 	bne.w	80071dc <_strtod_l+0xc4>
 800741a:	2a69      	cmp	r2, #105	; 0x69
 800741c:	d027      	beq.n	800746e <_strtod_l+0x356>
 800741e:	dc24      	bgt.n	800746a <_strtod_l+0x352>
 8007420:	2a49      	cmp	r2, #73	; 0x49
 8007422:	d024      	beq.n	800746e <_strtod_l+0x356>
 8007424:	2a4e      	cmp	r2, #78	; 0x4e
 8007426:	f47f aed9 	bne.w	80071dc <_strtod_l+0xc4>
 800742a:	499f      	ldr	r1, [pc, #636]	; (80076a8 <_strtod_l+0x590>)
 800742c:	a817      	add	r0, sp, #92	; 0x5c
 800742e:	f001 fe59 	bl	80090e4 <__match>
 8007432:	2800      	cmp	r0, #0
 8007434:	f43f aed2 	beq.w	80071dc <_strtod_l+0xc4>
 8007438:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	2b28      	cmp	r3, #40	; 0x28
 800743e:	d12d      	bne.n	800749c <_strtod_l+0x384>
 8007440:	499a      	ldr	r1, [pc, #616]	; (80076ac <_strtod_l+0x594>)
 8007442:	aa1a      	add	r2, sp, #104	; 0x68
 8007444:	a817      	add	r0, sp, #92	; 0x5c
 8007446:	f001 fe61 	bl	800910c <__hexnan>
 800744a:	2805      	cmp	r0, #5
 800744c:	d126      	bne.n	800749c <_strtod_l+0x384>
 800744e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007450:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007454:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007458:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800745c:	e6a0      	b.n	80071a0 <_strtod_l+0x88>
 800745e:	210a      	movs	r1, #10
 8007460:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007464:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007468:	e7b9      	b.n	80073de <_strtod_l+0x2c6>
 800746a:	2a6e      	cmp	r2, #110	; 0x6e
 800746c:	e7db      	b.n	8007426 <_strtod_l+0x30e>
 800746e:	4990      	ldr	r1, [pc, #576]	; (80076b0 <_strtod_l+0x598>)
 8007470:	a817      	add	r0, sp, #92	; 0x5c
 8007472:	f001 fe37 	bl	80090e4 <__match>
 8007476:	2800      	cmp	r0, #0
 8007478:	f43f aeb0 	beq.w	80071dc <_strtod_l+0xc4>
 800747c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800747e:	498d      	ldr	r1, [pc, #564]	; (80076b4 <_strtod_l+0x59c>)
 8007480:	3b01      	subs	r3, #1
 8007482:	a817      	add	r0, sp, #92	; 0x5c
 8007484:	9317      	str	r3, [sp, #92]	; 0x5c
 8007486:	f001 fe2d 	bl	80090e4 <__match>
 800748a:	b910      	cbnz	r0, 8007492 <_strtod_l+0x37a>
 800748c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800748e:	3301      	adds	r3, #1
 8007490:	9317      	str	r3, [sp, #92]	; 0x5c
 8007492:	f8df b230 	ldr.w	fp, [pc, #560]	; 80076c4 <_strtod_l+0x5ac>
 8007496:	f04f 0a00 	mov.w	sl, #0
 800749a:	e681      	b.n	80071a0 <_strtod_l+0x88>
 800749c:	4886      	ldr	r0, [pc, #536]	; (80076b8 <_strtod_l+0x5a0>)
 800749e:	f002 fd37 	bl	8009f10 <nan>
 80074a2:	ec5b ab10 	vmov	sl, fp, d0
 80074a6:	e67b      	b.n	80071a0 <_strtod_l+0x88>
 80074a8:	9b05      	ldr	r3, [sp, #20]
 80074aa:	9807      	ldr	r0, [sp, #28]
 80074ac:	1af3      	subs	r3, r6, r3
 80074ae:	2f00      	cmp	r7, #0
 80074b0:	bf08      	it	eq
 80074b2:	462f      	moveq	r7, r5
 80074b4:	2d10      	cmp	r5, #16
 80074b6:	9306      	str	r3, [sp, #24]
 80074b8:	46a8      	mov	r8, r5
 80074ba:	bfa8      	it	ge
 80074bc:	f04f 0810 	movge.w	r8, #16
 80074c0:	f7f9 f820 	bl	8000504 <__aeabi_ui2d>
 80074c4:	2d09      	cmp	r5, #9
 80074c6:	4682      	mov	sl, r0
 80074c8:	468b      	mov	fp, r1
 80074ca:	dd13      	ble.n	80074f4 <_strtod_l+0x3dc>
 80074cc:	4b7b      	ldr	r3, [pc, #492]	; (80076bc <_strtod_l+0x5a4>)
 80074ce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80074d2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80074d6:	f7f9 f88f 	bl	80005f8 <__aeabi_dmul>
 80074da:	4682      	mov	sl, r0
 80074dc:	4648      	mov	r0, r9
 80074de:	468b      	mov	fp, r1
 80074e0:	f7f9 f810 	bl	8000504 <__aeabi_ui2d>
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	4650      	mov	r0, sl
 80074ea:	4659      	mov	r1, fp
 80074ec:	f7f8 fece 	bl	800028c <__adddf3>
 80074f0:	4682      	mov	sl, r0
 80074f2:	468b      	mov	fp, r1
 80074f4:	2d0f      	cmp	r5, #15
 80074f6:	dc38      	bgt.n	800756a <_strtod_l+0x452>
 80074f8:	9b06      	ldr	r3, [sp, #24]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f43f ae50 	beq.w	80071a0 <_strtod_l+0x88>
 8007500:	dd24      	ble.n	800754c <_strtod_l+0x434>
 8007502:	2b16      	cmp	r3, #22
 8007504:	dc0b      	bgt.n	800751e <_strtod_l+0x406>
 8007506:	496d      	ldr	r1, [pc, #436]	; (80076bc <_strtod_l+0x5a4>)
 8007508:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800750c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007510:	4652      	mov	r2, sl
 8007512:	465b      	mov	r3, fp
 8007514:	f7f9 f870 	bl	80005f8 <__aeabi_dmul>
 8007518:	4682      	mov	sl, r0
 800751a:	468b      	mov	fp, r1
 800751c:	e640      	b.n	80071a0 <_strtod_l+0x88>
 800751e:	9a06      	ldr	r2, [sp, #24]
 8007520:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007524:	4293      	cmp	r3, r2
 8007526:	db20      	blt.n	800756a <_strtod_l+0x452>
 8007528:	4c64      	ldr	r4, [pc, #400]	; (80076bc <_strtod_l+0x5a4>)
 800752a:	f1c5 050f 	rsb	r5, r5, #15
 800752e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007532:	4652      	mov	r2, sl
 8007534:	465b      	mov	r3, fp
 8007536:	e9d1 0100 	ldrd	r0, r1, [r1]
 800753a:	f7f9 f85d 	bl	80005f8 <__aeabi_dmul>
 800753e:	9b06      	ldr	r3, [sp, #24]
 8007540:	1b5d      	subs	r5, r3, r5
 8007542:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007546:	e9d4 2300 	ldrd	r2, r3, [r4]
 800754a:	e7e3      	b.n	8007514 <_strtod_l+0x3fc>
 800754c:	9b06      	ldr	r3, [sp, #24]
 800754e:	3316      	adds	r3, #22
 8007550:	db0b      	blt.n	800756a <_strtod_l+0x452>
 8007552:	9b05      	ldr	r3, [sp, #20]
 8007554:	1b9e      	subs	r6, r3, r6
 8007556:	4b59      	ldr	r3, [pc, #356]	; (80076bc <_strtod_l+0x5a4>)
 8007558:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800755c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007560:	4650      	mov	r0, sl
 8007562:	4659      	mov	r1, fp
 8007564:	f7f9 f972 	bl	800084c <__aeabi_ddiv>
 8007568:	e7d6      	b.n	8007518 <_strtod_l+0x400>
 800756a:	9b06      	ldr	r3, [sp, #24]
 800756c:	eba5 0808 	sub.w	r8, r5, r8
 8007570:	4498      	add	r8, r3
 8007572:	f1b8 0f00 	cmp.w	r8, #0
 8007576:	dd74      	ble.n	8007662 <_strtod_l+0x54a>
 8007578:	f018 030f 	ands.w	r3, r8, #15
 800757c:	d00a      	beq.n	8007594 <_strtod_l+0x47c>
 800757e:	494f      	ldr	r1, [pc, #316]	; (80076bc <_strtod_l+0x5a4>)
 8007580:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007584:	4652      	mov	r2, sl
 8007586:	465b      	mov	r3, fp
 8007588:	e9d1 0100 	ldrd	r0, r1, [r1]
 800758c:	f7f9 f834 	bl	80005f8 <__aeabi_dmul>
 8007590:	4682      	mov	sl, r0
 8007592:	468b      	mov	fp, r1
 8007594:	f038 080f 	bics.w	r8, r8, #15
 8007598:	d04f      	beq.n	800763a <_strtod_l+0x522>
 800759a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800759e:	dd22      	ble.n	80075e6 <_strtod_l+0x4ce>
 80075a0:	2500      	movs	r5, #0
 80075a2:	462e      	mov	r6, r5
 80075a4:	9507      	str	r5, [sp, #28]
 80075a6:	9505      	str	r5, [sp, #20]
 80075a8:	2322      	movs	r3, #34	; 0x22
 80075aa:	f8df b118 	ldr.w	fp, [pc, #280]	; 80076c4 <_strtod_l+0x5ac>
 80075ae:	6023      	str	r3, [r4, #0]
 80075b0:	f04f 0a00 	mov.w	sl, #0
 80075b4:	9b07      	ldr	r3, [sp, #28]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	f43f adf2 	beq.w	80071a0 <_strtod_l+0x88>
 80075bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075be:	4620      	mov	r0, r4
 80075c0:	f001 feb4 	bl	800932c <_Bfree>
 80075c4:	9905      	ldr	r1, [sp, #20]
 80075c6:	4620      	mov	r0, r4
 80075c8:	f001 feb0 	bl	800932c <_Bfree>
 80075cc:	4631      	mov	r1, r6
 80075ce:	4620      	mov	r0, r4
 80075d0:	f001 feac 	bl	800932c <_Bfree>
 80075d4:	9907      	ldr	r1, [sp, #28]
 80075d6:	4620      	mov	r0, r4
 80075d8:	f001 fea8 	bl	800932c <_Bfree>
 80075dc:	4629      	mov	r1, r5
 80075de:	4620      	mov	r0, r4
 80075e0:	f001 fea4 	bl	800932c <_Bfree>
 80075e4:	e5dc      	b.n	80071a0 <_strtod_l+0x88>
 80075e6:	4b36      	ldr	r3, [pc, #216]	; (80076c0 <_strtod_l+0x5a8>)
 80075e8:	9304      	str	r3, [sp, #16]
 80075ea:	2300      	movs	r3, #0
 80075ec:	ea4f 1828 	mov.w	r8, r8, asr #4
 80075f0:	4650      	mov	r0, sl
 80075f2:	4659      	mov	r1, fp
 80075f4:	4699      	mov	r9, r3
 80075f6:	f1b8 0f01 	cmp.w	r8, #1
 80075fa:	dc21      	bgt.n	8007640 <_strtod_l+0x528>
 80075fc:	b10b      	cbz	r3, 8007602 <_strtod_l+0x4ea>
 80075fe:	4682      	mov	sl, r0
 8007600:	468b      	mov	fp, r1
 8007602:	4b2f      	ldr	r3, [pc, #188]	; (80076c0 <_strtod_l+0x5a8>)
 8007604:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007608:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800760c:	4652      	mov	r2, sl
 800760e:	465b      	mov	r3, fp
 8007610:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007614:	f7f8 fff0 	bl	80005f8 <__aeabi_dmul>
 8007618:	4b2a      	ldr	r3, [pc, #168]	; (80076c4 <_strtod_l+0x5ac>)
 800761a:	460a      	mov	r2, r1
 800761c:	400b      	ands	r3, r1
 800761e:	492a      	ldr	r1, [pc, #168]	; (80076c8 <_strtod_l+0x5b0>)
 8007620:	428b      	cmp	r3, r1
 8007622:	4682      	mov	sl, r0
 8007624:	d8bc      	bhi.n	80075a0 <_strtod_l+0x488>
 8007626:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800762a:	428b      	cmp	r3, r1
 800762c:	bf86      	itte	hi
 800762e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80076cc <_strtod_l+0x5b4>
 8007632:	f04f 3aff 	movhi.w	sl, #4294967295
 8007636:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800763a:	2300      	movs	r3, #0
 800763c:	9304      	str	r3, [sp, #16]
 800763e:	e084      	b.n	800774a <_strtod_l+0x632>
 8007640:	f018 0f01 	tst.w	r8, #1
 8007644:	d005      	beq.n	8007652 <_strtod_l+0x53a>
 8007646:	9b04      	ldr	r3, [sp, #16]
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	f7f8 ffd4 	bl	80005f8 <__aeabi_dmul>
 8007650:	2301      	movs	r3, #1
 8007652:	9a04      	ldr	r2, [sp, #16]
 8007654:	3208      	adds	r2, #8
 8007656:	f109 0901 	add.w	r9, r9, #1
 800765a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800765e:	9204      	str	r2, [sp, #16]
 8007660:	e7c9      	b.n	80075f6 <_strtod_l+0x4de>
 8007662:	d0ea      	beq.n	800763a <_strtod_l+0x522>
 8007664:	f1c8 0800 	rsb	r8, r8, #0
 8007668:	f018 020f 	ands.w	r2, r8, #15
 800766c:	d00a      	beq.n	8007684 <_strtod_l+0x56c>
 800766e:	4b13      	ldr	r3, [pc, #76]	; (80076bc <_strtod_l+0x5a4>)
 8007670:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007674:	4650      	mov	r0, sl
 8007676:	4659      	mov	r1, fp
 8007678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800767c:	f7f9 f8e6 	bl	800084c <__aeabi_ddiv>
 8007680:	4682      	mov	sl, r0
 8007682:	468b      	mov	fp, r1
 8007684:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007688:	d0d7      	beq.n	800763a <_strtod_l+0x522>
 800768a:	f1b8 0f1f 	cmp.w	r8, #31
 800768e:	dd1f      	ble.n	80076d0 <_strtod_l+0x5b8>
 8007690:	2500      	movs	r5, #0
 8007692:	462e      	mov	r6, r5
 8007694:	9507      	str	r5, [sp, #28]
 8007696:	9505      	str	r5, [sp, #20]
 8007698:	2322      	movs	r3, #34	; 0x22
 800769a:	f04f 0a00 	mov.w	sl, #0
 800769e:	f04f 0b00 	mov.w	fp, #0
 80076a2:	6023      	str	r3, [r4, #0]
 80076a4:	e786      	b.n	80075b4 <_strtod_l+0x49c>
 80076a6:	bf00      	nop
 80076a8:	0800ac59 	.word	0x0800ac59
 80076ac:	0800ac9c 	.word	0x0800ac9c
 80076b0:	0800ac51 	.word	0x0800ac51
 80076b4:	0800addc 	.word	0x0800addc
 80076b8:	0800b088 	.word	0x0800b088
 80076bc:	0800af68 	.word	0x0800af68
 80076c0:	0800af40 	.word	0x0800af40
 80076c4:	7ff00000 	.word	0x7ff00000
 80076c8:	7ca00000 	.word	0x7ca00000
 80076cc:	7fefffff 	.word	0x7fefffff
 80076d0:	f018 0310 	ands.w	r3, r8, #16
 80076d4:	bf18      	it	ne
 80076d6:	236a      	movne	r3, #106	; 0x6a
 80076d8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8007a88 <_strtod_l+0x970>
 80076dc:	9304      	str	r3, [sp, #16]
 80076de:	4650      	mov	r0, sl
 80076e0:	4659      	mov	r1, fp
 80076e2:	2300      	movs	r3, #0
 80076e4:	f018 0f01 	tst.w	r8, #1
 80076e8:	d004      	beq.n	80076f4 <_strtod_l+0x5dc>
 80076ea:	e9d9 2300 	ldrd	r2, r3, [r9]
 80076ee:	f7f8 ff83 	bl	80005f8 <__aeabi_dmul>
 80076f2:	2301      	movs	r3, #1
 80076f4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80076f8:	f109 0908 	add.w	r9, r9, #8
 80076fc:	d1f2      	bne.n	80076e4 <_strtod_l+0x5cc>
 80076fe:	b10b      	cbz	r3, 8007704 <_strtod_l+0x5ec>
 8007700:	4682      	mov	sl, r0
 8007702:	468b      	mov	fp, r1
 8007704:	9b04      	ldr	r3, [sp, #16]
 8007706:	b1c3      	cbz	r3, 800773a <_strtod_l+0x622>
 8007708:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800770c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007710:	2b00      	cmp	r3, #0
 8007712:	4659      	mov	r1, fp
 8007714:	dd11      	ble.n	800773a <_strtod_l+0x622>
 8007716:	2b1f      	cmp	r3, #31
 8007718:	f340 8124 	ble.w	8007964 <_strtod_l+0x84c>
 800771c:	2b34      	cmp	r3, #52	; 0x34
 800771e:	bfde      	ittt	le
 8007720:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007724:	f04f 33ff 	movle.w	r3, #4294967295
 8007728:	fa03 f202 	lslle.w	r2, r3, r2
 800772c:	f04f 0a00 	mov.w	sl, #0
 8007730:	bfcc      	ite	gt
 8007732:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007736:	ea02 0b01 	andle.w	fp, r2, r1
 800773a:	2200      	movs	r2, #0
 800773c:	2300      	movs	r3, #0
 800773e:	4650      	mov	r0, sl
 8007740:	4659      	mov	r1, fp
 8007742:	f7f9 f9c1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007746:	2800      	cmp	r0, #0
 8007748:	d1a2      	bne.n	8007690 <_strtod_l+0x578>
 800774a:	9b07      	ldr	r3, [sp, #28]
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	9908      	ldr	r1, [sp, #32]
 8007750:	462b      	mov	r3, r5
 8007752:	463a      	mov	r2, r7
 8007754:	4620      	mov	r0, r4
 8007756:	f001 fe51 	bl	80093fc <__s2b>
 800775a:	9007      	str	r0, [sp, #28]
 800775c:	2800      	cmp	r0, #0
 800775e:	f43f af1f 	beq.w	80075a0 <_strtod_l+0x488>
 8007762:	9b05      	ldr	r3, [sp, #20]
 8007764:	1b9e      	subs	r6, r3, r6
 8007766:	9b06      	ldr	r3, [sp, #24]
 8007768:	2b00      	cmp	r3, #0
 800776a:	bfb4      	ite	lt
 800776c:	4633      	movlt	r3, r6
 800776e:	2300      	movge	r3, #0
 8007770:	930c      	str	r3, [sp, #48]	; 0x30
 8007772:	9b06      	ldr	r3, [sp, #24]
 8007774:	2500      	movs	r5, #0
 8007776:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800777a:	9312      	str	r3, [sp, #72]	; 0x48
 800777c:	462e      	mov	r6, r5
 800777e:	9b07      	ldr	r3, [sp, #28]
 8007780:	4620      	mov	r0, r4
 8007782:	6859      	ldr	r1, [r3, #4]
 8007784:	f001 fd92 	bl	80092ac <_Balloc>
 8007788:	9005      	str	r0, [sp, #20]
 800778a:	2800      	cmp	r0, #0
 800778c:	f43f af0c 	beq.w	80075a8 <_strtod_l+0x490>
 8007790:	9b07      	ldr	r3, [sp, #28]
 8007792:	691a      	ldr	r2, [r3, #16]
 8007794:	3202      	adds	r2, #2
 8007796:	f103 010c 	add.w	r1, r3, #12
 800779a:	0092      	lsls	r2, r2, #2
 800779c:	300c      	adds	r0, #12
 800779e:	f7fe fcf9 	bl	8006194 <memcpy>
 80077a2:	ec4b ab10 	vmov	d0, sl, fp
 80077a6:	aa1a      	add	r2, sp, #104	; 0x68
 80077a8:	a919      	add	r1, sp, #100	; 0x64
 80077aa:	4620      	mov	r0, r4
 80077ac:	f002 f96c 	bl	8009a88 <__d2b>
 80077b0:	ec4b ab18 	vmov	d8, sl, fp
 80077b4:	9018      	str	r0, [sp, #96]	; 0x60
 80077b6:	2800      	cmp	r0, #0
 80077b8:	f43f aef6 	beq.w	80075a8 <_strtod_l+0x490>
 80077bc:	2101      	movs	r1, #1
 80077be:	4620      	mov	r0, r4
 80077c0:	f001 feb6 	bl	8009530 <__i2b>
 80077c4:	4606      	mov	r6, r0
 80077c6:	2800      	cmp	r0, #0
 80077c8:	f43f aeee 	beq.w	80075a8 <_strtod_l+0x490>
 80077cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80077ce:	9904      	ldr	r1, [sp, #16]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	bfab      	itete	ge
 80077d4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80077d6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80077d8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80077da:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80077de:	bfac      	ite	ge
 80077e0:	eb03 0902 	addge.w	r9, r3, r2
 80077e4:	1ad7      	sublt	r7, r2, r3
 80077e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80077e8:	eba3 0801 	sub.w	r8, r3, r1
 80077ec:	4490      	add	r8, r2
 80077ee:	4ba1      	ldr	r3, [pc, #644]	; (8007a74 <_strtod_l+0x95c>)
 80077f0:	f108 38ff 	add.w	r8, r8, #4294967295
 80077f4:	4598      	cmp	r8, r3
 80077f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80077fa:	f280 80c7 	bge.w	800798c <_strtod_l+0x874>
 80077fe:	eba3 0308 	sub.w	r3, r3, r8
 8007802:	2b1f      	cmp	r3, #31
 8007804:	eba2 0203 	sub.w	r2, r2, r3
 8007808:	f04f 0101 	mov.w	r1, #1
 800780c:	f300 80b1 	bgt.w	8007972 <_strtod_l+0x85a>
 8007810:	fa01 f303 	lsl.w	r3, r1, r3
 8007814:	930d      	str	r3, [sp, #52]	; 0x34
 8007816:	2300      	movs	r3, #0
 8007818:	9308      	str	r3, [sp, #32]
 800781a:	eb09 0802 	add.w	r8, r9, r2
 800781e:	9b04      	ldr	r3, [sp, #16]
 8007820:	45c1      	cmp	r9, r8
 8007822:	4417      	add	r7, r2
 8007824:	441f      	add	r7, r3
 8007826:	464b      	mov	r3, r9
 8007828:	bfa8      	it	ge
 800782a:	4643      	movge	r3, r8
 800782c:	42bb      	cmp	r3, r7
 800782e:	bfa8      	it	ge
 8007830:	463b      	movge	r3, r7
 8007832:	2b00      	cmp	r3, #0
 8007834:	bfc2      	ittt	gt
 8007836:	eba8 0803 	subgt.w	r8, r8, r3
 800783a:	1aff      	subgt	r7, r7, r3
 800783c:	eba9 0903 	subgt.w	r9, r9, r3
 8007840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007842:	2b00      	cmp	r3, #0
 8007844:	dd17      	ble.n	8007876 <_strtod_l+0x75e>
 8007846:	4631      	mov	r1, r6
 8007848:	461a      	mov	r2, r3
 800784a:	4620      	mov	r0, r4
 800784c:	f001 ff30 	bl	80096b0 <__pow5mult>
 8007850:	4606      	mov	r6, r0
 8007852:	2800      	cmp	r0, #0
 8007854:	f43f aea8 	beq.w	80075a8 <_strtod_l+0x490>
 8007858:	4601      	mov	r1, r0
 800785a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800785c:	4620      	mov	r0, r4
 800785e:	f001 fe7d 	bl	800955c <__multiply>
 8007862:	900b      	str	r0, [sp, #44]	; 0x2c
 8007864:	2800      	cmp	r0, #0
 8007866:	f43f ae9f 	beq.w	80075a8 <_strtod_l+0x490>
 800786a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800786c:	4620      	mov	r0, r4
 800786e:	f001 fd5d 	bl	800932c <_Bfree>
 8007872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007874:	9318      	str	r3, [sp, #96]	; 0x60
 8007876:	f1b8 0f00 	cmp.w	r8, #0
 800787a:	f300 808c 	bgt.w	8007996 <_strtod_l+0x87e>
 800787e:	9b06      	ldr	r3, [sp, #24]
 8007880:	2b00      	cmp	r3, #0
 8007882:	dd08      	ble.n	8007896 <_strtod_l+0x77e>
 8007884:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007886:	9905      	ldr	r1, [sp, #20]
 8007888:	4620      	mov	r0, r4
 800788a:	f001 ff11 	bl	80096b0 <__pow5mult>
 800788e:	9005      	str	r0, [sp, #20]
 8007890:	2800      	cmp	r0, #0
 8007892:	f43f ae89 	beq.w	80075a8 <_strtod_l+0x490>
 8007896:	2f00      	cmp	r7, #0
 8007898:	dd08      	ble.n	80078ac <_strtod_l+0x794>
 800789a:	9905      	ldr	r1, [sp, #20]
 800789c:	463a      	mov	r2, r7
 800789e:	4620      	mov	r0, r4
 80078a0:	f001 ff60 	bl	8009764 <__lshift>
 80078a4:	9005      	str	r0, [sp, #20]
 80078a6:	2800      	cmp	r0, #0
 80078a8:	f43f ae7e 	beq.w	80075a8 <_strtod_l+0x490>
 80078ac:	f1b9 0f00 	cmp.w	r9, #0
 80078b0:	dd08      	ble.n	80078c4 <_strtod_l+0x7ac>
 80078b2:	4631      	mov	r1, r6
 80078b4:	464a      	mov	r2, r9
 80078b6:	4620      	mov	r0, r4
 80078b8:	f001 ff54 	bl	8009764 <__lshift>
 80078bc:	4606      	mov	r6, r0
 80078be:	2800      	cmp	r0, #0
 80078c0:	f43f ae72 	beq.w	80075a8 <_strtod_l+0x490>
 80078c4:	9a05      	ldr	r2, [sp, #20]
 80078c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80078c8:	4620      	mov	r0, r4
 80078ca:	f001 ffd7 	bl	800987c <__mdiff>
 80078ce:	4605      	mov	r5, r0
 80078d0:	2800      	cmp	r0, #0
 80078d2:	f43f ae69 	beq.w	80075a8 <_strtod_l+0x490>
 80078d6:	68c3      	ldr	r3, [r0, #12]
 80078d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80078da:	2300      	movs	r3, #0
 80078dc:	60c3      	str	r3, [r0, #12]
 80078de:	4631      	mov	r1, r6
 80078e0:	f001 ffb0 	bl	8009844 <__mcmp>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	da60      	bge.n	80079aa <_strtod_l+0x892>
 80078e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078ea:	ea53 030a 	orrs.w	r3, r3, sl
 80078ee:	f040 8082 	bne.w	80079f6 <_strtod_l+0x8de>
 80078f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d17d      	bne.n	80079f6 <_strtod_l+0x8de>
 80078fa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80078fe:	0d1b      	lsrs	r3, r3, #20
 8007900:	051b      	lsls	r3, r3, #20
 8007902:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007906:	d976      	bls.n	80079f6 <_strtod_l+0x8de>
 8007908:	696b      	ldr	r3, [r5, #20]
 800790a:	b913      	cbnz	r3, 8007912 <_strtod_l+0x7fa>
 800790c:	692b      	ldr	r3, [r5, #16]
 800790e:	2b01      	cmp	r3, #1
 8007910:	dd71      	ble.n	80079f6 <_strtod_l+0x8de>
 8007912:	4629      	mov	r1, r5
 8007914:	2201      	movs	r2, #1
 8007916:	4620      	mov	r0, r4
 8007918:	f001 ff24 	bl	8009764 <__lshift>
 800791c:	4631      	mov	r1, r6
 800791e:	4605      	mov	r5, r0
 8007920:	f001 ff90 	bl	8009844 <__mcmp>
 8007924:	2800      	cmp	r0, #0
 8007926:	dd66      	ble.n	80079f6 <_strtod_l+0x8de>
 8007928:	9904      	ldr	r1, [sp, #16]
 800792a:	4a53      	ldr	r2, [pc, #332]	; (8007a78 <_strtod_l+0x960>)
 800792c:	465b      	mov	r3, fp
 800792e:	2900      	cmp	r1, #0
 8007930:	f000 8081 	beq.w	8007a36 <_strtod_l+0x91e>
 8007934:	ea02 010b 	and.w	r1, r2, fp
 8007938:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800793c:	dc7b      	bgt.n	8007a36 <_strtod_l+0x91e>
 800793e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007942:	f77f aea9 	ble.w	8007698 <_strtod_l+0x580>
 8007946:	4b4d      	ldr	r3, [pc, #308]	; (8007a7c <_strtod_l+0x964>)
 8007948:	4650      	mov	r0, sl
 800794a:	4659      	mov	r1, fp
 800794c:	2200      	movs	r2, #0
 800794e:	f7f8 fe53 	bl	80005f8 <__aeabi_dmul>
 8007952:	460b      	mov	r3, r1
 8007954:	4303      	orrs	r3, r0
 8007956:	bf08      	it	eq
 8007958:	2322      	moveq	r3, #34	; 0x22
 800795a:	4682      	mov	sl, r0
 800795c:	468b      	mov	fp, r1
 800795e:	bf08      	it	eq
 8007960:	6023      	streq	r3, [r4, #0]
 8007962:	e62b      	b.n	80075bc <_strtod_l+0x4a4>
 8007964:	f04f 32ff 	mov.w	r2, #4294967295
 8007968:	fa02 f303 	lsl.w	r3, r2, r3
 800796c:	ea03 0a0a 	and.w	sl, r3, sl
 8007970:	e6e3      	b.n	800773a <_strtod_l+0x622>
 8007972:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8007976:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800797a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800797e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8007982:	fa01 f308 	lsl.w	r3, r1, r8
 8007986:	9308      	str	r3, [sp, #32]
 8007988:	910d      	str	r1, [sp, #52]	; 0x34
 800798a:	e746      	b.n	800781a <_strtod_l+0x702>
 800798c:	2300      	movs	r3, #0
 800798e:	9308      	str	r3, [sp, #32]
 8007990:	2301      	movs	r3, #1
 8007992:	930d      	str	r3, [sp, #52]	; 0x34
 8007994:	e741      	b.n	800781a <_strtod_l+0x702>
 8007996:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007998:	4642      	mov	r2, r8
 800799a:	4620      	mov	r0, r4
 800799c:	f001 fee2 	bl	8009764 <__lshift>
 80079a0:	9018      	str	r0, [sp, #96]	; 0x60
 80079a2:	2800      	cmp	r0, #0
 80079a4:	f47f af6b 	bne.w	800787e <_strtod_l+0x766>
 80079a8:	e5fe      	b.n	80075a8 <_strtod_l+0x490>
 80079aa:	465f      	mov	r7, fp
 80079ac:	d16e      	bne.n	8007a8c <_strtod_l+0x974>
 80079ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079b4:	b342      	cbz	r2, 8007a08 <_strtod_l+0x8f0>
 80079b6:	4a32      	ldr	r2, [pc, #200]	; (8007a80 <_strtod_l+0x968>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d128      	bne.n	8007a0e <_strtod_l+0x8f6>
 80079bc:	9b04      	ldr	r3, [sp, #16]
 80079be:	4651      	mov	r1, sl
 80079c0:	b1eb      	cbz	r3, 80079fe <_strtod_l+0x8e6>
 80079c2:	4b2d      	ldr	r3, [pc, #180]	; (8007a78 <_strtod_l+0x960>)
 80079c4:	403b      	ands	r3, r7
 80079c6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80079ca:	f04f 32ff 	mov.w	r2, #4294967295
 80079ce:	d819      	bhi.n	8007a04 <_strtod_l+0x8ec>
 80079d0:	0d1b      	lsrs	r3, r3, #20
 80079d2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079d6:	fa02 f303 	lsl.w	r3, r2, r3
 80079da:	4299      	cmp	r1, r3
 80079dc:	d117      	bne.n	8007a0e <_strtod_l+0x8f6>
 80079de:	4b29      	ldr	r3, [pc, #164]	; (8007a84 <_strtod_l+0x96c>)
 80079e0:	429f      	cmp	r7, r3
 80079e2:	d102      	bne.n	80079ea <_strtod_l+0x8d2>
 80079e4:	3101      	adds	r1, #1
 80079e6:	f43f addf 	beq.w	80075a8 <_strtod_l+0x490>
 80079ea:	4b23      	ldr	r3, [pc, #140]	; (8007a78 <_strtod_l+0x960>)
 80079ec:	403b      	ands	r3, r7
 80079ee:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80079f2:	f04f 0a00 	mov.w	sl, #0
 80079f6:	9b04      	ldr	r3, [sp, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1a4      	bne.n	8007946 <_strtod_l+0x82e>
 80079fc:	e5de      	b.n	80075bc <_strtod_l+0x4a4>
 80079fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007a02:	e7ea      	b.n	80079da <_strtod_l+0x8c2>
 8007a04:	4613      	mov	r3, r2
 8007a06:	e7e8      	b.n	80079da <_strtod_l+0x8c2>
 8007a08:	ea53 030a 	orrs.w	r3, r3, sl
 8007a0c:	d08c      	beq.n	8007928 <_strtod_l+0x810>
 8007a0e:	9b08      	ldr	r3, [sp, #32]
 8007a10:	b1db      	cbz	r3, 8007a4a <_strtod_l+0x932>
 8007a12:	423b      	tst	r3, r7
 8007a14:	d0ef      	beq.n	80079f6 <_strtod_l+0x8de>
 8007a16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a18:	9a04      	ldr	r2, [sp, #16]
 8007a1a:	4650      	mov	r0, sl
 8007a1c:	4659      	mov	r1, fp
 8007a1e:	b1c3      	cbz	r3, 8007a52 <_strtod_l+0x93a>
 8007a20:	f7ff fb5e 	bl	80070e0 <sulp>
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	ec51 0b18 	vmov	r0, r1, d8
 8007a2c:	f7f8 fc2e 	bl	800028c <__adddf3>
 8007a30:	4682      	mov	sl, r0
 8007a32:	468b      	mov	fp, r1
 8007a34:	e7df      	b.n	80079f6 <_strtod_l+0x8de>
 8007a36:	4013      	ands	r3, r2
 8007a38:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a3c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007a40:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007a44:	f04f 3aff 	mov.w	sl, #4294967295
 8007a48:	e7d5      	b.n	80079f6 <_strtod_l+0x8de>
 8007a4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a4c:	ea13 0f0a 	tst.w	r3, sl
 8007a50:	e7e0      	b.n	8007a14 <_strtod_l+0x8fc>
 8007a52:	f7ff fb45 	bl	80070e0 <sulp>
 8007a56:	4602      	mov	r2, r0
 8007a58:	460b      	mov	r3, r1
 8007a5a:	ec51 0b18 	vmov	r0, r1, d8
 8007a5e:	f7f8 fc13 	bl	8000288 <__aeabi_dsub>
 8007a62:	2200      	movs	r2, #0
 8007a64:	2300      	movs	r3, #0
 8007a66:	4682      	mov	sl, r0
 8007a68:	468b      	mov	fp, r1
 8007a6a:	f7f9 f82d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a6e:	2800      	cmp	r0, #0
 8007a70:	d0c1      	beq.n	80079f6 <_strtod_l+0x8de>
 8007a72:	e611      	b.n	8007698 <_strtod_l+0x580>
 8007a74:	fffffc02 	.word	0xfffffc02
 8007a78:	7ff00000 	.word	0x7ff00000
 8007a7c:	39500000 	.word	0x39500000
 8007a80:	000fffff 	.word	0x000fffff
 8007a84:	7fefffff 	.word	0x7fefffff
 8007a88:	0800acb0 	.word	0x0800acb0
 8007a8c:	4631      	mov	r1, r6
 8007a8e:	4628      	mov	r0, r5
 8007a90:	f002 f856 	bl	8009b40 <__ratio>
 8007a94:	ec59 8b10 	vmov	r8, r9, d0
 8007a98:	ee10 0a10 	vmov	r0, s0
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007aa2:	4649      	mov	r1, r9
 8007aa4:	f7f9 f824 	bl	8000af0 <__aeabi_dcmple>
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d07a      	beq.n	8007ba2 <_strtod_l+0xa8a>
 8007aac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d04a      	beq.n	8007b48 <_strtod_l+0xa30>
 8007ab2:	4b95      	ldr	r3, [pc, #596]	; (8007d08 <_strtod_l+0xbf0>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007aba:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007d08 <_strtod_l+0xbf0>
 8007abe:	f04f 0800 	mov.w	r8, #0
 8007ac2:	4b92      	ldr	r3, [pc, #584]	; (8007d0c <_strtod_l+0xbf4>)
 8007ac4:	403b      	ands	r3, r7
 8007ac6:	930d      	str	r3, [sp, #52]	; 0x34
 8007ac8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007aca:	4b91      	ldr	r3, [pc, #580]	; (8007d10 <_strtod_l+0xbf8>)
 8007acc:	429a      	cmp	r2, r3
 8007ace:	f040 80b0 	bne.w	8007c32 <_strtod_l+0xb1a>
 8007ad2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007ad6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8007ada:	ec4b ab10 	vmov	d0, sl, fp
 8007ade:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ae2:	f001 ff55 	bl	8009990 <__ulp>
 8007ae6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007aea:	ec53 2b10 	vmov	r2, r3, d0
 8007aee:	f7f8 fd83 	bl	80005f8 <__aeabi_dmul>
 8007af2:	4652      	mov	r2, sl
 8007af4:	465b      	mov	r3, fp
 8007af6:	f7f8 fbc9 	bl	800028c <__adddf3>
 8007afa:	460b      	mov	r3, r1
 8007afc:	4983      	ldr	r1, [pc, #524]	; (8007d0c <_strtod_l+0xbf4>)
 8007afe:	4a85      	ldr	r2, [pc, #532]	; (8007d14 <_strtod_l+0xbfc>)
 8007b00:	4019      	ands	r1, r3
 8007b02:	4291      	cmp	r1, r2
 8007b04:	4682      	mov	sl, r0
 8007b06:	d960      	bls.n	8007bca <_strtod_l+0xab2>
 8007b08:	ee18 3a90 	vmov	r3, s17
 8007b0c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d104      	bne.n	8007b1e <_strtod_l+0xa06>
 8007b14:	ee18 3a10 	vmov	r3, s16
 8007b18:	3301      	adds	r3, #1
 8007b1a:	f43f ad45 	beq.w	80075a8 <_strtod_l+0x490>
 8007b1e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007d20 <_strtod_l+0xc08>
 8007b22:	f04f 3aff 	mov.w	sl, #4294967295
 8007b26:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b28:	4620      	mov	r0, r4
 8007b2a:	f001 fbff 	bl	800932c <_Bfree>
 8007b2e:	9905      	ldr	r1, [sp, #20]
 8007b30:	4620      	mov	r0, r4
 8007b32:	f001 fbfb 	bl	800932c <_Bfree>
 8007b36:	4631      	mov	r1, r6
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f001 fbf7 	bl	800932c <_Bfree>
 8007b3e:	4629      	mov	r1, r5
 8007b40:	4620      	mov	r0, r4
 8007b42:	f001 fbf3 	bl	800932c <_Bfree>
 8007b46:	e61a      	b.n	800777e <_strtod_l+0x666>
 8007b48:	f1ba 0f00 	cmp.w	sl, #0
 8007b4c:	d11b      	bne.n	8007b86 <_strtod_l+0xa6e>
 8007b4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b52:	b9f3      	cbnz	r3, 8007b92 <_strtod_l+0xa7a>
 8007b54:	4b6c      	ldr	r3, [pc, #432]	; (8007d08 <_strtod_l+0xbf0>)
 8007b56:	2200      	movs	r2, #0
 8007b58:	4640      	mov	r0, r8
 8007b5a:	4649      	mov	r1, r9
 8007b5c:	f7f8 ffbe 	bl	8000adc <__aeabi_dcmplt>
 8007b60:	b9d0      	cbnz	r0, 8007b98 <_strtod_l+0xa80>
 8007b62:	4640      	mov	r0, r8
 8007b64:	4649      	mov	r1, r9
 8007b66:	4b6c      	ldr	r3, [pc, #432]	; (8007d18 <_strtod_l+0xc00>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f7f8 fd45 	bl	80005f8 <__aeabi_dmul>
 8007b6e:	4680      	mov	r8, r0
 8007b70:	4689      	mov	r9, r1
 8007b72:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b76:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8007b7a:	9315      	str	r3, [sp, #84]	; 0x54
 8007b7c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007b80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b84:	e79d      	b.n	8007ac2 <_strtod_l+0x9aa>
 8007b86:	f1ba 0f01 	cmp.w	sl, #1
 8007b8a:	d102      	bne.n	8007b92 <_strtod_l+0xa7a>
 8007b8c:	2f00      	cmp	r7, #0
 8007b8e:	f43f ad83 	beq.w	8007698 <_strtod_l+0x580>
 8007b92:	4b62      	ldr	r3, [pc, #392]	; (8007d1c <_strtod_l+0xc04>)
 8007b94:	2200      	movs	r2, #0
 8007b96:	e78e      	b.n	8007ab6 <_strtod_l+0x99e>
 8007b98:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007d18 <_strtod_l+0xc00>
 8007b9c:	f04f 0800 	mov.w	r8, #0
 8007ba0:	e7e7      	b.n	8007b72 <_strtod_l+0xa5a>
 8007ba2:	4b5d      	ldr	r3, [pc, #372]	; (8007d18 <_strtod_l+0xc00>)
 8007ba4:	4640      	mov	r0, r8
 8007ba6:	4649      	mov	r1, r9
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f7f8 fd25 	bl	80005f8 <__aeabi_dmul>
 8007bae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bb0:	4680      	mov	r8, r0
 8007bb2:	4689      	mov	r9, r1
 8007bb4:	b933      	cbnz	r3, 8007bc4 <_strtod_l+0xaac>
 8007bb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007bba:	900e      	str	r0, [sp, #56]	; 0x38
 8007bbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bbe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007bc2:	e7dd      	b.n	8007b80 <_strtod_l+0xa68>
 8007bc4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007bc8:	e7f9      	b.n	8007bbe <_strtod_l+0xaa6>
 8007bca:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007bce:	9b04      	ldr	r3, [sp, #16]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1a8      	bne.n	8007b26 <_strtod_l+0xa0e>
 8007bd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007bd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007bda:	0d1b      	lsrs	r3, r3, #20
 8007bdc:	051b      	lsls	r3, r3, #20
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d1a1      	bne.n	8007b26 <_strtod_l+0xa0e>
 8007be2:	4640      	mov	r0, r8
 8007be4:	4649      	mov	r1, r9
 8007be6:	f7f9 f867 	bl	8000cb8 <__aeabi_d2lz>
 8007bea:	f7f8 fcd7 	bl	800059c <__aeabi_l2d>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	4640      	mov	r0, r8
 8007bf4:	4649      	mov	r1, r9
 8007bf6:	f7f8 fb47 	bl	8000288 <__aeabi_dsub>
 8007bfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bfc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c00:	ea43 030a 	orr.w	r3, r3, sl
 8007c04:	4313      	orrs	r3, r2
 8007c06:	4680      	mov	r8, r0
 8007c08:	4689      	mov	r9, r1
 8007c0a:	d055      	beq.n	8007cb8 <_strtod_l+0xba0>
 8007c0c:	a336      	add	r3, pc, #216	; (adr r3, 8007ce8 <_strtod_l+0xbd0>)
 8007c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c12:	f7f8 ff63 	bl	8000adc <__aeabi_dcmplt>
 8007c16:	2800      	cmp	r0, #0
 8007c18:	f47f acd0 	bne.w	80075bc <_strtod_l+0x4a4>
 8007c1c:	a334      	add	r3, pc, #208	; (adr r3, 8007cf0 <_strtod_l+0xbd8>)
 8007c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c22:	4640      	mov	r0, r8
 8007c24:	4649      	mov	r1, r9
 8007c26:	f7f8 ff77 	bl	8000b18 <__aeabi_dcmpgt>
 8007c2a:	2800      	cmp	r0, #0
 8007c2c:	f43f af7b 	beq.w	8007b26 <_strtod_l+0xa0e>
 8007c30:	e4c4      	b.n	80075bc <_strtod_l+0x4a4>
 8007c32:	9b04      	ldr	r3, [sp, #16]
 8007c34:	b333      	cbz	r3, 8007c84 <_strtod_l+0xb6c>
 8007c36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c38:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c3c:	d822      	bhi.n	8007c84 <_strtod_l+0xb6c>
 8007c3e:	a32e      	add	r3, pc, #184	; (adr r3, 8007cf8 <_strtod_l+0xbe0>)
 8007c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c44:	4640      	mov	r0, r8
 8007c46:	4649      	mov	r1, r9
 8007c48:	f7f8 ff52 	bl	8000af0 <__aeabi_dcmple>
 8007c4c:	b1a0      	cbz	r0, 8007c78 <_strtod_l+0xb60>
 8007c4e:	4649      	mov	r1, r9
 8007c50:	4640      	mov	r0, r8
 8007c52:	f7f8 ffa9 	bl	8000ba8 <__aeabi_d2uiz>
 8007c56:	2801      	cmp	r0, #1
 8007c58:	bf38      	it	cc
 8007c5a:	2001      	movcc	r0, #1
 8007c5c:	f7f8 fc52 	bl	8000504 <__aeabi_ui2d>
 8007c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c62:	4680      	mov	r8, r0
 8007c64:	4689      	mov	r9, r1
 8007c66:	bb23      	cbnz	r3, 8007cb2 <_strtod_l+0xb9a>
 8007c68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c6c:	9010      	str	r0, [sp, #64]	; 0x40
 8007c6e:	9311      	str	r3, [sp, #68]	; 0x44
 8007c70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c74:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c7c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007c80:	1a9b      	subs	r3, r3, r2
 8007c82:	9309      	str	r3, [sp, #36]	; 0x24
 8007c84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c88:	eeb0 0a48 	vmov.f32	s0, s16
 8007c8c:	eef0 0a68 	vmov.f32	s1, s17
 8007c90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007c94:	f001 fe7c 	bl	8009990 <__ulp>
 8007c98:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c9c:	ec53 2b10 	vmov	r2, r3, d0
 8007ca0:	f7f8 fcaa 	bl	80005f8 <__aeabi_dmul>
 8007ca4:	ec53 2b18 	vmov	r2, r3, d8
 8007ca8:	f7f8 faf0 	bl	800028c <__adddf3>
 8007cac:	4682      	mov	sl, r0
 8007cae:	468b      	mov	fp, r1
 8007cb0:	e78d      	b.n	8007bce <_strtod_l+0xab6>
 8007cb2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007cb6:	e7db      	b.n	8007c70 <_strtod_l+0xb58>
 8007cb8:	a311      	add	r3, pc, #68	; (adr r3, 8007d00 <_strtod_l+0xbe8>)
 8007cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbe:	f7f8 ff0d 	bl	8000adc <__aeabi_dcmplt>
 8007cc2:	e7b2      	b.n	8007c2a <_strtod_l+0xb12>
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8007cc8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007cca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ccc:	6013      	str	r3, [r2, #0]
 8007cce:	f7ff ba6b 	b.w	80071a8 <_strtod_l+0x90>
 8007cd2:	2a65      	cmp	r2, #101	; 0x65
 8007cd4:	f43f ab5f 	beq.w	8007396 <_strtod_l+0x27e>
 8007cd8:	2a45      	cmp	r2, #69	; 0x45
 8007cda:	f43f ab5c 	beq.w	8007396 <_strtod_l+0x27e>
 8007cde:	2301      	movs	r3, #1
 8007ce0:	f7ff bb94 	b.w	800740c <_strtod_l+0x2f4>
 8007ce4:	f3af 8000 	nop.w
 8007ce8:	94a03595 	.word	0x94a03595
 8007cec:	3fdfffff 	.word	0x3fdfffff
 8007cf0:	35afe535 	.word	0x35afe535
 8007cf4:	3fe00000 	.word	0x3fe00000
 8007cf8:	ffc00000 	.word	0xffc00000
 8007cfc:	41dfffff 	.word	0x41dfffff
 8007d00:	94a03595 	.word	0x94a03595
 8007d04:	3fcfffff 	.word	0x3fcfffff
 8007d08:	3ff00000 	.word	0x3ff00000
 8007d0c:	7ff00000 	.word	0x7ff00000
 8007d10:	7fe00000 	.word	0x7fe00000
 8007d14:	7c9fffff 	.word	0x7c9fffff
 8007d18:	3fe00000 	.word	0x3fe00000
 8007d1c:	bff00000 	.word	0xbff00000
 8007d20:	7fefffff 	.word	0x7fefffff

08007d24 <_strtod_r>:
 8007d24:	4b01      	ldr	r3, [pc, #4]	; (8007d2c <_strtod_r+0x8>)
 8007d26:	f7ff b9f7 	b.w	8007118 <_strtod_l>
 8007d2a:	bf00      	nop
 8007d2c:	20000078 	.word	0x20000078

08007d30 <_strtol_l.constprop.0>:
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d36:	d001      	beq.n	8007d3c <_strtol_l.constprop.0+0xc>
 8007d38:	2b24      	cmp	r3, #36	; 0x24
 8007d3a:	d906      	bls.n	8007d4a <_strtol_l.constprop.0+0x1a>
 8007d3c:	f7fe f9f0 	bl	8006120 <__errno>
 8007d40:	2316      	movs	r3, #22
 8007d42:	6003      	str	r3, [r0, #0]
 8007d44:	2000      	movs	r0, #0
 8007d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007e30 <_strtol_l.constprop.0+0x100>
 8007d4e:	460d      	mov	r5, r1
 8007d50:	462e      	mov	r6, r5
 8007d52:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d56:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007d5a:	f017 0708 	ands.w	r7, r7, #8
 8007d5e:	d1f7      	bne.n	8007d50 <_strtol_l.constprop.0+0x20>
 8007d60:	2c2d      	cmp	r4, #45	; 0x2d
 8007d62:	d132      	bne.n	8007dca <_strtol_l.constprop.0+0x9a>
 8007d64:	782c      	ldrb	r4, [r5, #0]
 8007d66:	2701      	movs	r7, #1
 8007d68:	1cb5      	adds	r5, r6, #2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d05b      	beq.n	8007e26 <_strtol_l.constprop.0+0xf6>
 8007d6e:	2b10      	cmp	r3, #16
 8007d70:	d109      	bne.n	8007d86 <_strtol_l.constprop.0+0x56>
 8007d72:	2c30      	cmp	r4, #48	; 0x30
 8007d74:	d107      	bne.n	8007d86 <_strtol_l.constprop.0+0x56>
 8007d76:	782c      	ldrb	r4, [r5, #0]
 8007d78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007d7c:	2c58      	cmp	r4, #88	; 0x58
 8007d7e:	d14d      	bne.n	8007e1c <_strtol_l.constprop.0+0xec>
 8007d80:	786c      	ldrb	r4, [r5, #1]
 8007d82:	2310      	movs	r3, #16
 8007d84:	3502      	adds	r5, #2
 8007d86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007d8a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d8e:	f04f 0c00 	mov.w	ip, #0
 8007d92:	fbb8 f9f3 	udiv	r9, r8, r3
 8007d96:	4666      	mov	r6, ip
 8007d98:	fb03 8a19 	mls	sl, r3, r9, r8
 8007d9c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007da0:	f1be 0f09 	cmp.w	lr, #9
 8007da4:	d816      	bhi.n	8007dd4 <_strtol_l.constprop.0+0xa4>
 8007da6:	4674      	mov	r4, lr
 8007da8:	42a3      	cmp	r3, r4
 8007daa:	dd24      	ble.n	8007df6 <_strtol_l.constprop.0+0xc6>
 8007dac:	f1bc 0f00 	cmp.w	ip, #0
 8007db0:	db1e      	blt.n	8007df0 <_strtol_l.constprop.0+0xc0>
 8007db2:	45b1      	cmp	r9, r6
 8007db4:	d31c      	bcc.n	8007df0 <_strtol_l.constprop.0+0xc0>
 8007db6:	d101      	bne.n	8007dbc <_strtol_l.constprop.0+0x8c>
 8007db8:	45a2      	cmp	sl, r4
 8007dba:	db19      	blt.n	8007df0 <_strtol_l.constprop.0+0xc0>
 8007dbc:	fb06 4603 	mla	r6, r6, r3, r4
 8007dc0:	f04f 0c01 	mov.w	ip, #1
 8007dc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007dc8:	e7e8      	b.n	8007d9c <_strtol_l.constprop.0+0x6c>
 8007dca:	2c2b      	cmp	r4, #43	; 0x2b
 8007dcc:	bf04      	itt	eq
 8007dce:	782c      	ldrbeq	r4, [r5, #0]
 8007dd0:	1cb5      	addeq	r5, r6, #2
 8007dd2:	e7ca      	b.n	8007d6a <_strtol_l.constprop.0+0x3a>
 8007dd4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007dd8:	f1be 0f19 	cmp.w	lr, #25
 8007ddc:	d801      	bhi.n	8007de2 <_strtol_l.constprop.0+0xb2>
 8007dde:	3c37      	subs	r4, #55	; 0x37
 8007de0:	e7e2      	b.n	8007da8 <_strtol_l.constprop.0+0x78>
 8007de2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007de6:	f1be 0f19 	cmp.w	lr, #25
 8007dea:	d804      	bhi.n	8007df6 <_strtol_l.constprop.0+0xc6>
 8007dec:	3c57      	subs	r4, #87	; 0x57
 8007dee:	e7db      	b.n	8007da8 <_strtol_l.constprop.0+0x78>
 8007df0:	f04f 3cff 	mov.w	ip, #4294967295
 8007df4:	e7e6      	b.n	8007dc4 <_strtol_l.constprop.0+0x94>
 8007df6:	f1bc 0f00 	cmp.w	ip, #0
 8007dfa:	da05      	bge.n	8007e08 <_strtol_l.constprop.0+0xd8>
 8007dfc:	2322      	movs	r3, #34	; 0x22
 8007dfe:	6003      	str	r3, [r0, #0]
 8007e00:	4646      	mov	r6, r8
 8007e02:	b942      	cbnz	r2, 8007e16 <_strtol_l.constprop.0+0xe6>
 8007e04:	4630      	mov	r0, r6
 8007e06:	e79e      	b.n	8007d46 <_strtol_l.constprop.0+0x16>
 8007e08:	b107      	cbz	r7, 8007e0c <_strtol_l.constprop.0+0xdc>
 8007e0a:	4276      	negs	r6, r6
 8007e0c:	2a00      	cmp	r2, #0
 8007e0e:	d0f9      	beq.n	8007e04 <_strtol_l.constprop.0+0xd4>
 8007e10:	f1bc 0f00 	cmp.w	ip, #0
 8007e14:	d000      	beq.n	8007e18 <_strtol_l.constprop.0+0xe8>
 8007e16:	1e69      	subs	r1, r5, #1
 8007e18:	6011      	str	r1, [r2, #0]
 8007e1a:	e7f3      	b.n	8007e04 <_strtol_l.constprop.0+0xd4>
 8007e1c:	2430      	movs	r4, #48	; 0x30
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1b1      	bne.n	8007d86 <_strtol_l.constprop.0+0x56>
 8007e22:	2308      	movs	r3, #8
 8007e24:	e7af      	b.n	8007d86 <_strtol_l.constprop.0+0x56>
 8007e26:	2c30      	cmp	r4, #48	; 0x30
 8007e28:	d0a5      	beq.n	8007d76 <_strtol_l.constprop.0+0x46>
 8007e2a:	230a      	movs	r3, #10
 8007e2c:	e7ab      	b.n	8007d86 <_strtol_l.constprop.0+0x56>
 8007e2e:	bf00      	nop
 8007e30:	0800acd9 	.word	0x0800acd9

08007e34 <_strtol_r>:
 8007e34:	f7ff bf7c 	b.w	8007d30 <_strtol_l.constprop.0>

08007e38 <time>:
 8007e38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e3a:	4b0b      	ldr	r3, [pc, #44]	; (8007e68 <time+0x30>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	4669      	mov	r1, sp
 8007e40:	4604      	mov	r4, r0
 8007e42:	6818      	ldr	r0, [r3, #0]
 8007e44:	f001 f9fe 	bl	8009244 <_gettimeofday_r>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	bfbe      	ittt	lt
 8007e4c:	f04f 32ff 	movlt.w	r2, #4294967295
 8007e50:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e54:	e9cd 2300 	strdlt	r2, r3, [sp]
 8007e58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e5c:	b10c      	cbz	r4, 8007e62 <time+0x2a>
 8007e5e:	e9c4 0100 	strd	r0, r1, [r4]
 8007e62:	b004      	add	sp, #16
 8007e64:	bd10      	pop	{r4, pc}
 8007e66:	bf00      	nop
 8007e68:	20000010 	.word	0x20000010

08007e6c <quorem>:
 8007e6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e70:	6903      	ldr	r3, [r0, #16]
 8007e72:	690c      	ldr	r4, [r1, #16]
 8007e74:	42a3      	cmp	r3, r4
 8007e76:	4607      	mov	r7, r0
 8007e78:	f2c0 8081 	blt.w	8007f7e <quorem+0x112>
 8007e7c:	3c01      	subs	r4, #1
 8007e7e:	f101 0814 	add.w	r8, r1, #20
 8007e82:	f100 0514 	add.w	r5, r0, #20
 8007e86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e8a:	9301      	str	r3, [sp, #4]
 8007e8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e94:	3301      	adds	r3, #1
 8007e96:	429a      	cmp	r2, r3
 8007e98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ea0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ea4:	d331      	bcc.n	8007f0a <quorem+0x9e>
 8007ea6:	f04f 0e00 	mov.w	lr, #0
 8007eaa:	4640      	mov	r0, r8
 8007eac:	46ac      	mov	ip, r5
 8007eae:	46f2      	mov	sl, lr
 8007eb0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007eb4:	b293      	uxth	r3, r2
 8007eb6:	fb06 e303 	mla	r3, r6, r3, lr
 8007eba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	ebaa 0303 	sub.w	r3, sl, r3
 8007ec4:	f8dc a000 	ldr.w	sl, [ip]
 8007ec8:	0c12      	lsrs	r2, r2, #16
 8007eca:	fa13 f38a 	uxtah	r3, r3, sl
 8007ece:	fb06 e202 	mla	r2, r6, r2, lr
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	9b00      	ldr	r3, [sp, #0]
 8007ed6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007eda:	b292      	uxth	r2, r2
 8007edc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007ee0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ee4:	f8bd 3000 	ldrh.w	r3, [sp]
 8007ee8:	4581      	cmp	r9, r0
 8007eea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007eee:	f84c 3b04 	str.w	r3, [ip], #4
 8007ef2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ef6:	d2db      	bcs.n	8007eb0 <quorem+0x44>
 8007ef8:	f855 300b 	ldr.w	r3, [r5, fp]
 8007efc:	b92b      	cbnz	r3, 8007f0a <quorem+0x9e>
 8007efe:	9b01      	ldr	r3, [sp, #4]
 8007f00:	3b04      	subs	r3, #4
 8007f02:	429d      	cmp	r5, r3
 8007f04:	461a      	mov	r2, r3
 8007f06:	d32e      	bcc.n	8007f66 <quorem+0xfa>
 8007f08:	613c      	str	r4, [r7, #16]
 8007f0a:	4638      	mov	r0, r7
 8007f0c:	f001 fc9a 	bl	8009844 <__mcmp>
 8007f10:	2800      	cmp	r0, #0
 8007f12:	db24      	blt.n	8007f5e <quorem+0xf2>
 8007f14:	3601      	adds	r6, #1
 8007f16:	4628      	mov	r0, r5
 8007f18:	f04f 0c00 	mov.w	ip, #0
 8007f1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f20:	f8d0 e000 	ldr.w	lr, [r0]
 8007f24:	b293      	uxth	r3, r2
 8007f26:	ebac 0303 	sub.w	r3, ip, r3
 8007f2a:	0c12      	lsrs	r2, r2, #16
 8007f2c:	fa13 f38e 	uxtah	r3, r3, lr
 8007f30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f3e:	45c1      	cmp	r9, r8
 8007f40:	f840 3b04 	str.w	r3, [r0], #4
 8007f44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f48:	d2e8      	bcs.n	8007f1c <quorem+0xb0>
 8007f4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f52:	b922      	cbnz	r2, 8007f5e <quorem+0xf2>
 8007f54:	3b04      	subs	r3, #4
 8007f56:	429d      	cmp	r5, r3
 8007f58:	461a      	mov	r2, r3
 8007f5a:	d30a      	bcc.n	8007f72 <quorem+0x106>
 8007f5c:	613c      	str	r4, [r7, #16]
 8007f5e:	4630      	mov	r0, r6
 8007f60:	b003      	add	sp, #12
 8007f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f66:	6812      	ldr	r2, [r2, #0]
 8007f68:	3b04      	subs	r3, #4
 8007f6a:	2a00      	cmp	r2, #0
 8007f6c:	d1cc      	bne.n	8007f08 <quorem+0x9c>
 8007f6e:	3c01      	subs	r4, #1
 8007f70:	e7c7      	b.n	8007f02 <quorem+0x96>
 8007f72:	6812      	ldr	r2, [r2, #0]
 8007f74:	3b04      	subs	r3, #4
 8007f76:	2a00      	cmp	r2, #0
 8007f78:	d1f0      	bne.n	8007f5c <quorem+0xf0>
 8007f7a:	3c01      	subs	r4, #1
 8007f7c:	e7eb      	b.n	8007f56 <quorem+0xea>
 8007f7e:	2000      	movs	r0, #0
 8007f80:	e7ee      	b.n	8007f60 <quorem+0xf4>
 8007f82:	0000      	movs	r0, r0
 8007f84:	0000      	movs	r0, r0
	...

08007f88 <_dtoa_r>:
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	ed2d 8b04 	vpush	{d8-d9}
 8007f90:	ec57 6b10 	vmov	r6, r7, d0
 8007f94:	b093      	sub	sp, #76	; 0x4c
 8007f96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f9c:	9106      	str	r1, [sp, #24]
 8007f9e:	ee10 aa10 	vmov	sl, s0
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	9209      	str	r2, [sp, #36]	; 0x24
 8007fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8007fa8:	46bb      	mov	fp, r7
 8007faa:	b975      	cbnz	r5, 8007fca <_dtoa_r+0x42>
 8007fac:	2010      	movs	r0, #16
 8007fae:	f7fe f8e1 	bl	8006174 <malloc>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	6260      	str	r0, [r4, #36]	; 0x24
 8007fb6:	b920      	cbnz	r0, 8007fc2 <_dtoa_r+0x3a>
 8007fb8:	4ba7      	ldr	r3, [pc, #668]	; (8008258 <_dtoa_r+0x2d0>)
 8007fba:	21ea      	movs	r1, #234	; 0xea
 8007fbc:	48a7      	ldr	r0, [pc, #668]	; (800825c <_dtoa_r+0x2d4>)
 8007fbe:	f001 ffd1 	bl	8009f64 <__assert_func>
 8007fc2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fc6:	6005      	str	r5, [r0, #0]
 8007fc8:	60c5      	str	r5, [r0, #12]
 8007fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fcc:	6819      	ldr	r1, [r3, #0]
 8007fce:	b151      	cbz	r1, 8007fe6 <_dtoa_r+0x5e>
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	604a      	str	r2, [r1, #4]
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	4093      	lsls	r3, r2
 8007fd8:	608b      	str	r3, [r1, #8]
 8007fda:	4620      	mov	r0, r4
 8007fdc:	f001 f9a6 	bl	800932c <_Bfree>
 8007fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	1e3b      	subs	r3, r7, #0
 8007fe8:	bfaa      	itet	ge
 8007fea:	2300      	movge	r3, #0
 8007fec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007ff0:	f8c8 3000 	strge.w	r3, [r8]
 8007ff4:	4b9a      	ldr	r3, [pc, #616]	; (8008260 <_dtoa_r+0x2d8>)
 8007ff6:	bfbc      	itt	lt
 8007ff8:	2201      	movlt	r2, #1
 8007ffa:	f8c8 2000 	strlt.w	r2, [r8]
 8007ffe:	ea33 030b 	bics.w	r3, r3, fp
 8008002:	d11b      	bne.n	800803c <_dtoa_r+0xb4>
 8008004:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008006:	f242 730f 	movw	r3, #9999	; 0x270f
 800800a:	6013      	str	r3, [r2, #0]
 800800c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008010:	4333      	orrs	r3, r6
 8008012:	f000 8592 	beq.w	8008b3a <_dtoa_r+0xbb2>
 8008016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008018:	b963      	cbnz	r3, 8008034 <_dtoa_r+0xac>
 800801a:	4b92      	ldr	r3, [pc, #584]	; (8008264 <_dtoa_r+0x2dc>)
 800801c:	e022      	b.n	8008064 <_dtoa_r+0xdc>
 800801e:	4b92      	ldr	r3, [pc, #584]	; (8008268 <_dtoa_r+0x2e0>)
 8008020:	9301      	str	r3, [sp, #4]
 8008022:	3308      	adds	r3, #8
 8008024:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008026:	6013      	str	r3, [r2, #0]
 8008028:	9801      	ldr	r0, [sp, #4]
 800802a:	b013      	add	sp, #76	; 0x4c
 800802c:	ecbd 8b04 	vpop	{d8-d9}
 8008030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008034:	4b8b      	ldr	r3, [pc, #556]	; (8008264 <_dtoa_r+0x2dc>)
 8008036:	9301      	str	r3, [sp, #4]
 8008038:	3303      	adds	r3, #3
 800803a:	e7f3      	b.n	8008024 <_dtoa_r+0x9c>
 800803c:	2200      	movs	r2, #0
 800803e:	2300      	movs	r3, #0
 8008040:	4650      	mov	r0, sl
 8008042:	4659      	mov	r1, fp
 8008044:	f7f8 fd40 	bl	8000ac8 <__aeabi_dcmpeq>
 8008048:	ec4b ab19 	vmov	d9, sl, fp
 800804c:	4680      	mov	r8, r0
 800804e:	b158      	cbz	r0, 8008068 <_dtoa_r+0xe0>
 8008050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008052:	2301      	movs	r3, #1
 8008054:	6013      	str	r3, [r2, #0]
 8008056:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008058:	2b00      	cmp	r3, #0
 800805a:	f000 856b 	beq.w	8008b34 <_dtoa_r+0xbac>
 800805e:	4883      	ldr	r0, [pc, #524]	; (800826c <_dtoa_r+0x2e4>)
 8008060:	6018      	str	r0, [r3, #0]
 8008062:	1e43      	subs	r3, r0, #1
 8008064:	9301      	str	r3, [sp, #4]
 8008066:	e7df      	b.n	8008028 <_dtoa_r+0xa0>
 8008068:	ec4b ab10 	vmov	d0, sl, fp
 800806c:	aa10      	add	r2, sp, #64	; 0x40
 800806e:	a911      	add	r1, sp, #68	; 0x44
 8008070:	4620      	mov	r0, r4
 8008072:	f001 fd09 	bl	8009a88 <__d2b>
 8008076:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800807a:	ee08 0a10 	vmov	s16, r0
 800807e:	2d00      	cmp	r5, #0
 8008080:	f000 8084 	beq.w	800818c <_dtoa_r+0x204>
 8008084:	ee19 3a90 	vmov	r3, s19
 8008088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800808c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008090:	4656      	mov	r6, sl
 8008092:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008096:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800809a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800809e:	4b74      	ldr	r3, [pc, #464]	; (8008270 <_dtoa_r+0x2e8>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	4630      	mov	r0, r6
 80080a4:	4639      	mov	r1, r7
 80080a6:	f7f8 f8ef 	bl	8000288 <__aeabi_dsub>
 80080aa:	a365      	add	r3, pc, #404	; (adr r3, 8008240 <_dtoa_r+0x2b8>)
 80080ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b0:	f7f8 faa2 	bl	80005f8 <__aeabi_dmul>
 80080b4:	a364      	add	r3, pc, #400	; (adr r3, 8008248 <_dtoa_r+0x2c0>)
 80080b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ba:	f7f8 f8e7 	bl	800028c <__adddf3>
 80080be:	4606      	mov	r6, r0
 80080c0:	4628      	mov	r0, r5
 80080c2:	460f      	mov	r7, r1
 80080c4:	f7f8 fa2e 	bl	8000524 <__aeabi_i2d>
 80080c8:	a361      	add	r3, pc, #388	; (adr r3, 8008250 <_dtoa_r+0x2c8>)
 80080ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ce:	f7f8 fa93 	bl	80005f8 <__aeabi_dmul>
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	4630      	mov	r0, r6
 80080d8:	4639      	mov	r1, r7
 80080da:	f7f8 f8d7 	bl	800028c <__adddf3>
 80080de:	4606      	mov	r6, r0
 80080e0:	460f      	mov	r7, r1
 80080e2:	f7f8 fd39 	bl	8000b58 <__aeabi_d2iz>
 80080e6:	2200      	movs	r2, #0
 80080e8:	9000      	str	r0, [sp, #0]
 80080ea:	2300      	movs	r3, #0
 80080ec:	4630      	mov	r0, r6
 80080ee:	4639      	mov	r1, r7
 80080f0:	f7f8 fcf4 	bl	8000adc <__aeabi_dcmplt>
 80080f4:	b150      	cbz	r0, 800810c <_dtoa_r+0x184>
 80080f6:	9800      	ldr	r0, [sp, #0]
 80080f8:	f7f8 fa14 	bl	8000524 <__aeabi_i2d>
 80080fc:	4632      	mov	r2, r6
 80080fe:	463b      	mov	r3, r7
 8008100:	f7f8 fce2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008104:	b910      	cbnz	r0, 800810c <_dtoa_r+0x184>
 8008106:	9b00      	ldr	r3, [sp, #0]
 8008108:	3b01      	subs	r3, #1
 800810a:	9300      	str	r3, [sp, #0]
 800810c:	9b00      	ldr	r3, [sp, #0]
 800810e:	2b16      	cmp	r3, #22
 8008110:	d85a      	bhi.n	80081c8 <_dtoa_r+0x240>
 8008112:	9a00      	ldr	r2, [sp, #0]
 8008114:	4b57      	ldr	r3, [pc, #348]	; (8008274 <_dtoa_r+0x2ec>)
 8008116:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800811a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800811e:	ec51 0b19 	vmov	r0, r1, d9
 8008122:	f7f8 fcdb 	bl	8000adc <__aeabi_dcmplt>
 8008126:	2800      	cmp	r0, #0
 8008128:	d050      	beq.n	80081cc <_dtoa_r+0x244>
 800812a:	9b00      	ldr	r3, [sp, #0]
 800812c:	3b01      	subs	r3, #1
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	2300      	movs	r3, #0
 8008132:	930b      	str	r3, [sp, #44]	; 0x2c
 8008134:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008136:	1b5d      	subs	r5, r3, r5
 8008138:	1e6b      	subs	r3, r5, #1
 800813a:	9305      	str	r3, [sp, #20]
 800813c:	bf45      	ittet	mi
 800813e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008142:	9304      	strmi	r3, [sp, #16]
 8008144:	2300      	movpl	r3, #0
 8008146:	2300      	movmi	r3, #0
 8008148:	bf4c      	ite	mi
 800814a:	9305      	strmi	r3, [sp, #20]
 800814c:	9304      	strpl	r3, [sp, #16]
 800814e:	9b00      	ldr	r3, [sp, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	db3d      	blt.n	80081d0 <_dtoa_r+0x248>
 8008154:	9b05      	ldr	r3, [sp, #20]
 8008156:	9a00      	ldr	r2, [sp, #0]
 8008158:	920a      	str	r2, [sp, #40]	; 0x28
 800815a:	4413      	add	r3, r2
 800815c:	9305      	str	r3, [sp, #20]
 800815e:	2300      	movs	r3, #0
 8008160:	9307      	str	r3, [sp, #28]
 8008162:	9b06      	ldr	r3, [sp, #24]
 8008164:	2b09      	cmp	r3, #9
 8008166:	f200 8089 	bhi.w	800827c <_dtoa_r+0x2f4>
 800816a:	2b05      	cmp	r3, #5
 800816c:	bfc4      	itt	gt
 800816e:	3b04      	subgt	r3, #4
 8008170:	9306      	strgt	r3, [sp, #24]
 8008172:	9b06      	ldr	r3, [sp, #24]
 8008174:	f1a3 0302 	sub.w	r3, r3, #2
 8008178:	bfcc      	ite	gt
 800817a:	2500      	movgt	r5, #0
 800817c:	2501      	movle	r5, #1
 800817e:	2b03      	cmp	r3, #3
 8008180:	f200 8087 	bhi.w	8008292 <_dtoa_r+0x30a>
 8008184:	e8df f003 	tbb	[pc, r3]
 8008188:	59383a2d 	.word	0x59383a2d
 800818c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008190:	441d      	add	r5, r3
 8008192:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008196:	2b20      	cmp	r3, #32
 8008198:	bfc1      	itttt	gt
 800819a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800819e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80081a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80081a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80081aa:	bfda      	itte	le
 80081ac:	f1c3 0320 	rsble	r3, r3, #32
 80081b0:	fa06 f003 	lslle.w	r0, r6, r3
 80081b4:	4318      	orrgt	r0, r3
 80081b6:	f7f8 f9a5 	bl	8000504 <__aeabi_ui2d>
 80081ba:	2301      	movs	r3, #1
 80081bc:	4606      	mov	r6, r0
 80081be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80081c2:	3d01      	subs	r5, #1
 80081c4:	930e      	str	r3, [sp, #56]	; 0x38
 80081c6:	e76a      	b.n	800809e <_dtoa_r+0x116>
 80081c8:	2301      	movs	r3, #1
 80081ca:	e7b2      	b.n	8008132 <_dtoa_r+0x1aa>
 80081cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80081ce:	e7b1      	b.n	8008134 <_dtoa_r+0x1ac>
 80081d0:	9b04      	ldr	r3, [sp, #16]
 80081d2:	9a00      	ldr	r2, [sp, #0]
 80081d4:	1a9b      	subs	r3, r3, r2
 80081d6:	9304      	str	r3, [sp, #16]
 80081d8:	4253      	negs	r3, r2
 80081da:	9307      	str	r3, [sp, #28]
 80081dc:	2300      	movs	r3, #0
 80081de:	930a      	str	r3, [sp, #40]	; 0x28
 80081e0:	e7bf      	b.n	8008162 <_dtoa_r+0x1da>
 80081e2:	2300      	movs	r3, #0
 80081e4:	9308      	str	r3, [sp, #32]
 80081e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	dc55      	bgt.n	8008298 <_dtoa_r+0x310>
 80081ec:	2301      	movs	r3, #1
 80081ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80081f2:	461a      	mov	r2, r3
 80081f4:	9209      	str	r2, [sp, #36]	; 0x24
 80081f6:	e00c      	b.n	8008212 <_dtoa_r+0x28a>
 80081f8:	2301      	movs	r3, #1
 80081fa:	e7f3      	b.n	80081e4 <_dtoa_r+0x25c>
 80081fc:	2300      	movs	r3, #0
 80081fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008200:	9308      	str	r3, [sp, #32]
 8008202:	9b00      	ldr	r3, [sp, #0]
 8008204:	4413      	add	r3, r2
 8008206:	9302      	str	r3, [sp, #8]
 8008208:	3301      	adds	r3, #1
 800820a:	2b01      	cmp	r3, #1
 800820c:	9303      	str	r3, [sp, #12]
 800820e:	bfb8      	it	lt
 8008210:	2301      	movlt	r3, #1
 8008212:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008214:	2200      	movs	r2, #0
 8008216:	6042      	str	r2, [r0, #4]
 8008218:	2204      	movs	r2, #4
 800821a:	f102 0614 	add.w	r6, r2, #20
 800821e:	429e      	cmp	r6, r3
 8008220:	6841      	ldr	r1, [r0, #4]
 8008222:	d93d      	bls.n	80082a0 <_dtoa_r+0x318>
 8008224:	4620      	mov	r0, r4
 8008226:	f001 f841 	bl	80092ac <_Balloc>
 800822a:	9001      	str	r0, [sp, #4]
 800822c:	2800      	cmp	r0, #0
 800822e:	d13b      	bne.n	80082a8 <_dtoa_r+0x320>
 8008230:	4b11      	ldr	r3, [pc, #68]	; (8008278 <_dtoa_r+0x2f0>)
 8008232:	4602      	mov	r2, r0
 8008234:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008238:	e6c0      	b.n	8007fbc <_dtoa_r+0x34>
 800823a:	2301      	movs	r3, #1
 800823c:	e7df      	b.n	80081fe <_dtoa_r+0x276>
 800823e:	bf00      	nop
 8008240:	636f4361 	.word	0x636f4361
 8008244:	3fd287a7 	.word	0x3fd287a7
 8008248:	8b60c8b3 	.word	0x8b60c8b3
 800824c:	3fc68a28 	.word	0x3fc68a28
 8008250:	509f79fb 	.word	0x509f79fb
 8008254:	3fd34413 	.word	0x3fd34413
 8008258:	0800ade6 	.word	0x0800ade6
 800825c:	0800adfd 	.word	0x0800adfd
 8008260:	7ff00000 	.word	0x7ff00000
 8008264:	0800ade2 	.word	0x0800ade2
 8008268:	0800add9 	.word	0x0800add9
 800826c:	0800ac5d 	.word	0x0800ac5d
 8008270:	3ff80000 	.word	0x3ff80000
 8008274:	0800af68 	.word	0x0800af68
 8008278:	0800ae58 	.word	0x0800ae58
 800827c:	2501      	movs	r5, #1
 800827e:	2300      	movs	r3, #0
 8008280:	9306      	str	r3, [sp, #24]
 8008282:	9508      	str	r5, [sp, #32]
 8008284:	f04f 33ff 	mov.w	r3, #4294967295
 8008288:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800828c:	2200      	movs	r2, #0
 800828e:	2312      	movs	r3, #18
 8008290:	e7b0      	b.n	80081f4 <_dtoa_r+0x26c>
 8008292:	2301      	movs	r3, #1
 8008294:	9308      	str	r3, [sp, #32]
 8008296:	e7f5      	b.n	8008284 <_dtoa_r+0x2fc>
 8008298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800829a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800829e:	e7b8      	b.n	8008212 <_dtoa_r+0x28a>
 80082a0:	3101      	adds	r1, #1
 80082a2:	6041      	str	r1, [r0, #4]
 80082a4:	0052      	lsls	r2, r2, #1
 80082a6:	e7b8      	b.n	800821a <_dtoa_r+0x292>
 80082a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80082aa:	9a01      	ldr	r2, [sp, #4]
 80082ac:	601a      	str	r2, [r3, #0]
 80082ae:	9b03      	ldr	r3, [sp, #12]
 80082b0:	2b0e      	cmp	r3, #14
 80082b2:	f200 809d 	bhi.w	80083f0 <_dtoa_r+0x468>
 80082b6:	2d00      	cmp	r5, #0
 80082b8:	f000 809a 	beq.w	80083f0 <_dtoa_r+0x468>
 80082bc:	9b00      	ldr	r3, [sp, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	dd32      	ble.n	8008328 <_dtoa_r+0x3a0>
 80082c2:	4ab7      	ldr	r2, [pc, #732]	; (80085a0 <_dtoa_r+0x618>)
 80082c4:	f003 030f 	and.w	r3, r3, #15
 80082c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80082cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082d0:	9b00      	ldr	r3, [sp, #0]
 80082d2:	05d8      	lsls	r0, r3, #23
 80082d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80082d8:	d516      	bpl.n	8008308 <_dtoa_r+0x380>
 80082da:	4bb2      	ldr	r3, [pc, #712]	; (80085a4 <_dtoa_r+0x61c>)
 80082dc:	ec51 0b19 	vmov	r0, r1, d9
 80082e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082e4:	f7f8 fab2 	bl	800084c <__aeabi_ddiv>
 80082e8:	f007 070f 	and.w	r7, r7, #15
 80082ec:	4682      	mov	sl, r0
 80082ee:	468b      	mov	fp, r1
 80082f0:	2503      	movs	r5, #3
 80082f2:	4eac      	ldr	r6, [pc, #688]	; (80085a4 <_dtoa_r+0x61c>)
 80082f4:	b957      	cbnz	r7, 800830c <_dtoa_r+0x384>
 80082f6:	4642      	mov	r2, r8
 80082f8:	464b      	mov	r3, r9
 80082fa:	4650      	mov	r0, sl
 80082fc:	4659      	mov	r1, fp
 80082fe:	f7f8 faa5 	bl	800084c <__aeabi_ddiv>
 8008302:	4682      	mov	sl, r0
 8008304:	468b      	mov	fp, r1
 8008306:	e028      	b.n	800835a <_dtoa_r+0x3d2>
 8008308:	2502      	movs	r5, #2
 800830a:	e7f2      	b.n	80082f2 <_dtoa_r+0x36a>
 800830c:	07f9      	lsls	r1, r7, #31
 800830e:	d508      	bpl.n	8008322 <_dtoa_r+0x39a>
 8008310:	4640      	mov	r0, r8
 8008312:	4649      	mov	r1, r9
 8008314:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008318:	f7f8 f96e 	bl	80005f8 <__aeabi_dmul>
 800831c:	3501      	adds	r5, #1
 800831e:	4680      	mov	r8, r0
 8008320:	4689      	mov	r9, r1
 8008322:	107f      	asrs	r7, r7, #1
 8008324:	3608      	adds	r6, #8
 8008326:	e7e5      	b.n	80082f4 <_dtoa_r+0x36c>
 8008328:	f000 809b 	beq.w	8008462 <_dtoa_r+0x4da>
 800832c:	9b00      	ldr	r3, [sp, #0]
 800832e:	4f9d      	ldr	r7, [pc, #628]	; (80085a4 <_dtoa_r+0x61c>)
 8008330:	425e      	negs	r6, r3
 8008332:	4b9b      	ldr	r3, [pc, #620]	; (80085a0 <_dtoa_r+0x618>)
 8008334:	f006 020f 	and.w	r2, r6, #15
 8008338:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800833c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008340:	ec51 0b19 	vmov	r0, r1, d9
 8008344:	f7f8 f958 	bl	80005f8 <__aeabi_dmul>
 8008348:	1136      	asrs	r6, r6, #4
 800834a:	4682      	mov	sl, r0
 800834c:	468b      	mov	fp, r1
 800834e:	2300      	movs	r3, #0
 8008350:	2502      	movs	r5, #2
 8008352:	2e00      	cmp	r6, #0
 8008354:	d17a      	bne.n	800844c <_dtoa_r+0x4c4>
 8008356:	2b00      	cmp	r3, #0
 8008358:	d1d3      	bne.n	8008302 <_dtoa_r+0x37a>
 800835a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 8082 	beq.w	8008466 <_dtoa_r+0x4de>
 8008362:	4b91      	ldr	r3, [pc, #580]	; (80085a8 <_dtoa_r+0x620>)
 8008364:	2200      	movs	r2, #0
 8008366:	4650      	mov	r0, sl
 8008368:	4659      	mov	r1, fp
 800836a:	f7f8 fbb7 	bl	8000adc <__aeabi_dcmplt>
 800836e:	2800      	cmp	r0, #0
 8008370:	d079      	beq.n	8008466 <_dtoa_r+0x4de>
 8008372:	9b03      	ldr	r3, [sp, #12]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d076      	beq.n	8008466 <_dtoa_r+0x4de>
 8008378:	9b02      	ldr	r3, [sp, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	dd36      	ble.n	80083ec <_dtoa_r+0x464>
 800837e:	9b00      	ldr	r3, [sp, #0]
 8008380:	4650      	mov	r0, sl
 8008382:	4659      	mov	r1, fp
 8008384:	1e5f      	subs	r7, r3, #1
 8008386:	2200      	movs	r2, #0
 8008388:	4b88      	ldr	r3, [pc, #544]	; (80085ac <_dtoa_r+0x624>)
 800838a:	f7f8 f935 	bl	80005f8 <__aeabi_dmul>
 800838e:	9e02      	ldr	r6, [sp, #8]
 8008390:	4682      	mov	sl, r0
 8008392:	468b      	mov	fp, r1
 8008394:	3501      	adds	r5, #1
 8008396:	4628      	mov	r0, r5
 8008398:	f7f8 f8c4 	bl	8000524 <__aeabi_i2d>
 800839c:	4652      	mov	r2, sl
 800839e:	465b      	mov	r3, fp
 80083a0:	f7f8 f92a 	bl	80005f8 <__aeabi_dmul>
 80083a4:	4b82      	ldr	r3, [pc, #520]	; (80085b0 <_dtoa_r+0x628>)
 80083a6:	2200      	movs	r2, #0
 80083a8:	f7f7 ff70 	bl	800028c <__adddf3>
 80083ac:	46d0      	mov	r8, sl
 80083ae:	46d9      	mov	r9, fp
 80083b0:	4682      	mov	sl, r0
 80083b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80083b6:	2e00      	cmp	r6, #0
 80083b8:	d158      	bne.n	800846c <_dtoa_r+0x4e4>
 80083ba:	4b7e      	ldr	r3, [pc, #504]	; (80085b4 <_dtoa_r+0x62c>)
 80083bc:	2200      	movs	r2, #0
 80083be:	4640      	mov	r0, r8
 80083c0:	4649      	mov	r1, r9
 80083c2:	f7f7 ff61 	bl	8000288 <__aeabi_dsub>
 80083c6:	4652      	mov	r2, sl
 80083c8:	465b      	mov	r3, fp
 80083ca:	4680      	mov	r8, r0
 80083cc:	4689      	mov	r9, r1
 80083ce:	f7f8 fba3 	bl	8000b18 <__aeabi_dcmpgt>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	f040 8295 	bne.w	8008902 <_dtoa_r+0x97a>
 80083d8:	4652      	mov	r2, sl
 80083da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80083de:	4640      	mov	r0, r8
 80083e0:	4649      	mov	r1, r9
 80083e2:	f7f8 fb7b 	bl	8000adc <__aeabi_dcmplt>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	f040 8289 	bne.w	80088fe <_dtoa_r+0x976>
 80083ec:	ec5b ab19 	vmov	sl, fp, d9
 80083f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f2c0 8148 	blt.w	8008688 <_dtoa_r+0x700>
 80083f8:	9a00      	ldr	r2, [sp, #0]
 80083fa:	2a0e      	cmp	r2, #14
 80083fc:	f300 8144 	bgt.w	8008688 <_dtoa_r+0x700>
 8008400:	4b67      	ldr	r3, [pc, #412]	; (80085a0 <_dtoa_r+0x618>)
 8008402:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008406:	e9d3 8900 	ldrd	r8, r9, [r3]
 800840a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800840c:	2b00      	cmp	r3, #0
 800840e:	f280 80d5 	bge.w	80085bc <_dtoa_r+0x634>
 8008412:	9b03      	ldr	r3, [sp, #12]
 8008414:	2b00      	cmp	r3, #0
 8008416:	f300 80d1 	bgt.w	80085bc <_dtoa_r+0x634>
 800841a:	f040 826f 	bne.w	80088fc <_dtoa_r+0x974>
 800841e:	4b65      	ldr	r3, [pc, #404]	; (80085b4 <_dtoa_r+0x62c>)
 8008420:	2200      	movs	r2, #0
 8008422:	4640      	mov	r0, r8
 8008424:	4649      	mov	r1, r9
 8008426:	f7f8 f8e7 	bl	80005f8 <__aeabi_dmul>
 800842a:	4652      	mov	r2, sl
 800842c:	465b      	mov	r3, fp
 800842e:	f7f8 fb69 	bl	8000b04 <__aeabi_dcmpge>
 8008432:	9e03      	ldr	r6, [sp, #12]
 8008434:	4637      	mov	r7, r6
 8008436:	2800      	cmp	r0, #0
 8008438:	f040 8245 	bne.w	80088c6 <_dtoa_r+0x93e>
 800843c:	9d01      	ldr	r5, [sp, #4]
 800843e:	2331      	movs	r3, #49	; 0x31
 8008440:	f805 3b01 	strb.w	r3, [r5], #1
 8008444:	9b00      	ldr	r3, [sp, #0]
 8008446:	3301      	adds	r3, #1
 8008448:	9300      	str	r3, [sp, #0]
 800844a:	e240      	b.n	80088ce <_dtoa_r+0x946>
 800844c:	07f2      	lsls	r2, r6, #31
 800844e:	d505      	bpl.n	800845c <_dtoa_r+0x4d4>
 8008450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008454:	f7f8 f8d0 	bl	80005f8 <__aeabi_dmul>
 8008458:	3501      	adds	r5, #1
 800845a:	2301      	movs	r3, #1
 800845c:	1076      	asrs	r6, r6, #1
 800845e:	3708      	adds	r7, #8
 8008460:	e777      	b.n	8008352 <_dtoa_r+0x3ca>
 8008462:	2502      	movs	r5, #2
 8008464:	e779      	b.n	800835a <_dtoa_r+0x3d2>
 8008466:	9f00      	ldr	r7, [sp, #0]
 8008468:	9e03      	ldr	r6, [sp, #12]
 800846a:	e794      	b.n	8008396 <_dtoa_r+0x40e>
 800846c:	9901      	ldr	r1, [sp, #4]
 800846e:	4b4c      	ldr	r3, [pc, #304]	; (80085a0 <_dtoa_r+0x618>)
 8008470:	4431      	add	r1, r6
 8008472:	910d      	str	r1, [sp, #52]	; 0x34
 8008474:	9908      	ldr	r1, [sp, #32]
 8008476:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800847a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800847e:	2900      	cmp	r1, #0
 8008480:	d043      	beq.n	800850a <_dtoa_r+0x582>
 8008482:	494d      	ldr	r1, [pc, #308]	; (80085b8 <_dtoa_r+0x630>)
 8008484:	2000      	movs	r0, #0
 8008486:	f7f8 f9e1 	bl	800084c <__aeabi_ddiv>
 800848a:	4652      	mov	r2, sl
 800848c:	465b      	mov	r3, fp
 800848e:	f7f7 fefb 	bl	8000288 <__aeabi_dsub>
 8008492:	9d01      	ldr	r5, [sp, #4]
 8008494:	4682      	mov	sl, r0
 8008496:	468b      	mov	fp, r1
 8008498:	4649      	mov	r1, r9
 800849a:	4640      	mov	r0, r8
 800849c:	f7f8 fb5c 	bl	8000b58 <__aeabi_d2iz>
 80084a0:	4606      	mov	r6, r0
 80084a2:	f7f8 f83f 	bl	8000524 <__aeabi_i2d>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4640      	mov	r0, r8
 80084ac:	4649      	mov	r1, r9
 80084ae:	f7f7 feeb 	bl	8000288 <__aeabi_dsub>
 80084b2:	3630      	adds	r6, #48	; 0x30
 80084b4:	f805 6b01 	strb.w	r6, [r5], #1
 80084b8:	4652      	mov	r2, sl
 80084ba:	465b      	mov	r3, fp
 80084bc:	4680      	mov	r8, r0
 80084be:	4689      	mov	r9, r1
 80084c0:	f7f8 fb0c 	bl	8000adc <__aeabi_dcmplt>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d163      	bne.n	8008590 <_dtoa_r+0x608>
 80084c8:	4642      	mov	r2, r8
 80084ca:	464b      	mov	r3, r9
 80084cc:	4936      	ldr	r1, [pc, #216]	; (80085a8 <_dtoa_r+0x620>)
 80084ce:	2000      	movs	r0, #0
 80084d0:	f7f7 feda 	bl	8000288 <__aeabi_dsub>
 80084d4:	4652      	mov	r2, sl
 80084d6:	465b      	mov	r3, fp
 80084d8:	f7f8 fb00 	bl	8000adc <__aeabi_dcmplt>
 80084dc:	2800      	cmp	r0, #0
 80084de:	f040 80b5 	bne.w	800864c <_dtoa_r+0x6c4>
 80084e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084e4:	429d      	cmp	r5, r3
 80084e6:	d081      	beq.n	80083ec <_dtoa_r+0x464>
 80084e8:	4b30      	ldr	r3, [pc, #192]	; (80085ac <_dtoa_r+0x624>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	4650      	mov	r0, sl
 80084ee:	4659      	mov	r1, fp
 80084f0:	f7f8 f882 	bl	80005f8 <__aeabi_dmul>
 80084f4:	4b2d      	ldr	r3, [pc, #180]	; (80085ac <_dtoa_r+0x624>)
 80084f6:	4682      	mov	sl, r0
 80084f8:	468b      	mov	fp, r1
 80084fa:	4640      	mov	r0, r8
 80084fc:	4649      	mov	r1, r9
 80084fe:	2200      	movs	r2, #0
 8008500:	f7f8 f87a 	bl	80005f8 <__aeabi_dmul>
 8008504:	4680      	mov	r8, r0
 8008506:	4689      	mov	r9, r1
 8008508:	e7c6      	b.n	8008498 <_dtoa_r+0x510>
 800850a:	4650      	mov	r0, sl
 800850c:	4659      	mov	r1, fp
 800850e:	f7f8 f873 	bl	80005f8 <__aeabi_dmul>
 8008512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008514:	9d01      	ldr	r5, [sp, #4]
 8008516:	930f      	str	r3, [sp, #60]	; 0x3c
 8008518:	4682      	mov	sl, r0
 800851a:	468b      	mov	fp, r1
 800851c:	4649      	mov	r1, r9
 800851e:	4640      	mov	r0, r8
 8008520:	f7f8 fb1a 	bl	8000b58 <__aeabi_d2iz>
 8008524:	4606      	mov	r6, r0
 8008526:	f7f7 fffd 	bl	8000524 <__aeabi_i2d>
 800852a:	3630      	adds	r6, #48	; 0x30
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	4640      	mov	r0, r8
 8008532:	4649      	mov	r1, r9
 8008534:	f7f7 fea8 	bl	8000288 <__aeabi_dsub>
 8008538:	f805 6b01 	strb.w	r6, [r5], #1
 800853c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800853e:	429d      	cmp	r5, r3
 8008540:	4680      	mov	r8, r0
 8008542:	4689      	mov	r9, r1
 8008544:	f04f 0200 	mov.w	r2, #0
 8008548:	d124      	bne.n	8008594 <_dtoa_r+0x60c>
 800854a:	4b1b      	ldr	r3, [pc, #108]	; (80085b8 <_dtoa_r+0x630>)
 800854c:	4650      	mov	r0, sl
 800854e:	4659      	mov	r1, fp
 8008550:	f7f7 fe9c 	bl	800028c <__adddf3>
 8008554:	4602      	mov	r2, r0
 8008556:	460b      	mov	r3, r1
 8008558:	4640      	mov	r0, r8
 800855a:	4649      	mov	r1, r9
 800855c:	f7f8 fadc 	bl	8000b18 <__aeabi_dcmpgt>
 8008560:	2800      	cmp	r0, #0
 8008562:	d173      	bne.n	800864c <_dtoa_r+0x6c4>
 8008564:	4652      	mov	r2, sl
 8008566:	465b      	mov	r3, fp
 8008568:	4913      	ldr	r1, [pc, #76]	; (80085b8 <_dtoa_r+0x630>)
 800856a:	2000      	movs	r0, #0
 800856c:	f7f7 fe8c 	bl	8000288 <__aeabi_dsub>
 8008570:	4602      	mov	r2, r0
 8008572:	460b      	mov	r3, r1
 8008574:	4640      	mov	r0, r8
 8008576:	4649      	mov	r1, r9
 8008578:	f7f8 fab0 	bl	8000adc <__aeabi_dcmplt>
 800857c:	2800      	cmp	r0, #0
 800857e:	f43f af35 	beq.w	80083ec <_dtoa_r+0x464>
 8008582:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008584:	1e6b      	subs	r3, r5, #1
 8008586:	930f      	str	r3, [sp, #60]	; 0x3c
 8008588:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800858c:	2b30      	cmp	r3, #48	; 0x30
 800858e:	d0f8      	beq.n	8008582 <_dtoa_r+0x5fa>
 8008590:	9700      	str	r7, [sp, #0]
 8008592:	e049      	b.n	8008628 <_dtoa_r+0x6a0>
 8008594:	4b05      	ldr	r3, [pc, #20]	; (80085ac <_dtoa_r+0x624>)
 8008596:	f7f8 f82f 	bl	80005f8 <__aeabi_dmul>
 800859a:	4680      	mov	r8, r0
 800859c:	4689      	mov	r9, r1
 800859e:	e7bd      	b.n	800851c <_dtoa_r+0x594>
 80085a0:	0800af68 	.word	0x0800af68
 80085a4:	0800af40 	.word	0x0800af40
 80085a8:	3ff00000 	.word	0x3ff00000
 80085ac:	40240000 	.word	0x40240000
 80085b0:	401c0000 	.word	0x401c0000
 80085b4:	40140000 	.word	0x40140000
 80085b8:	3fe00000 	.word	0x3fe00000
 80085bc:	9d01      	ldr	r5, [sp, #4]
 80085be:	4656      	mov	r6, sl
 80085c0:	465f      	mov	r7, fp
 80085c2:	4642      	mov	r2, r8
 80085c4:	464b      	mov	r3, r9
 80085c6:	4630      	mov	r0, r6
 80085c8:	4639      	mov	r1, r7
 80085ca:	f7f8 f93f 	bl	800084c <__aeabi_ddiv>
 80085ce:	f7f8 fac3 	bl	8000b58 <__aeabi_d2iz>
 80085d2:	4682      	mov	sl, r0
 80085d4:	f7f7 ffa6 	bl	8000524 <__aeabi_i2d>
 80085d8:	4642      	mov	r2, r8
 80085da:	464b      	mov	r3, r9
 80085dc:	f7f8 f80c 	bl	80005f8 <__aeabi_dmul>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	4630      	mov	r0, r6
 80085e6:	4639      	mov	r1, r7
 80085e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80085ec:	f7f7 fe4c 	bl	8000288 <__aeabi_dsub>
 80085f0:	f805 6b01 	strb.w	r6, [r5], #1
 80085f4:	9e01      	ldr	r6, [sp, #4]
 80085f6:	9f03      	ldr	r7, [sp, #12]
 80085f8:	1bae      	subs	r6, r5, r6
 80085fa:	42b7      	cmp	r7, r6
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	d135      	bne.n	800866e <_dtoa_r+0x6e6>
 8008602:	f7f7 fe43 	bl	800028c <__adddf3>
 8008606:	4642      	mov	r2, r8
 8008608:	464b      	mov	r3, r9
 800860a:	4606      	mov	r6, r0
 800860c:	460f      	mov	r7, r1
 800860e:	f7f8 fa83 	bl	8000b18 <__aeabi_dcmpgt>
 8008612:	b9d0      	cbnz	r0, 800864a <_dtoa_r+0x6c2>
 8008614:	4642      	mov	r2, r8
 8008616:	464b      	mov	r3, r9
 8008618:	4630      	mov	r0, r6
 800861a:	4639      	mov	r1, r7
 800861c:	f7f8 fa54 	bl	8000ac8 <__aeabi_dcmpeq>
 8008620:	b110      	cbz	r0, 8008628 <_dtoa_r+0x6a0>
 8008622:	f01a 0f01 	tst.w	sl, #1
 8008626:	d110      	bne.n	800864a <_dtoa_r+0x6c2>
 8008628:	4620      	mov	r0, r4
 800862a:	ee18 1a10 	vmov	r1, s16
 800862e:	f000 fe7d 	bl	800932c <_Bfree>
 8008632:	2300      	movs	r3, #0
 8008634:	9800      	ldr	r0, [sp, #0]
 8008636:	702b      	strb	r3, [r5, #0]
 8008638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800863a:	3001      	adds	r0, #1
 800863c:	6018      	str	r0, [r3, #0]
 800863e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008640:	2b00      	cmp	r3, #0
 8008642:	f43f acf1 	beq.w	8008028 <_dtoa_r+0xa0>
 8008646:	601d      	str	r5, [r3, #0]
 8008648:	e4ee      	b.n	8008028 <_dtoa_r+0xa0>
 800864a:	9f00      	ldr	r7, [sp, #0]
 800864c:	462b      	mov	r3, r5
 800864e:	461d      	mov	r5, r3
 8008650:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008654:	2a39      	cmp	r2, #57	; 0x39
 8008656:	d106      	bne.n	8008666 <_dtoa_r+0x6de>
 8008658:	9a01      	ldr	r2, [sp, #4]
 800865a:	429a      	cmp	r2, r3
 800865c:	d1f7      	bne.n	800864e <_dtoa_r+0x6c6>
 800865e:	9901      	ldr	r1, [sp, #4]
 8008660:	2230      	movs	r2, #48	; 0x30
 8008662:	3701      	adds	r7, #1
 8008664:	700a      	strb	r2, [r1, #0]
 8008666:	781a      	ldrb	r2, [r3, #0]
 8008668:	3201      	adds	r2, #1
 800866a:	701a      	strb	r2, [r3, #0]
 800866c:	e790      	b.n	8008590 <_dtoa_r+0x608>
 800866e:	4ba6      	ldr	r3, [pc, #664]	; (8008908 <_dtoa_r+0x980>)
 8008670:	2200      	movs	r2, #0
 8008672:	f7f7 ffc1 	bl	80005f8 <__aeabi_dmul>
 8008676:	2200      	movs	r2, #0
 8008678:	2300      	movs	r3, #0
 800867a:	4606      	mov	r6, r0
 800867c:	460f      	mov	r7, r1
 800867e:	f7f8 fa23 	bl	8000ac8 <__aeabi_dcmpeq>
 8008682:	2800      	cmp	r0, #0
 8008684:	d09d      	beq.n	80085c2 <_dtoa_r+0x63a>
 8008686:	e7cf      	b.n	8008628 <_dtoa_r+0x6a0>
 8008688:	9a08      	ldr	r2, [sp, #32]
 800868a:	2a00      	cmp	r2, #0
 800868c:	f000 80d7 	beq.w	800883e <_dtoa_r+0x8b6>
 8008690:	9a06      	ldr	r2, [sp, #24]
 8008692:	2a01      	cmp	r2, #1
 8008694:	f300 80ba 	bgt.w	800880c <_dtoa_r+0x884>
 8008698:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800869a:	2a00      	cmp	r2, #0
 800869c:	f000 80b2 	beq.w	8008804 <_dtoa_r+0x87c>
 80086a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80086a4:	9e07      	ldr	r6, [sp, #28]
 80086a6:	9d04      	ldr	r5, [sp, #16]
 80086a8:	9a04      	ldr	r2, [sp, #16]
 80086aa:	441a      	add	r2, r3
 80086ac:	9204      	str	r2, [sp, #16]
 80086ae:	9a05      	ldr	r2, [sp, #20]
 80086b0:	2101      	movs	r1, #1
 80086b2:	441a      	add	r2, r3
 80086b4:	4620      	mov	r0, r4
 80086b6:	9205      	str	r2, [sp, #20]
 80086b8:	f000 ff3a 	bl	8009530 <__i2b>
 80086bc:	4607      	mov	r7, r0
 80086be:	2d00      	cmp	r5, #0
 80086c0:	dd0c      	ble.n	80086dc <_dtoa_r+0x754>
 80086c2:	9b05      	ldr	r3, [sp, #20]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	dd09      	ble.n	80086dc <_dtoa_r+0x754>
 80086c8:	42ab      	cmp	r3, r5
 80086ca:	9a04      	ldr	r2, [sp, #16]
 80086cc:	bfa8      	it	ge
 80086ce:	462b      	movge	r3, r5
 80086d0:	1ad2      	subs	r2, r2, r3
 80086d2:	9204      	str	r2, [sp, #16]
 80086d4:	9a05      	ldr	r2, [sp, #20]
 80086d6:	1aed      	subs	r5, r5, r3
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	9305      	str	r3, [sp, #20]
 80086dc:	9b07      	ldr	r3, [sp, #28]
 80086de:	b31b      	cbz	r3, 8008728 <_dtoa_r+0x7a0>
 80086e0:	9b08      	ldr	r3, [sp, #32]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f000 80af 	beq.w	8008846 <_dtoa_r+0x8be>
 80086e8:	2e00      	cmp	r6, #0
 80086ea:	dd13      	ble.n	8008714 <_dtoa_r+0x78c>
 80086ec:	4639      	mov	r1, r7
 80086ee:	4632      	mov	r2, r6
 80086f0:	4620      	mov	r0, r4
 80086f2:	f000 ffdd 	bl	80096b0 <__pow5mult>
 80086f6:	ee18 2a10 	vmov	r2, s16
 80086fa:	4601      	mov	r1, r0
 80086fc:	4607      	mov	r7, r0
 80086fe:	4620      	mov	r0, r4
 8008700:	f000 ff2c 	bl	800955c <__multiply>
 8008704:	ee18 1a10 	vmov	r1, s16
 8008708:	4680      	mov	r8, r0
 800870a:	4620      	mov	r0, r4
 800870c:	f000 fe0e 	bl	800932c <_Bfree>
 8008710:	ee08 8a10 	vmov	s16, r8
 8008714:	9b07      	ldr	r3, [sp, #28]
 8008716:	1b9a      	subs	r2, r3, r6
 8008718:	d006      	beq.n	8008728 <_dtoa_r+0x7a0>
 800871a:	ee18 1a10 	vmov	r1, s16
 800871e:	4620      	mov	r0, r4
 8008720:	f000 ffc6 	bl	80096b0 <__pow5mult>
 8008724:	ee08 0a10 	vmov	s16, r0
 8008728:	2101      	movs	r1, #1
 800872a:	4620      	mov	r0, r4
 800872c:	f000 ff00 	bl	8009530 <__i2b>
 8008730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008732:	2b00      	cmp	r3, #0
 8008734:	4606      	mov	r6, r0
 8008736:	f340 8088 	ble.w	800884a <_dtoa_r+0x8c2>
 800873a:	461a      	mov	r2, r3
 800873c:	4601      	mov	r1, r0
 800873e:	4620      	mov	r0, r4
 8008740:	f000 ffb6 	bl	80096b0 <__pow5mult>
 8008744:	9b06      	ldr	r3, [sp, #24]
 8008746:	2b01      	cmp	r3, #1
 8008748:	4606      	mov	r6, r0
 800874a:	f340 8081 	ble.w	8008850 <_dtoa_r+0x8c8>
 800874e:	f04f 0800 	mov.w	r8, #0
 8008752:	6933      	ldr	r3, [r6, #16]
 8008754:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008758:	6918      	ldr	r0, [r3, #16]
 800875a:	f000 fe99 	bl	8009490 <__hi0bits>
 800875e:	f1c0 0020 	rsb	r0, r0, #32
 8008762:	9b05      	ldr	r3, [sp, #20]
 8008764:	4418      	add	r0, r3
 8008766:	f010 001f 	ands.w	r0, r0, #31
 800876a:	f000 8092 	beq.w	8008892 <_dtoa_r+0x90a>
 800876e:	f1c0 0320 	rsb	r3, r0, #32
 8008772:	2b04      	cmp	r3, #4
 8008774:	f340 808a 	ble.w	800888c <_dtoa_r+0x904>
 8008778:	f1c0 001c 	rsb	r0, r0, #28
 800877c:	9b04      	ldr	r3, [sp, #16]
 800877e:	4403      	add	r3, r0
 8008780:	9304      	str	r3, [sp, #16]
 8008782:	9b05      	ldr	r3, [sp, #20]
 8008784:	4403      	add	r3, r0
 8008786:	4405      	add	r5, r0
 8008788:	9305      	str	r3, [sp, #20]
 800878a:	9b04      	ldr	r3, [sp, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	dd07      	ble.n	80087a0 <_dtoa_r+0x818>
 8008790:	ee18 1a10 	vmov	r1, s16
 8008794:	461a      	mov	r2, r3
 8008796:	4620      	mov	r0, r4
 8008798:	f000 ffe4 	bl	8009764 <__lshift>
 800879c:	ee08 0a10 	vmov	s16, r0
 80087a0:	9b05      	ldr	r3, [sp, #20]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	dd05      	ble.n	80087b2 <_dtoa_r+0x82a>
 80087a6:	4631      	mov	r1, r6
 80087a8:	461a      	mov	r2, r3
 80087aa:	4620      	mov	r0, r4
 80087ac:	f000 ffda 	bl	8009764 <__lshift>
 80087b0:	4606      	mov	r6, r0
 80087b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d06e      	beq.n	8008896 <_dtoa_r+0x90e>
 80087b8:	ee18 0a10 	vmov	r0, s16
 80087bc:	4631      	mov	r1, r6
 80087be:	f001 f841 	bl	8009844 <__mcmp>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	da67      	bge.n	8008896 <_dtoa_r+0x90e>
 80087c6:	9b00      	ldr	r3, [sp, #0]
 80087c8:	3b01      	subs	r3, #1
 80087ca:	ee18 1a10 	vmov	r1, s16
 80087ce:	9300      	str	r3, [sp, #0]
 80087d0:	220a      	movs	r2, #10
 80087d2:	2300      	movs	r3, #0
 80087d4:	4620      	mov	r0, r4
 80087d6:	f000 fdcb 	bl	8009370 <__multadd>
 80087da:	9b08      	ldr	r3, [sp, #32]
 80087dc:	ee08 0a10 	vmov	s16, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f000 81b1 	beq.w	8008b48 <_dtoa_r+0xbc0>
 80087e6:	2300      	movs	r3, #0
 80087e8:	4639      	mov	r1, r7
 80087ea:	220a      	movs	r2, #10
 80087ec:	4620      	mov	r0, r4
 80087ee:	f000 fdbf 	bl	8009370 <__multadd>
 80087f2:	9b02      	ldr	r3, [sp, #8]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	4607      	mov	r7, r0
 80087f8:	f300 808e 	bgt.w	8008918 <_dtoa_r+0x990>
 80087fc:	9b06      	ldr	r3, [sp, #24]
 80087fe:	2b02      	cmp	r3, #2
 8008800:	dc51      	bgt.n	80088a6 <_dtoa_r+0x91e>
 8008802:	e089      	b.n	8008918 <_dtoa_r+0x990>
 8008804:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008806:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800880a:	e74b      	b.n	80086a4 <_dtoa_r+0x71c>
 800880c:	9b03      	ldr	r3, [sp, #12]
 800880e:	1e5e      	subs	r6, r3, #1
 8008810:	9b07      	ldr	r3, [sp, #28]
 8008812:	42b3      	cmp	r3, r6
 8008814:	bfbf      	itttt	lt
 8008816:	9b07      	ldrlt	r3, [sp, #28]
 8008818:	9607      	strlt	r6, [sp, #28]
 800881a:	1af2      	sublt	r2, r6, r3
 800881c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800881e:	bfb6      	itet	lt
 8008820:	189b      	addlt	r3, r3, r2
 8008822:	1b9e      	subge	r6, r3, r6
 8008824:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008826:	9b03      	ldr	r3, [sp, #12]
 8008828:	bfb8      	it	lt
 800882a:	2600      	movlt	r6, #0
 800882c:	2b00      	cmp	r3, #0
 800882e:	bfb7      	itett	lt
 8008830:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008834:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008838:	1a9d      	sublt	r5, r3, r2
 800883a:	2300      	movlt	r3, #0
 800883c:	e734      	b.n	80086a8 <_dtoa_r+0x720>
 800883e:	9e07      	ldr	r6, [sp, #28]
 8008840:	9d04      	ldr	r5, [sp, #16]
 8008842:	9f08      	ldr	r7, [sp, #32]
 8008844:	e73b      	b.n	80086be <_dtoa_r+0x736>
 8008846:	9a07      	ldr	r2, [sp, #28]
 8008848:	e767      	b.n	800871a <_dtoa_r+0x792>
 800884a:	9b06      	ldr	r3, [sp, #24]
 800884c:	2b01      	cmp	r3, #1
 800884e:	dc18      	bgt.n	8008882 <_dtoa_r+0x8fa>
 8008850:	f1ba 0f00 	cmp.w	sl, #0
 8008854:	d115      	bne.n	8008882 <_dtoa_r+0x8fa>
 8008856:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800885a:	b993      	cbnz	r3, 8008882 <_dtoa_r+0x8fa>
 800885c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008860:	0d1b      	lsrs	r3, r3, #20
 8008862:	051b      	lsls	r3, r3, #20
 8008864:	b183      	cbz	r3, 8008888 <_dtoa_r+0x900>
 8008866:	9b04      	ldr	r3, [sp, #16]
 8008868:	3301      	adds	r3, #1
 800886a:	9304      	str	r3, [sp, #16]
 800886c:	9b05      	ldr	r3, [sp, #20]
 800886e:	3301      	adds	r3, #1
 8008870:	9305      	str	r3, [sp, #20]
 8008872:	f04f 0801 	mov.w	r8, #1
 8008876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008878:	2b00      	cmp	r3, #0
 800887a:	f47f af6a 	bne.w	8008752 <_dtoa_r+0x7ca>
 800887e:	2001      	movs	r0, #1
 8008880:	e76f      	b.n	8008762 <_dtoa_r+0x7da>
 8008882:	f04f 0800 	mov.w	r8, #0
 8008886:	e7f6      	b.n	8008876 <_dtoa_r+0x8ee>
 8008888:	4698      	mov	r8, r3
 800888a:	e7f4      	b.n	8008876 <_dtoa_r+0x8ee>
 800888c:	f43f af7d 	beq.w	800878a <_dtoa_r+0x802>
 8008890:	4618      	mov	r0, r3
 8008892:	301c      	adds	r0, #28
 8008894:	e772      	b.n	800877c <_dtoa_r+0x7f4>
 8008896:	9b03      	ldr	r3, [sp, #12]
 8008898:	2b00      	cmp	r3, #0
 800889a:	dc37      	bgt.n	800890c <_dtoa_r+0x984>
 800889c:	9b06      	ldr	r3, [sp, #24]
 800889e:	2b02      	cmp	r3, #2
 80088a0:	dd34      	ble.n	800890c <_dtoa_r+0x984>
 80088a2:	9b03      	ldr	r3, [sp, #12]
 80088a4:	9302      	str	r3, [sp, #8]
 80088a6:	9b02      	ldr	r3, [sp, #8]
 80088a8:	b96b      	cbnz	r3, 80088c6 <_dtoa_r+0x93e>
 80088aa:	4631      	mov	r1, r6
 80088ac:	2205      	movs	r2, #5
 80088ae:	4620      	mov	r0, r4
 80088b0:	f000 fd5e 	bl	8009370 <__multadd>
 80088b4:	4601      	mov	r1, r0
 80088b6:	4606      	mov	r6, r0
 80088b8:	ee18 0a10 	vmov	r0, s16
 80088bc:	f000 ffc2 	bl	8009844 <__mcmp>
 80088c0:	2800      	cmp	r0, #0
 80088c2:	f73f adbb 	bgt.w	800843c <_dtoa_r+0x4b4>
 80088c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088c8:	9d01      	ldr	r5, [sp, #4]
 80088ca:	43db      	mvns	r3, r3
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	f04f 0800 	mov.w	r8, #0
 80088d2:	4631      	mov	r1, r6
 80088d4:	4620      	mov	r0, r4
 80088d6:	f000 fd29 	bl	800932c <_Bfree>
 80088da:	2f00      	cmp	r7, #0
 80088dc:	f43f aea4 	beq.w	8008628 <_dtoa_r+0x6a0>
 80088e0:	f1b8 0f00 	cmp.w	r8, #0
 80088e4:	d005      	beq.n	80088f2 <_dtoa_r+0x96a>
 80088e6:	45b8      	cmp	r8, r7
 80088e8:	d003      	beq.n	80088f2 <_dtoa_r+0x96a>
 80088ea:	4641      	mov	r1, r8
 80088ec:	4620      	mov	r0, r4
 80088ee:	f000 fd1d 	bl	800932c <_Bfree>
 80088f2:	4639      	mov	r1, r7
 80088f4:	4620      	mov	r0, r4
 80088f6:	f000 fd19 	bl	800932c <_Bfree>
 80088fa:	e695      	b.n	8008628 <_dtoa_r+0x6a0>
 80088fc:	2600      	movs	r6, #0
 80088fe:	4637      	mov	r7, r6
 8008900:	e7e1      	b.n	80088c6 <_dtoa_r+0x93e>
 8008902:	9700      	str	r7, [sp, #0]
 8008904:	4637      	mov	r7, r6
 8008906:	e599      	b.n	800843c <_dtoa_r+0x4b4>
 8008908:	40240000 	.word	0x40240000
 800890c:	9b08      	ldr	r3, [sp, #32]
 800890e:	2b00      	cmp	r3, #0
 8008910:	f000 80ca 	beq.w	8008aa8 <_dtoa_r+0xb20>
 8008914:	9b03      	ldr	r3, [sp, #12]
 8008916:	9302      	str	r3, [sp, #8]
 8008918:	2d00      	cmp	r5, #0
 800891a:	dd05      	ble.n	8008928 <_dtoa_r+0x9a0>
 800891c:	4639      	mov	r1, r7
 800891e:	462a      	mov	r2, r5
 8008920:	4620      	mov	r0, r4
 8008922:	f000 ff1f 	bl	8009764 <__lshift>
 8008926:	4607      	mov	r7, r0
 8008928:	f1b8 0f00 	cmp.w	r8, #0
 800892c:	d05b      	beq.n	80089e6 <_dtoa_r+0xa5e>
 800892e:	6879      	ldr	r1, [r7, #4]
 8008930:	4620      	mov	r0, r4
 8008932:	f000 fcbb 	bl	80092ac <_Balloc>
 8008936:	4605      	mov	r5, r0
 8008938:	b928      	cbnz	r0, 8008946 <_dtoa_r+0x9be>
 800893a:	4b87      	ldr	r3, [pc, #540]	; (8008b58 <_dtoa_r+0xbd0>)
 800893c:	4602      	mov	r2, r0
 800893e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008942:	f7ff bb3b 	b.w	8007fbc <_dtoa_r+0x34>
 8008946:	693a      	ldr	r2, [r7, #16]
 8008948:	3202      	adds	r2, #2
 800894a:	0092      	lsls	r2, r2, #2
 800894c:	f107 010c 	add.w	r1, r7, #12
 8008950:	300c      	adds	r0, #12
 8008952:	f7fd fc1f 	bl	8006194 <memcpy>
 8008956:	2201      	movs	r2, #1
 8008958:	4629      	mov	r1, r5
 800895a:	4620      	mov	r0, r4
 800895c:	f000 ff02 	bl	8009764 <__lshift>
 8008960:	9b01      	ldr	r3, [sp, #4]
 8008962:	f103 0901 	add.w	r9, r3, #1
 8008966:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800896a:	4413      	add	r3, r2
 800896c:	9305      	str	r3, [sp, #20]
 800896e:	f00a 0301 	and.w	r3, sl, #1
 8008972:	46b8      	mov	r8, r7
 8008974:	9304      	str	r3, [sp, #16]
 8008976:	4607      	mov	r7, r0
 8008978:	4631      	mov	r1, r6
 800897a:	ee18 0a10 	vmov	r0, s16
 800897e:	f7ff fa75 	bl	8007e6c <quorem>
 8008982:	4641      	mov	r1, r8
 8008984:	9002      	str	r0, [sp, #8]
 8008986:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800898a:	ee18 0a10 	vmov	r0, s16
 800898e:	f000 ff59 	bl	8009844 <__mcmp>
 8008992:	463a      	mov	r2, r7
 8008994:	9003      	str	r0, [sp, #12]
 8008996:	4631      	mov	r1, r6
 8008998:	4620      	mov	r0, r4
 800899a:	f000 ff6f 	bl	800987c <__mdiff>
 800899e:	68c2      	ldr	r2, [r0, #12]
 80089a0:	f109 3bff 	add.w	fp, r9, #4294967295
 80089a4:	4605      	mov	r5, r0
 80089a6:	bb02      	cbnz	r2, 80089ea <_dtoa_r+0xa62>
 80089a8:	4601      	mov	r1, r0
 80089aa:	ee18 0a10 	vmov	r0, s16
 80089ae:	f000 ff49 	bl	8009844 <__mcmp>
 80089b2:	4602      	mov	r2, r0
 80089b4:	4629      	mov	r1, r5
 80089b6:	4620      	mov	r0, r4
 80089b8:	9207      	str	r2, [sp, #28]
 80089ba:	f000 fcb7 	bl	800932c <_Bfree>
 80089be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80089c2:	ea43 0102 	orr.w	r1, r3, r2
 80089c6:	9b04      	ldr	r3, [sp, #16]
 80089c8:	430b      	orrs	r3, r1
 80089ca:	464d      	mov	r5, r9
 80089cc:	d10f      	bne.n	80089ee <_dtoa_r+0xa66>
 80089ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80089d2:	d02a      	beq.n	8008a2a <_dtoa_r+0xaa2>
 80089d4:	9b03      	ldr	r3, [sp, #12]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	dd02      	ble.n	80089e0 <_dtoa_r+0xa58>
 80089da:	9b02      	ldr	r3, [sp, #8]
 80089dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80089e0:	f88b a000 	strb.w	sl, [fp]
 80089e4:	e775      	b.n	80088d2 <_dtoa_r+0x94a>
 80089e6:	4638      	mov	r0, r7
 80089e8:	e7ba      	b.n	8008960 <_dtoa_r+0x9d8>
 80089ea:	2201      	movs	r2, #1
 80089ec:	e7e2      	b.n	80089b4 <_dtoa_r+0xa2c>
 80089ee:	9b03      	ldr	r3, [sp, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	db04      	blt.n	80089fe <_dtoa_r+0xa76>
 80089f4:	9906      	ldr	r1, [sp, #24]
 80089f6:	430b      	orrs	r3, r1
 80089f8:	9904      	ldr	r1, [sp, #16]
 80089fa:	430b      	orrs	r3, r1
 80089fc:	d122      	bne.n	8008a44 <_dtoa_r+0xabc>
 80089fe:	2a00      	cmp	r2, #0
 8008a00:	ddee      	ble.n	80089e0 <_dtoa_r+0xa58>
 8008a02:	ee18 1a10 	vmov	r1, s16
 8008a06:	2201      	movs	r2, #1
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f000 feab 	bl	8009764 <__lshift>
 8008a0e:	4631      	mov	r1, r6
 8008a10:	ee08 0a10 	vmov	s16, r0
 8008a14:	f000 ff16 	bl	8009844 <__mcmp>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	dc03      	bgt.n	8008a24 <_dtoa_r+0xa9c>
 8008a1c:	d1e0      	bne.n	80089e0 <_dtoa_r+0xa58>
 8008a1e:	f01a 0f01 	tst.w	sl, #1
 8008a22:	d0dd      	beq.n	80089e0 <_dtoa_r+0xa58>
 8008a24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a28:	d1d7      	bne.n	80089da <_dtoa_r+0xa52>
 8008a2a:	2339      	movs	r3, #57	; 0x39
 8008a2c:	f88b 3000 	strb.w	r3, [fp]
 8008a30:	462b      	mov	r3, r5
 8008a32:	461d      	mov	r5, r3
 8008a34:	3b01      	subs	r3, #1
 8008a36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a3a:	2a39      	cmp	r2, #57	; 0x39
 8008a3c:	d071      	beq.n	8008b22 <_dtoa_r+0xb9a>
 8008a3e:	3201      	adds	r2, #1
 8008a40:	701a      	strb	r2, [r3, #0]
 8008a42:	e746      	b.n	80088d2 <_dtoa_r+0x94a>
 8008a44:	2a00      	cmp	r2, #0
 8008a46:	dd07      	ble.n	8008a58 <_dtoa_r+0xad0>
 8008a48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008a4c:	d0ed      	beq.n	8008a2a <_dtoa_r+0xaa2>
 8008a4e:	f10a 0301 	add.w	r3, sl, #1
 8008a52:	f88b 3000 	strb.w	r3, [fp]
 8008a56:	e73c      	b.n	80088d2 <_dtoa_r+0x94a>
 8008a58:	9b05      	ldr	r3, [sp, #20]
 8008a5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008a5e:	4599      	cmp	r9, r3
 8008a60:	d047      	beq.n	8008af2 <_dtoa_r+0xb6a>
 8008a62:	ee18 1a10 	vmov	r1, s16
 8008a66:	2300      	movs	r3, #0
 8008a68:	220a      	movs	r2, #10
 8008a6a:	4620      	mov	r0, r4
 8008a6c:	f000 fc80 	bl	8009370 <__multadd>
 8008a70:	45b8      	cmp	r8, r7
 8008a72:	ee08 0a10 	vmov	s16, r0
 8008a76:	f04f 0300 	mov.w	r3, #0
 8008a7a:	f04f 020a 	mov.w	r2, #10
 8008a7e:	4641      	mov	r1, r8
 8008a80:	4620      	mov	r0, r4
 8008a82:	d106      	bne.n	8008a92 <_dtoa_r+0xb0a>
 8008a84:	f000 fc74 	bl	8009370 <__multadd>
 8008a88:	4680      	mov	r8, r0
 8008a8a:	4607      	mov	r7, r0
 8008a8c:	f109 0901 	add.w	r9, r9, #1
 8008a90:	e772      	b.n	8008978 <_dtoa_r+0x9f0>
 8008a92:	f000 fc6d 	bl	8009370 <__multadd>
 8008a96:	4639      	mov	r1, r7
 8008a98:	4680      	mov	r8, r0
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	220a      	movs	r2, #10
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f000 fc66 	bl	8009370 <__multadd>
 8008aa4:	4607      	mov	r7, r0
 8008aa6:	e7f1      	b.n	8008a8c <_dtoa_r+0xb04>
 8008aa8:	9b03      	ldr	r3, [sp, #12]
 8008aaa:	9302      	str	r3, [sp, #8]
 8008aac:	9d01      	ldr	r5, [sp, #4]
 8008aae:	ee18 0a10 	vmov	r0, s16
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	f7ff f9da 	bl	8007e6c <quorem>
 8008ab8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008abc:	9b01      	ldr	r3, [sp, #4]
 8008abe:	f805 ab01 	strb.w	sl, [r5], #1
 8008ac2:	1aea      	subs	r2, r5, r3
 8008ac4:	9b02      	ldr	r3, [sp, #8]
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	dd09      	ble.n	8008ade <_dtoa_r+0xb56>
 8008aca:	ee18 1a10 	vmov	r1, s16
 8008ace:	2300      	movs	r3, #0
 8008ad0:	220a      	movs	r2, #10
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f000 fc4c 	bl	8009370 <__multadd>
 8008ad8:	ee08 0a10 	vmov	s16, r0
 8008adc:	e7e7      	b.n	8008aae <_dtoa_r+0xb26>
 8008ade:	9b02      	ldr	r3, [sp, #8]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	bfc8      	it	gt
 8008ae4:	461d      	movgt	r5, r3
 8008ae6:	9b01      	ldr	r3, [sp, #4]
 8008ae8:	bfd8      	it	le
 8008aea:	2501      	movle	r5, #1
 8008aec:	441d      	add	r5, r3
 8008aee:	f04f 0800 	mov.w	r8, #0
 8008af2:	ee18 1a10 	vmov	r1, s16
 8008af6:	2201      	movs	r2, #1
 8008af8:	4620      	mov	r0, r4
 8008afa:	f000 fe33 	bl	8009764 <__lshift>
 8008afe:	4631      	mov	r1, r6
 8008b00:	ee08 0a10 	vmov	s16, r0
 8008b04:	f000 fe9e 	bl	8009844 <__mcmp>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	dc91      	bgt.n	8008a30 <_dtoa_r+0xaa8>
 8008b0c:	d102      	bne.n	8008b14 <_dtoa_r+0xb8c>
 8008b0e:	f01a 0f01 	tst.w	sl, #1
 8008b12:	d18d      	bne.n	8008a30 <_dtoa_r+0xaa8>
 8008b14:	462b      	mov	r3, r5
 8008b16:	461d      	mov	r5, r3
 8008b18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b1c:	2a30      	cmp	r2, #48	; 0x30
 8008b1e:	d0fa      	beq.n	8008b16 <_dtoa_r+0xb8e>
 8008b20:	e6d7      	b.n	80088d2 <_dtoa_r+0x94a>
 8008b22:	9a01      	ldr	r2, [sp, #4]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d184      	bne.n	8008a32 <_dtoa_r+0xaaa>
 8008b28:	9b00      	ldr	r3, [sp, #0]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	2331      	movs	r3, #49	; 0x31
 8008b30:	7013      	strb	r3, [r2, #0]
 8008b32:	e6ce      	b.n	80088d2 <_dtoa_r+0x94a>
 8008b34:	4b09      	ldr	r3, [pc, #36]	; (8008b5c <_dtoa_r+0xbd4>)
 8008b36:	f7ff ba95 	b.w	8008064 <_dtoa_r+0xdc>
 8008b3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f47f aa6e 	bne.w	800801e <_dtoa_r+0x96>
 8008b42:	4b07      	ldr	r3, [pc, #28]	; (8008b60 <_dtoa_r+0xbd8>)
 8008b44:	f7ff ba8e 	b.w	8008064 <_dtoa_r+0xdc>
 8008b48:	9b02      	ldr	r3, [sp, #8]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	dcae      	bgt.n	8008aac <_dtoa_r+0xb24>
 8008b4e:	9b06      	ldr	r3, [sp, #24]
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	f73f aea8 	bgt.w	80088a6 <_dtoa_r+0x91e>
 8008b56:	e7a9      	b.n	8008aac <_dtoa_r+0xb24>
 8008b58:	0800ae58 	.word	0x0800ae58
 8008b5c:	0800ac5c 	.word	0x0800ac5c
 8008b60:	0800add9 	.word	0x0800add9

08008b64 <rshift>:
 8008b64:	6903      	ldr	r3, [r0, #16]
 8008b66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008b6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008b72:	f100 0414 	add.w	r4, r0, #20
 8008b76:	dd45      	ble.n	8008c04 <rshift+0xa0>
 8008b78:	f011 011f 	ands.w	r1, r1, #31
 8008b7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008b80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008b84:	d10c      	bne.n	8008ba0 <rshift+0x3c>
 8008b86:	f100 0710 	add.w	r7, r0, #16
 8008b8a:	4629      	mov	r1, r5
 8008b8c:	42b1      	cmp	r1, r6
 8008b8e:	d334      	bcc.n	8008bfa <rshift+0x96>
 8008b90:	1a9b      	subs	r3, r3, r2
 8008b92:	009b      	lsls	r3, r3, #2
 8008b94:	1eea      	subs	r2, r5, #3
 8008b96:	4296      	cmp	r6, r2
 8008b98:	bf38      	it	cc
 8008b9a:	2300      	movcc	r3, #0
 8008b9c:	4423      	add	r3, r4
 8008b9e:	e015      	b.n	8008bcc <rshift+0x68>
 8008ba0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008ba4:	f1c1 0820 	rsb	r8, r1, #32
 8008ba8:	40cf      	lsrs	r7, r1
 8008baa:	f105 0e04 	add.w	lr, r5, #4
 8008bae:	46a1      	mov	r9, r4
 8008bb0:	4576      	cmp	r6, lr
 8008bb2:	46f4      	mov	ip, lr
 8008bb4:	d815      	bhi.n	8008be2 <rshift+0x7e>
 8008bb6:	1a9a      	subs	r2, r3, r2
 8008bb8:	0092      	lsls	r2, r2, #2
 8008bba:	3a04      	subs	r2, #4
 8008bbc:	3501      	adds	r5, #1
 8008bbe:	42ae      	cmp	r6, r5
 8008bc0:	bf38      	it	cc
 8008bc2:	2200      	movcc	r2, #0
 8008bc4:	18a3      	adds	r3, r4, r2
 8008bc6:	50a7      	str	r7, [r4, r2]
 8008bc8:	b107      	cbz	r7, 8008bcc <rshift+0x68>
 8008bca:	3304      	adds	r3, #4
 8008bcc:	1b1a      	subs	r2, r3, r4
 8008bce:	42a3      	cmp	r3, r4
 8008bd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008bd4:	bf08      	it	eq
 8008bd6:	2300      	moveq	r3, #0
 8008bd8:	6102      	str	r2, [r0, #16]
 8008bda:	bf08      	it	eq
 8008bdc:	6143      	streq	r3, [r0, #20]
 8008bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008be2:	f8dc c000 	ldr.w	ip, [ip]
 8008be6:	fa0c fc08 	lsl.w	ip, ip, r8
 8008bea:	ea4c 0707 	orr.w	r7, ip, r7
 8008bee:	f849 7b04 	str.w	r7, [r9], #4
 8008bf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008bf6:	40cf      	lsrs	r7, r1
 8008bf8:	e7da      	b.n	8008bb0 <rshift+0x4c>
 8008bfa:	f851 cb04 	ldr.w	ip, [r1], #4
 8008bfe:	f847 cf04 	str.w	ip, [r7, #4]!
 8008c02:	e7c3      	b.n	8008b8c <rshift+0x28>
 8008c04:	4623      	mov	r3, r4
 8008c06:	e7e1      	b.n	8008bcc <rshift+0x68>

08008c08 <__hexdig_fun>:
 8008c08:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008c0c:	2b09      	cmp	r3, #9
 8008c0e:	d802      	bhi.n	8008c16 <__hexdig_fun+0xe>
 8008c10:	3820      	subs	r0, #32
 8008c12:	b2c0      	uxtb	r0, r0
 8008c14:	4770      	bx	lr
 8008c16:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008c1a:	2b05      	cmp	r3, #5
 8008c1c:	d801      	bhi.n	8008c22 <__hexdig_fun+0x1a>
 8008c1e:	3847      	subs	r0, #71	; 0x47
 8008c20:	e7f7      	b.n	8008c12 <__hexdig_fun+0xa>
 8008c22:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008c26:	2b05      	cmp	r3, #5
 8008c28:	d801      	bhi.n	8008c2e <__hexdig_fun+0x26>
 8008c2a:	3827      	subs	r0, #39	; 0x27
 8008c2c:	e7f1      	b.n	8008c12 <__hexdig_fun+0xa>
 8008c2e:	2000      	movs	r0, #0
 8008c30:	4770      	bx	lr
	...

08008c34 <__gethex>:
 8008c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c38:	ed2d 8b02 	vpush	{d8}
 8008c3c:	b089      	sub	sp, #36	; 0x24
 8008c3e:	ee08 0a10 	vmov	s16, r0
 8008c42:	9304      	str	r3, [sp, #16]
 8008c44:	4bb4      	ldr	r3, [pc, #720]	; (8008f18 <__gethex+0x2e4>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	9301      	str	r3, [sp, #4]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	468b      	mov	fp, r1
 8008c4e:	4690      	mov	r8, r2
 8008c50:	f7f7 fabe 	bl	80001d0 <strlen>
 8008c54:	9b01      	ldr	r3, [sp, #4]
 8008c56:	f8db 2000 	ldr.w	r2, [fp]
 8008c5a:	4403      	add	r3, r0
 8008c5c:	4682      	mov	sl, r0
 8008c5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008c62:	9305      	str	r3, [sp, #20]
 8008c64:	1c93      	adds	r3, r2, #2
 8008c66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008c6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008c6e:	32fe      	adds	r2, #254	; 0xfe
 8008c70:	18d1      	adds	r1, r2, r3
 8008c72:	461f      	mov	r7, r3
 8008c74:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008c78:	9100      	str	r1, [sp, #0]
 8008c7a:	2830      	cmp	r0, #48	; 0x30
 8008c7c:	d0f8      	beq.n	8008c70 <__gethex+0x3c>
 8008c7e:	f7ff ffc3 	bl	8008c08 <__hexdig_fun>
 8008c82:	4604      	mov	r4, r0
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d13a      	bne.n	8008cfe <__gethex+0xca>
 8008c88:	9901      	ldr	r1, [sp, #4]
 8008c8a:	4652      	mov	r2, sl
 8008c8c:	4638      	mov	r0, r7
 8008c8e:	f001 f947 	bl	8009f20 <strncmp>
 8008c92:	4605      	mov	r5, r0
 8008c94:	2800      	cmp	r0, #0
 8008c96:	d168      	bne.n	8008d6a <__gethex+0x136>
 8008c98:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008c9c:	eb07 060a 	add.w	r6, r7, sl
 8008ca0:	f7ff ffb2 	bl	8008c08 <__hexdig_fun>
 8008ca4:	2800      	cmp	r0, #0
 8008ca6:	d062      	beq.n	8008d6e <__gethex+0x13a>
 8008ca8:	4633      	mov	r3, r6
 8008caa:	7818      	ldrb	r0, [r3, #0]
 8008cac:	2830      	cmp	r0, #48	; 0x30
 8008cae:	461f      	mov	r7, r3
 8008cb0:	f103 0301 	add.w	r3, r3, #1
 8008cb4:	d0f9      	beq.n	8008caa <__gethex+0x76>
 8008cb6:	f7ff ffa7 	bl	8008c08 <__hexdig_fun>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	fab0 f480 	clz	r4, r0
 8008cc0:	0964      	lsrs	r4, r4, #5
 8008cc2:	4635      	mov	r5, r6
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	463a      	mov	r2, r7
 8008cc8:	4616      	mov	r6, r2
 8008cca:	3201      	adds	r2, #1
 8008ccc:	7830      	ldrb	r0, [r6, #0]
 8008cce:	f7ff ff9b 	bl	8008c08 <__hexdig_fun>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	d1f8      	bne.n	8008cc8 <__gethex+0x94>
 8008cd6:	9901      	ldr	r1, [sp, #4]
 8008cd8:	4652      	mov	r2, sl
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f001 f920 	bl	8009f20 <strncmp>
 8008ce0:	b980      	cbnz	r0, 8008d04 <__gethex+0xd0>
 8008ce2:	b94d      	cbnz	r5, 8008cf8 <__gethex+0xc4>
 8008ce4:	eb06 050a 	add.w	r5, r6, sl
 8008ce8:	462a      	mov	r2, r5
 8008cea:	4616      	mov	r6, r2
 8008cec:	3201      	adds	r2, #1
 8008cee:	7830      	ldrb	r0, [r6, #0]
 8008cf0:	f7ff ff8a 	bl	8008c08 <__hexdig_fun>
 8008cf4:	2800      	cmp	r0, #0
 8008cf6:	d1f8      	bne.n	8008cea <__gethex+0xb6>
 8008cf8:	1bad      	subs	r5, r5, r6
 8008cfa:	00ad      	lsls	r5, r5, #2
 8008cfc:	e004      	b.n	8008d08 <__gethex+0xd4>
 8008cfe:	2400      	movs	r4, #0
 8008d00:	4625      	mov	r5, r4
 8008d02:	e7e0      	b.n	8008cc6 <__gethex+0x92>
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	d1f7      	bne.n	8008cf8 <__gethex+0xc4>
 8008d08:	7833      	ldrb	r3, [r6, #0]
 8008d0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d0e:	2b50      	cmp	r3, #80	; 0x50
 8008d10:	d13b      	bne.n	8008d8a <__gethex+0x156>
 8008d12:	7873      	ldrb	r3, [r6, #1]
 8008d14:	2b2b      	cmp	r3, #43	; 0x2b
 8008d16:	d02c      	beq.n	8008d72 <__gethex+0x13e>
 8008d18:	2b2d      	cmp	r3, #45	; 0x2d
 8008d1a:	d02e      	beq.n	8008d7a <__gethex+0x146>
 8008d1c:	1c71      	adds	r1, r6, #1
 8008d1e:	f04f 0900 	mov.w	r9, #0
 8008d22:	7808      	ldrb	r0, [r1, #0]
 8008d24:	f7ff ff70 	bl	8008c08 <__hexdig_fun>
 8008d28:	1e43      	subs	r3, r0, #1
 8008d2a:	b2db      	uxtb	r3, r3
 8008d2c:	2b18      	cmp	r3, #24
 8008d2e:	d82c      	bhi.n	8008d8a <__gethex+0x156>
 8008d30:	f1a0 0210 	sub.w	r2, r0, #16
 8008d34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d38:	f7ff ff66 	bl	8008c08 <__hexdig_fun>
 8008d3c:	1e43      	subs	r3, r0, #1
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	2b18      	cmp	r3, #24
 8008d42:	d91d      	bls.n	8008d80 <__gethex+0x14c>
 8008d44:	f1b9 0f00 	cmp.w	r9, #0
 8008d48:	d000      	beq.n	8008d4c <__gethex+0x118>
 8008d4a:	4252      	negs	r2, r2
 8008d4c:	4415      	add	r5, r2
 8008d4e:	f8cb 1000 	str.w	r1, [fp]
 8008d52:	b1e4      	cbz	r4, 8008d8e <__gethex+0x15a>
 8008d54:	9b00      	ldr	r3, [sp, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	bf14      	ite	ne
 8008d5a:	2700      	movne	r7, #0
 8008d5c:	2706      	moveq	r7, #6
 8008d5e:	4638      	mov	r0, r7
 8008d60:	b009      	add	sp, #36	; 0x24
 8008d62:	ecbd 8b02 	vpop	{d8}
 8008d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6a:	463e      	mov	r6, r7
 8008d6c:	4625      	mov	r5, r4
 8008d6e:	2401      	movs	r4, #1
 8008d70:	e7ca      	b.n	8008d08 <__gethex+0xd4>
 8008d72:	f04f 0900 	mov.w	r9, #0
 8008d76:	1cb1      	adds	r1, r6, #2
 8008d78:	e7d3      	b.n	8008d22 <__gethex+0xee>
 8008d7a:	f04f 0901 	mov.w	r9, #1
 8008d7e:	e7fa      	b.n	8008d76 <__gethex+0x142>
 8008d80:	230a      	movs	r3, #10
 8008d82:	fb03 0202 	mla	r2, r3, r2, r0
 8008d86:	3a10      	subs	r2, #16
 8008d88:	e7d4      	b.n	8008d34 <__gethex+0x100>
 8008d8a:	4631      	mov	r1, r6
 8008d8c:	e7df      	b.n	8008d4e <__gethex+0x11a>
 8008d8e:	1bf3      	subs	r3, r6, r7
 8008d90:	3b01      	subs	r3, #1
 8008d92:	4621      	mov	r1, r4
 8008d94:	2b07      	cmp	r3, #7
 8008d96:	dc0b      	bgt.n	8008db0 <__gethex+0x17c>
 8008d98:	ee18 0a10 	vmov	r0, s16
 8008d9c:	f000 fa86 	bl	80092ac <_Balloc>
 8008da0:	4604      	mov	r4, r0
 8008da2:	b940      	cbnz	r0, 8008db6 <__gethex+0x182>
 8008da4:	4b5d      	ldr	r3, [pc, #372]	; (8008f1c <__gethex+0x2e8>)
 8008da6:	4602      	mov	r2, r0
 8008da8:	21de      	movs	r1, #222	; 0xde
 8008daa:	485d      	ldr	r0, [pc, #372]	; (8008f20 <__gethex+0x2ec>)
 8008dac:	f001 f8da 	bl	8009f64 <__assert_func>
 8008db0:	3101      	adds	r1, #1
 8008db2:	105b      	asrs	r3, r3, #1
 8008db4:	e7ee      	b.n	8008d94 <__gethex+0x160>
 8008db6:	f100 0914 	add.w	r9, r0, #20
 8008dba:	f04f 0b00 	mov.w	fp, #0
 8008dbe:	f1ca 0301 	rsb	r3, sl, #1
 8008dc2:	f8cd 9008 	str.w	r9, [sp, #8]
 8008dc6:	f8cd b000 	str.w	fp, [sp]
 8008dca:	9306      	str	r3, [sp, #24]
 8008dcc:	42b7      	cmp	r7, r6
 8008dce:	d340      	bcc.n	8008e52 <__gethex+0x21e>
 8008dd0:	9802      	ldr	r0, [sp, #8]
 8008dd2:	9b00      	ldr	r3, [sp, #0]
 8008dd4:	f840 3b04 	str.w	r3, [r0], #4
 8008dd8:	eba0 0009 	sub.w	r0, r0, r9
 8008ddc:	1080      	asrs	r0, r0, #2
 8008dde:	0146      	lsls	r6, r0, #5
 8008de0:	6120      	str	r0, [r4, #16]
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 fb54 	bl	8009490 <__hi0bits>
 8008de8:	1a30      	subs	r0, r6, r0
 8008dea:	f8d8 6000 	ldr.w	r6, [r8]
 8008dee:	42b0      	cmp	r0, r6
 8008df0:	dd63      	ble.n	8008eba <__gethex+0x286>
 8008df2:	1b87      	subs	r7, r0, r6
 8008df4:	4639      	mov	r1, r7
 8008df6:	4620      	mov	r0, r4
 8008df8:	f000 fef8 	bl	8009bec <__any_on>
 8008dfc:	4682      	mov	sl, r0
 8008dfe:	b1a8      	cbz	r0, 8008e2c <__gethex+0x1f8>
 8008e00:	1e7b      	subs	r3, r7, #1
 8008e02:	1159      	asrs	r1, r3, #5
 8008e04:	f003 021f 	and.w	r2, r3, #31
 8008e08:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008e0c:	f04f 0a01 	mov.w	sl, #1
 8008e10:	fa0a f202 	lsl.w	r2, sl, r2
 8008e14:	420a      	tst	r2, r1
 8008e16:	d009      	beq.n	8008e2c <__gethex+0x1f8>
 8008e18:	4553      	cmp	r3, sl
 8008e1a:	dd05      	ble.n	8008e28 <__gethex+0x1f4>
 8008e1c:	1eb9      	subs	r1, r7, #2
 8008e1e:	4620      	mov	r0, r4
 8008e20:	f000 fee4 	bl	8009bec <__any_on>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	d145      	bne.n	8008eb4 <__gethex+0x280>
 8008e28:	f04f 0a02 	mov.w	sl, #2
 8008e2c:	4639      	mov	r1, r7
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f7ff fe98 	bl	8008b64 <rshift>
 8008e34:	443d      	add	r5, r7
 8008e36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e3a:	42ab      	cmp	r3, r5
 8008e3c:	da4c      	bge.n	8008ed8 <__gethex+0x2a4>
 8008e3e:	ee18 0a10 	vmov	r0, s16
 8008e42:	4621      	mov	r1, r4
 8008e44:	f000 fa72 	bl	800932c <_Bfree>
 8008e48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	6013      	str	r3, [r2, #0]
 8008e4e:	27a3      	movs	r7, #163	; 0xa3
 8008e50:	e785      	b.n	8008d5e <__gethex+0x12a>
 8008e52:	1e73      	subs	r3, r6, #1
 8008e54:	9a05      	ldr	r2, [sp, #20]
 8008e56:	9303      	str	r3, [sp, #12]
 8008e58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d019      	beq.n	8008e94 <__gethex+0x260>
 8008e60:	f1bb 0f20 	cmp.w	fp, #32
 8008e64:	d107      	bne.n	8008e76 <__gethex+0x242>
 8008e66:	9b02      	ldr	r3, [sp, #8]
 8008e68:	9a00      	ldr	r2, [sp, #0]
 8008e6a:	f843 2b04 	str.w	r2, [r3], #4
 8008e6e:	9302      	str	r3, [sp, #8]
 8008e70:	2300      	movs	r3, #0
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	469b      	mov	fp, r3
 8008e76:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008e7a:	f7ff fec5 	bl	8008c08 <__hexdig_fun>
 8008e7e:	9b00      	ldr	r3, [sp, #0]
 8008e80:	f000 000f 	and.w	r0, r0, #15
 8008e84:	fa00 f00b 	lsl.w	r0, r0, fp
 8008e88:	4303      	orrs	r3, r0
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	f10b 0b04 	add.w	fp, fp, #4
 8008e90:	9b03      	ldr	r3, [sp, #12]
 8008e92:	e00d      	b.n	8008eb0 <__gethex+0x27c>
 8008e94:	9b03      	ldr	r3, [sp, #12]
 8008e96:	9a06      	ldr	r2, [sp, #24]
 8008e98:	4413      	add	r3, r2
 8008e9a:	42bb      	cmp	r3, r7
 8008e9c:	d3e0      	bcc.n	8008e60 <__gethex+0x22c>
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	9901      	ldr	r1, [sp, #4]
 8008ea2:	9307      	str	r3, [sp, #28]
 8008ea4:	4652      	mov	r2, sl
 8008ea6:	f001 f83b 	bl	8009f20 <strncmp>
 8008eaa:	9b07      	ldr	r3, [sp, #28]
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d1d7      	bne.n	8008e60 <__gethex+0x22c>
 8008eb0:	461e      	mov	r6, r3
 8008eb2:	e78b      	b.n	8008dcc <__gethex+0x198>
 8008eb4:	f04f 0a03 	mov.w	sl, #3
 8008eb8:	e7b8      	b.n	8008e2c <__gethex+0x1f8>
 8008eba:	da0a      	bge.n	8008ed2 <__gethex+0x29e>
 8008ebc:	1a37      	subs	r7, r6, r0
 8008ebe:	4621      	mov	r1, r4
 8008ec0:	ee18 0a10 	vmov	r0, s16
 8008ec4:	463a      	mov	r2, r7
 8008ec6:	f000 fc4d 	bl	8009764 <__lshift>
 8008eca:	1bed      	subs	r5, r5, r7
 8008ecc:	4604      	mov	r4, r0
 8008ece:	f100 0914 	add.w	r9, r0, #20
 8008ed2:	f04f 0a00 	mov.w	sl, #0
 8008ed6:	e7ae      	b.n	8008e36 <__gethex+0x202>
 8008ed8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008edc:	42a8      	cmp	r0, r5
 8008ede:	dd72      	ble.n	8008fc6 <__gethex+0x392>
 8008ee0:	1b45      	subs	r5, r0, r5
 8008ee2:	42ae      	cmp	r6, r5
 8008ee4:	dc36      	bgt.n	8008f54 <__gethex+0x320>
 8008ee6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d02a      	beq.n	8008f44 <__gethex+0x310>
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	d02c      	beq.n	8008f4c <__gethex+0x318>
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d11c      	bne.n	8008f30 <__gethex+0x2fc>
 8008ef6:	42ae      	cmp	r6, r5
 8008ef8:	d11a      	bne.n	8008f30 <__gethex+0x2fc>
 8008efa:	2e01      	cmp	r6, #1
 8008efc:	d112      	bne.n	8008f24 <__gethex+0x2f0>
 8008efe:	9a04      	ldr	r2, [sp, #16]
 8008f00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008f04:	6013      	str	r3, [r2, #0]
 8008f06:	2301      	movs	r3, #1
 8008f08:	6123      	str	r3, [r4, #16]
 8008f0a:	f8c9 3000 	str.w	r3, [r9]
 8008f0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008f10:	2762      	movs	r7, #98	; 0x62
 8008f12:	601c      	str	r4, [r3, #0]
 8008f14:	e723      	b.n	8008d5e <__gethex+0x12a>
 8008f16:	bf00      	nop
 8008f18:	0800aed0 	.word	0x0800aed0
 8008f1c:	0800ae58 	.word	0x0800ae58
 8008f20:	0800ae69 	.word	0x0800ae69
 8008f24:	1e71      	subs	r1, r6, #1
 8008f26:	4620      	mov	r0, r4
 8008f28:	f000 fe60 	bl	8009bec <__any_on>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	d1e6      	bne.n	8008efe <__gethex+0x2ca>
 8008f30:	ee18 0a10 	vmov	r0, s16
 8008f34:	4621      	mov	r1, r4
 8008f36:	f000 f9f9 	bl	800932c <_Bfree>
 8008f3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	2750      	movs	r7, #80	; 0x50
 8008f42:	e70c      	b.n	8008d5e <__gethex+0x12a>
 8008f44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1f2      	bne.n	8008f30 <__gethex+0x2fc>
 8008f4a:	e7d8      	b.n	8008efe <__gethex+0x2ca>
 8008f4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1d5      	bne.n	8008efe <__gethex+0x2ca>
 8008f52:	e7ed      	b.n	8008f30 <__gethex+0x2fc>
 8008f54:	1e6f      	subs	r7, r5, #1
 8008f56:	f1ba 0f00 	cmp.w	sl, #0
 8008f5a:	d131      	bne.n	8008fc0 <__gethex+0x38c>
 8008f5c:	b127      	cbz	r7, 8008f68 <__gethex+0x334>
 8008f5e:	4639      	mov	r1, r7
 8008f60:	4620      	mov	r0, r4
 8008f62:	f000 fe43 	bl	8009bec <__any_on>
 8008f66:	4682      	mov	sl, r0
 8008f68:	117b      	asrs	r3, r7, #5
 8008f6a:	2101      	movs	r1, #1
 8008f6c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008f70:	f007 071f 	and.w	r7, r7, #31
 8008f74:	fa01 f707 	lsl.w	r7, r1, r7
 8008f78:	421f      	tst	r7, r3
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	4620      	mov	r0, r4
 8008f7e:	bf18      	it	ne
 8008f80:	f04a 0a02 	orrne.w	sl, sl, #2
 8008f84:	1b76      	subs	r6, r6, r5
 8008f86:	f7ff fded 	bl	8008b64 <rshift>
 8008f8a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008f8e:	2702      	movs	r7, #2
 8008f90:	f1ba 0f00 	cmp.w	sl, #0
 8008f94:	d048      	beq.n	8009028 <__gethex+0x3f4>
 8008f96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d015      	beq.n	8008fca <__gethex+0x396>
 8008f9e:	2b03      	cmp	r3, #3
 8008fa0:	d017      	beq.n	8008fd2 <__gethex+0x39e>
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d109      	bne.n	8008fba <__gethex+0x386>
 8008fa6:	f01a 0f02 	tst.w	sl, #2
 8008faa:	d006      	beq.n	8008fba <__gethex+0x386>
 8008fac:	f8d9 0000 	ldr.w	r0, [r9]
 8008fb0:	ea4a 0a00 	orr.w	sl, sl, r0
 8008fb4:	f01a 0f01 	tst.w	sl, #1
 8008fb8:	d10e      	bne.n	8008fd8 <__gethex+0x3a4>
 8008fba:	f047 0710 	orr.w	r7, r7, #16
 8008fbe:	e033      	b.n	8009028 <__gethex+0x3f4>
 8008fc0:	f04f 0a01 	mov.w	sl, #1
 8008fc4:	e7d0      	b.n	8008f68 <__gethex+0x334>
 8008fc6:	2701      	movs	r7, #1
 8008fc8:	e7e2      	b.n	8008f90 <__gethex+0x35c>
 8008fca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fcc:	f1c3 0301 	rsb	r3, r3, #1
 8008fd0:	9315      	str	r3, [sp, #84]	; 0x54
 8008fd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d0f0      	beq.n	8008fba <__gethex+0x386>
 8008fd8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008fdc:	f104 0314 	add.w	r3, r4, #20
 8008fe0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008fe4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008fe8:	f04f 0c00 	mov.w	ip, #0
 8008fec:	4618      	mov	r0, r3
 8008fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ff2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008ff6:	d01c      	beq.n	8009032 <__gethex+0x3fe>
 8008ff8:	3201      	adds	r2, #1
 8008ffa:	6002      	str	r2, [r0, #0]
 8008ffc:	2f02      	cmp	r7, #2
 8008ffe:	f104 0314 	add.w	r3, r4, #20
 8009002:	d13f      	bne.n	8009084 <__gethex+0x450>
 8009004:	f8d8 2000 	ldr.w	r2, [r8]
 8009008:	3a01      	subs	r2, #1
 800900a:	42b2      	cmp	r2, r6
 800900c:	d10a      	bne.n	8009024 <__gethex+0x3f0>
 800900e:	1171      	asrs	r1, r6, #5
 8009010:	2201      	movs	r2, #1
 8009012:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009016:	f006 061f 	and.w	r6, r6, #31
 800901a:	fa02 f606 	lsl.w	r6, r2, r6
 800901e:	421e      	tst	r6, r3
 8009020:	bf18      	it	ne
 8009022:	4617      	movne	r7, r2
 8009024:	f047 0720 	orr.w	r7, r7, #32
 8009028:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800902a:	601c      	str	r4, [r3, #0]
 800902c:	9b04      	ldr	r3, [sp, #16]
 800902e:	601d      	str	r5, [r3, #0]
 8009030:	e695      	b.n	8008d5e <__gethex+0x12a>
 8009032:	4299      	cmp	r1, r3
 8009034:	f843 cc04 	str.w	ip, [r3, #-4]
 8009038:	d8d8      	bhi.n	8008fec <__gethex+0x3b8>
 800903a:	68a3      	ldr	r3, [r4, #8]
 800903c:	459b      	cmp	fp, r3
 800903e:	db19      	blt.n	8009074 <__gethex+0x440>
 8009040:	6861      	ldr	r1, [r4, #4]
 8009042:	ee18 0a10 	vmov	r0, s16
 8009046:	3101      	adds	r1, #1
 8009048:	f000 f930 	bl	80092ac <_Balloc>
 800904c:	4681      	mov	r9, r0
 800904e:	b918      	cbnz	r0, 8009058 <__gethex+0x424>
 8009050:	4b1a      	ldr	r3, [pc, #104]	; (80090bc <__gethex+0x488>)
 8009052:	4602      	mov	r2, r0
 8009054:	2184      	movs	r1, #132	; 0x84
 8009056:	e6a8      	b.n	8008daa <__gethex+0x176>
 8009058:	6922      	ldr	r2, [r4, #16]
 800905a:	3202      	adds	r2, #2
 800905c:	f104 010c 	add.w	r1, r4, #12
 8009060:	0092      	lsls	r2, r2, #2
 8009062:	300c      	adds	r0, #12
 8009064:	f7fd f896 	bl	8006194 <memcpy>
 8009068:	4621      	mov	r1, r4
 800906a:	ee18 0a10 	vmov	r0, s16
 800906e:	f000 f95d 	bl	800932c <_Bfree>
 8009072:	464c      	mov	r4, r9
 8009074:	6923      	ldr	r3, [r4, #16]
 8009076:	1c5a      	adds	r2, r3, #1
 8009078:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800907c:	6122      	str	r2, [r4, #16]
 800907e:	2201      	movs	r2, #1
 8009080:	615a      	str	r2, [r3, #20]
 8009082:	e7bb      	b.n	8008ffc <__gethex+0x3c8>
 8009084:	6922      	ldr	r2, [r4, #16]
 8009086:	455a      	cmp	r2, fp
 8009088:	dd0b      	ble.n	80090a2 <__gethex+0x46e>
 800908a:	2101      	movs	r1, #1
 800908c:	4620      	mov	r0, r4
 800908e:	f7ff fd69 	bl	8008b64 <rshift>
 8009092:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009096:	3501      	adds	r5, #1
 8009098:	42ab      	cmp	r3, r5
 800909a:	f6ff aed0 	blt.w	8008e3e <__gethex+0x20a>
 800909e:	2701      	movs	r7, #1
 80090a0:	e7c0      	b.n	8009024 <__gethex+0x3f0>
 80090a2:	f016 061f 	ands.w	r6, r6, #31
 80090a6:	d0fa      	beq.n	800909e <__gethex+0x46a>
 80090a8:	4453      	add	r3, sl
 80090aa:	f1c6 0620 	rsb	r6, r6, #32
 80090ae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80090b2:	f000 f9ed 	bl	8009490 <__hi0bits>
 80090b6:	42b0      	cmp	r0, r6
 80090b8:	dbe7      	blt.n	800908a <__gethex+0x456>
 80090ba:	e7f0      	b.n	800909e <__gethex+0x46a>
 80090bc:	0800ae58 	.word	0x0800ae58

080090c0 <L_shift>:
 80090c0:	f1c2 0208 	rsb	r2, r2, #8
 80090c4:	0092      	lsls	r2, r2, #2
 80090c6:	b570      	push	{r4, r5, r6, lr}
 80090c8:	f1c2 0620 	rsb	r6, r2, #32
 80090cc:	6843      	ldr	r3, [r0, #4]
 80090ce:	6804      	ldr	r4, [r0, #0]
 80090d0:	fa03 f506 	lsl.w	r5, r3, r6
 80090d4:	432c      	orrs	r4, r5
 80090d6:	40d3      	lsrs	r3, r2
 80090d8:	6004      	str	r4, [r0, #0]
 80090da:	f840 3f04 	str.w	r3, [r0, #4]!
 80090de:	4288      	cmp	r0, r1
 80090e0:	d3f4      	bcc.n	80090cc <L_shift+0xc>
 80090e2:	bd70      	pop	{r4, r5, r6, pc}

080090e4 <__match>:
 80090e4:	b530      	push	{r4, r5, lr}
 80090e6:	6803      	ldr	r3, [r0, #0]
 80090e8:	3301      	adds	r3, #1
 80090ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090ee:	b914      	cbnz	r4, 80090f6 <__match+0x12>
 80090f0:	6003      	str	r3, [r0, #0]
 80090f2:	2001      	movs	r0, #1
 80090f4:	bd30      	pop	{r4, r5, pc}
 80090f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80090fe:	2d19      	cmp	r5, #25
 8009100:	bf98      	it	ls
 8009102:	3220      	addls	r2, #32
 8009104:	42a2      	cmp	r2, r4
 8009106:	d0f0      	beq.n	80090ea <__match+0x6>
 8009108:	2000      	movs	r0, #0
 800910a:	e7f3      	b.n	80090f4 <__match+0x10>

0800910c <__hexnan>:
 800910c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009110:	680b      	ldr	r3, [r1, #0]
 8009112:	115e      	asrs	r6, r3, #5
 8009114:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009118:	f013 031f 	ands.w	r3, r3, #31
 800911c:	b087      	sub	sp, #28
 800911e:	bf18      	it	ne
 8009120:	3604      	addne	r6, #4
 8009122:	2500      	movs	r5, #0
 8009124:	1f37      	subs	r7, r6, #4
 8009126:	4690      	mov	r8, r2
 8009128:	6802      	ldr	r2, [r0, #0]
 800912a:	9301      	str	r3, [sp, #4]
 800912c:	4682      	mov	sl, r0
 800912e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009132:	46b9      	mov	r9, r7
 8009134:	463c      	mov	r4, r7
 8009136:	9502      	str	r5, [sp, #8]
 8009138:	46ab      	mov	fp, r5
 800913a:	7851      	ldrb	r1, [r2, #1]
 800913c:	1c53      	adds	r3, r2, #1
 800913e:	9303      	str	r3, [sp, #12]
 8009140:	b341      	cbz	r1, 8009194 <__hexnan+0x88>
 8009142:	4608      	mov	r0, r1
 8009144:	9205      	str	r2, [sp, #20]
 8009146:	9104      	str	r1, [sp, #16]
 8009148:	f7ff fd5e 	bl	8008c08 <__hexdig_fun>
 800914c:	2800      	cmp	r0, #0
 800914e:	d14f      	bne.n	80091f0 <__hexnan+0xe4>
 8009150:	9904      	ldr	r1, [sp, #16]
 8009152:	9a05      	ldr	r2, [sp, #20]
 8009154:	2920      	cmp	r1, #32
 8009156:	d818      	bhi.n	800918a <__hexnan+0x7e>
 8009158:	9b02      	ldr	r3, [sp, #8]
 800915a:	459b      	cmp	fp, r3
 800915c:	dd13      	ble.n	8009186 <__hexnan+0x7a>
 800915e:	454c      	cmp	r4, r9
 8009160:	d206      	bcs.n	8009170 <__hexnan+0x64>
 8009162:	2d07      	cmp	r5, #7
 8009164:	dc04      	bgt.n	8009170 <__hexnan+0x64>
 8009166:	462a      	mov	r2, r5
 8009168:	4649      	mov	r1, r9
 800916a:	4620      	mov	r0, r4
 800916c:	f7ff ffa8 	bl	80090c0 <L_shift>
 8009170:	4544      	cmp	r4, r8
 8009172:	d950      	bls.n	8009216 <__hexnan+0x10a>
 8009174:	2300      	movs	r3, #0
 8009176:	f1a4 0904 	sub.w	r9, r4, #4
 800917a:	f844 3c04 	str.w	r3, [r4, #-4]
 800917e:	f8cd b008 	str.w	fp, [sp, #8]
 8009182:	464c      	mov	r4, r9
 8009184:	461d      	mov	r5, r3
 8009186:	9a03      	ldr	r2, [sp, #12]
 8009188:	e7d7      	b.n	800913a <__hexnan+0x2e>
 800918a:	2929      	cmp	r1, #41	; 0x29
 800918c:	d156      	bne.n	800923c <__hexnan+0x130>
 800918e:	3202      	adds	r2, #2
 8009190:	f8ca 2000 	str.w	r2, [sl]
 8009194:	f1bb 0f00 	cmp.w	fp, #0
 8009198:	d050      	beq.n	800923c <__hexnan+0x130>
 800919a:	454c      	cmp	r4, r9
 800919c:	d206      	bcs.n	80091ac <__hexnan+0xa0>
 800919e:	2d07      	cmp	r5, #7
 80091a0:	dc04      	bgt.n	80091ac <__hexnan+0xa0>
 80091a2:	462a      	mov	r2, r5
 80091a4:	4649      	mov	r1, r9
 80091a6:	4620      	mov	r0, r4
 80091a8:	f7ff ff8a 	bl	80090c0 <L_shift>
 80091ac:	4544      	cmp	r4, r8
 80091ae:	d934      	bls.n	800921a <__hexnan+0x10e>
 80091b0:	f1a8 0204 	sub.w	r2, r8, #4
 80091b4:	4623      	mov	r3, r4
 80091b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80091ba:	f842 1f04 	str.w	r1, [r2, #4]!
 80091be:	429f      	cmp	r7, r3
 80091c0:	d2f9      	bcs.n	80091b6 <__hexnan+0xaa>
 80091c2:	1b3b      	subs	r3, r7, r4
 80091c4:	f023 0303 	bic.w	r3, r3, #3
 80091c8:	3304      	adds	r3, #4
 80091ca:	3401      	adds	r4, #1
 80091cc:	3e03      	subs	r6, #3
 80091ce:	42b4      	cmp	r4, r6
 80091d0:	bf88      	it	hi
 80091d2:	2304      	movhi	r3, #4
 80091d4:	4443      	add	r3, r8
 80091d6:	2200      	movs	r2, #0
 80091d8:	f843 2b04 	str.w	r2, [r3], #4
 80091dc:	429f      	cmp	r7, r3
 80091de:	d2fb      	bcs.n	80091d8 <__hexnan+0xcc>
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	b91b      	cbnz	r3, 80091ec <__hexnan+0xe0>
 80091e4:	4547      	cmp	r7, r8
 80091e6:	d127      	bne.n	8009238 <__hexnan+0x12c>
 80091e8:	2301      	movs	r3, #1
 80091ea:	603b      	str	r3, [r7, #0]
 80091ec:	2005      	movs	r0, #5
 80091ee:	e026      	b.n	800923e <__hexnan+0x132>
 80091f0:	3501      	adds	r5, #1
 80091f2:	2d08      	cmp	r5, #8
 80091f4:	f10b 0b01 	add.w	fp, fp, #1
 80091f8:	dd06      	ble.n	8009208 <__hexnan+0xfc>
 80091fa:	4544      	cmp	r4, r8
 80091fc:	d9c3      	bls.n	8009186 <__hexnan+0x7a>
 80091fe:	2300      	movs	r3, #0
 8009200:	f844 3c04 	str.w	r3, [r4, #-4]
 8009204:	2501      	movs	r5, #1
 8009206:	3c04      	subs	r4, #4
 8009208:	6822      	ldr	r2, [r4, #0]
 800920a:	f000 000f 	and.w	r0, r0, #15
 800920e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009212:	6022      	str	r2, [r4, #0]
 8009214:	e7b7      	b.n	8009186 <__hexnan+0x7a>
 8009216:	2508      	movs	r5, #8
 8009218:	e7b5      	b.n	8009186 <__hexnan+0x7a>
 800921a:	9b01      	ldr	r3, [sp, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d0df      	beq.n	80091e0 <__hexnan+0xd4>
 8009220:	f04f 32ff 	mov.w	r2, #4294967295
 8009224:	f1c3 0320 	rsb	r3, r3, #32
 8009228:	fa22 f303 	lsr.w	r3, r2, r3
 800922c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009230:	401a      	ands	r2, r3
 8009232:	f846 2c04 	str.w	r2, [r6, #-4]
 8009236:	e7d3      	b.n	80091e0 <__hexnan+0xd4>
 8009238:	3f04      	subs	r7, #4
 800923a:	e7d1      	b.n	80091e0 <__hexnan+0xd4>
 800923c:	2004      	movs	r0, #4
 800923e:	b007      	add	sp, #28
 8009240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009244 <_gettimeofday_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	4d07      	ldr	r5, [pc, #28]	; (8009264 <_gettimeofday_r+0x20>)
 8009248:	2300      	movs	r3, #0
 800924a:	4604      	mov	r4, r0
 800924c:	4608      	mov	r0, r1
 800924e:	4611      	mov	r1, r2
 8009250:	602b      	str	r3, [r5, #0]
 8009252:	f001 fc39 	bl	800aac8 <_gettimeofday>
 8009256:	1c43      	adds	r3, r0, #1
 8009258:	d102      	bne.n	8009260 <_gettimeofday_r+0x1c>
 800925a:	682b      	ldr	r3, [r5, #0]
 800925c:	b103      	cbz	r3, 8009260 <_gettimeofday_r+0x1c>
 800925e:	6023      	str	r3, [r4, #0]
 8009260:	bd38      	pop	{r3, r4, r5, pc}
 8009262:	bf00      	nop
 8009264:	2000438c 	.word	0x2000438c

08009268 <_localeconv_r>:
 8009268:	4800      	ldr	r0, [pc, #0]	; (800926c <_localeconv_r+0x4>)
 800926a:	4770      	bx	lr
 800926c:	20000168 	.word	0x20000168

08009270 <__ascii_mbtowc>:
 8009270:	b082      	sub	sp, #8
 8009272:	b901      	cbnz	r1, 8009276 <__ascii_mbtowc+0x6>
 8009274:	a901      	add	r1, sp, #4
 8009276:	b142      	cbz	r2, 800928a <__ascii_mbtowc+0x1a>
 8009278:	b14b      	cbz	r3, 800928e <__ascii_mbtowc+0x1e>
 800927a:	7813      	ldrb	r3, [r2, #0]
 800927c:	600b      	str	r3, [r1, #0]
 800927e:	7812      	ldrb	r2, [r2, #0]
 8009280:	1e10      	subs	r0, r2, #0
 8009282:	bf18      	it	ne
 8009284:	2001      	movne	r0, #1
 8009286:	b002      	add	sp, #8
 8009288:	4770      	bx	lr
 800928a:	4610      	mov	r0, r2
 800928c:	e7fb      	b.n	8009286 <__ascii_mbtowc+0x16>
 800928e:	f06f 0001 	mvn.w	r0, #1
 8009292:	e7f8      	b.n	8009286 <__ascii_mbtowc+0x16>

08009294 <__malloc_lock>:
 8009294:	4801      	ldr	r0, [pc, #4]	; (800929c <__malloc_lock+0x8>)
 8009296:	f000 be96 	b.w	8009fc6 <__retarget_lock_acquire_recursive>
 800929a:	bf00      	nop
 800929c:	20004390 	.word	0x20004390

080092a0 <__malloc_unlock>:
 80092a0:	4801      	ldr	r0, [pc, #4]	; (80092a8 <__malloc_unlock+0x8>)
 80092a2:	f000 be91 	b.w	8009fc8 <__retarget_lock_release_recursive>
 80092a6:	bf00      	nop
 80092a8:	20004390 	.word	0x20004390

080092ac <_Balloc>:
 80092ac:	b570      	push	{r4, r5, r6, lr}
 80092ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80092b0:	4604      	mov	r4, r0
 80092b2:	460d      	mov	r5, r1
 80092b4:	b976      	cbnz	r6, 80092d4 <_Balloc+0x28>
 80092b6:	2010      	movs	r0, #16
 80092b8:	f7fc ff5c 	bl	8006174 <malloc>
 80092bc:	4602      	mov	r2, r0
 80092be:	6260      	str	r0, [r4, #36]	; 0x24
 80092c0:	b920      	cbnz	r0, 80092cc <_Balloc+0x20>
 80092c2:	4b18      	ldr	r3, [pc, #96]	; (8009324 <_Balloc+0x78>)
 80092c4:	4818      	ldr	r0, [pc, #96]	; (8009328 <_Balloc+0x7c>)
 80092c6:	2166      	movs	r1, #102	; 0x66
 80092c8:	f000 fe4c 	bl	8009f64 <__assert_func>
 80092cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092d0:	6006      	str	r6, [r0, #0]
 80092d2:	60c6      	str	r6, [r0, #12]
 80092d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80092d6:	68f3      	ldr	r3, [r6, #12]
 80092d8:	b183      	cbz	r3, 80092fc <_Balloc+0x50>
 80092da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092dc:	68db      	ldr	r3, [r3, #12]
 80092de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80092e2:	b9b8      	cbnz	r0, 8009314 <_Balloc+0x68>
 80092e4:	2101      	movs	r1, #1
 80092e6:	fa01 f605 	lsl.w	r6, r1, r5
 80092ea:	1d72      	adds	r2, r6, #5
 80092ec:	0092      	lsls	r2, r2, #2
 80092ee:	4620      	mov	r0, r4
 80092f0:	f000 fc9d 	bl	8009c2e <_calloc_r>
 80092f4:	b160      	cbz	r0, 8009310 <_Balloc+0x64>
 80092f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80092fa:	e00e      	b.n	800931a <_Balloc+0x6e>
 80092fc:	2221      	movs	r2, #33	; 0x21
 80092fe:	2104      	movs	r1, #4
 8009300:	4620      	mov	r0, r4
 8009302:	f000 fc94 	bl	8009c2e <_calloc_r>
 8009306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009308:	60f0      	str	r0, [r6, #12]
 800930a:	68db      	ldr	r3, [r3, #12]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1e4      	bne.n	80092da <_Balloc+0x2e>
 8009310:	2000      	movs	r0, #0
 8009312:	bd70      	pop	{r4, r5, r6, pc}
 8009314:	6802      	ldr	r2, [r0, #0]
 8009316:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800931a:	2300      	movs	r3, #0
 800931c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009320:	e7f7      	b.n	8009312 <_Balloc+0x66>
 8009322:	bf00      	nop
 8009324:	0800ade6 	.word	0x0800ade6
 8009328:	0800aee4 	.word	0x0800aee4

0800932c <_Bfree>:
 800932c:	b570      	push	{r4, r5, r6, lr}
 800932e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009330:	4605      	mov	r5, r0
 8009332:	460c      	mov	r4, r1
 8009334:	b976      	cbnz	r6, 8009354 <_Bfree+0x28>
 8009336:	2010      	movs	r0, #16
 8009338:	f7fc ff1c 	bl	8006174 <malloc>
 800933c:	4602      	mov	r2, r0
 800933e:	6268      	str	r0, [r5, #36]	; 0x24
 8009340:	b920      	cbnz	r0, 800934c <_Bfree+0x20>
 8009342:	4b09      	ldr	r3, [pc, #36]	; (8009368 <_Bfree+0x3c>)
 8009344:	4809      	ldr	r0, [pc, #36]	; (800936c <_Bfree+0x40>)
 8009346:	218a      	movs	r1, #138	; 0x8a
 8009348:	f000 fe0c 	bl	8009f64 <__assert_func>
 800934c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009350:	6006      	str	r6, [r0, #0]
 8009352:	60c6      	str	r6, [r0, #12]
 8009354:	b13c      	cbz	r4, 8009366 <_Bfree+0x3a>
 8009356:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009358:	6862      	ldr	r2, [r4, #4]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009360:	6021      	str	r1, [r4, #0]
 8009362:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009366:	bd70      	pop	{r4, r5, r6, pc}
 8009368:	0800ade6 	.word	0x0800ade6
 800936c:	0800aee4 	.word	0x0800aee4

08009370 <__multadd>:
 8009370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009374:	690d      	ldr	r5, [r1, #16]
 8009376:	4607      	mov	r7, r0
 8009378:	460c      	mov	r4, r1
 800937a:	461e      	mov	r6, r3
 800937c:	f101 0c14 	add.w	ip, r1, #20
 8009380:	2000      	movs	r0, #0
 8009382:	f8dc 3000 	ldr.w	r3, [ip]
 8009386:	b299      	uxth	r1, r3
 8009388:	fb02 6101 	mla	r1, r2, r1, r6
 800938c:	0c1e      	lsrs	r6, r3, #16
 800938e:	0c0b      	lsrs	r3, r1, #16
 8009390:	fb02 3306 	mla	r3, r2, r6, r3
 8009394:	b289      	uxth	r1, r1
 8009396:	3001      	adds	r0, #1
 8009398:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800939c:	4285      	cmp	r5, r0
 800939e:	f84c 1b04 	str.w	r1, [ip], #4
 80093a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093a6:	dcec      	bgt.n	8009382 <__multadd+0x12>
 80093a8:	b30e      	cbz	r6, 80093ee <__multadd+0x7e>
 80093aa:	68a3      	ldr	r3, [r4, #8]
 80093ac:	42ab      	cmp	r3, r5
 80093ae:	dc19      	bgt.n	80093e4 <__multadd+0x74>
 80093b0:	6861      	ldr	r1, [r4, #4]
 80093b2:	4638      	mov	r0, r7
 80093b4:	3101      	adds	r1, #1
 80093b6:	f7ff ff79 	bl	80092ac <_Balloc>
 80093ba:	4680      	mov	r8, r0
 80093bc:	b928      	cbnz	r0, 80093ca <__multadd+0x5a>
 80093be:	4602      	mov	r2, r0
 80093c0:	4b0c      	ldr	r3, [pc, #48]	; (80093f4 <__multadd+0x84>)
 80093c2:	480d      	ldr	r0, [pc, #52]	; (80093f8 <__multadd+0x88>)
 80093c4:	21b5      	movs	r1, #181	; 0xb5
 80093c6:	f000 fdcd 	bl	8009f64 <__assert_func>
 80093ca:	6922      	ldr	r2, [r4, #16]
 80093cc:	3202      	adds	r2, #2
 80093ce:	f104 010c 	add.w	r1, r4, #12
 80093d2:	0092      	lsls	r2, r2, #2
 80093d4:	300c      	adds	r0, #12
 80093d6:	f7fc fedd 	bl	8006194 <memcpy>
 80093da:	4621      	mov	r1, r4
 80093dc:	4638      	mov	r0, r7
 80093de:	f7ff ffa5 	bl	800932c <_Bfree>
 80093e2:	4644      	mov	r4, r8
 80093e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80093e8:	3501      	adds	r5, #1
 80093ea:	615e      	str	r6, [r3, #20]
 80093ec:	6125      	str	r5, [r4, #16]
 80093ee:	4620      	mov	r0, r4
 80093f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80093f4:	0800ae58 	.word	0x0800ae58
 80093f8:	0800aee4 	.word	0x0800aee4

080093fc <__s2b>:
 80093fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009400:	460c      	mov	r4, r1
 8009402:	4615      	mov	r5, r2
 8009404:	461f      	mov	r7, r3
 8009406:	2209      	movs	r2, #9
 8009408:	3308      	adds	r3, #8
 800940a:	4606      	mov	r6, r0
 800940c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009410:	2100      	movs	r1, #0
 8009412:	2201      	movs	r2, #1
 8009414:	429a      	cmp	r2, r3
 8009416:	db09      	blt.n	800942c <__s2b+0x30>
 8009418:	4630      	mov	r0, r6
 800941a:	f7ff ff47 	bl	80092ac <_Balloc>
 800941e:	b940      	cbnz	r0, 8009432 <__s2b+0x36>
 8009420:	4602      	mov	r2, r0
 8009422:	4b19      	ldr	r3, [pc, #100]	; (8009488 <__s2b+0x8c>)
 8009424:	4819      	ldr	r0, [pc, #100]	; (800948c <__s2b+0x90>)
 8009426:	21ce      	movs	r1, #206	; 0xce
 8009428:	f000 fd9c 	bl	8009f64 <__assert_func>
 800942c:	0052      	lsls	r2, r2, #1
 800942e:	3101      	adds	r1, #1
 8009430:	e7f0      	b.n	8009414 <__s2b+0x18>
 8009432:	9b08      	ldr	r3, [sp, #32]
 8009434:	6143      	str	r3, [r0, #20]
 8009436:	2d09      	cmp	r5, #9
 8009438:	f04f 0301 	mov.w	r3, #1
 800943c:	6103      	str	r3, [r0, #16]
 800943e:	dd16      	ble.n	800946e <__s2b+0x72>
 8009440:	f104 0909 	add.w	r9, r4, #9
 8009444:	46c8      	mov	r8, r9
 8009446:	442c      	add	r4, r5
 8009448:	f818 3b01 	ldrb.w	r3, [r8], #1
 800944c:	4601      	mov	r1, r0
 800944e:	3b30      	subs	r3, #48	; 0x30
 8009450:	220a      	movs	r2, #10
 8009452:	4630      	mov	r0, r6
 8009454:	f7ff ff8c 	bl	8009370 <__multadd>
 8009458:	45a0      	cmp	r8, r4
 800945a:	d1f5      	bne.n	8009448 <__s2b+0x4c>
 800945c:	f1a5 0408 	sub.w	r4, r5, #8
 8009460:	444c      	add	r4, r9
 8009462:	1b2d      	subs	r5, r5, r4
 8009464:	1963      	adds	r3, r4, r5
 8009466:	42bb      	cmp	r3, r7
 8009468:	db04      	blt.n	8009474 <__s2b+0x78>
 800946a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800946e:	340a      	adds	r4, #10
 8009470:	2509      	movs	r5, #9
 8009472:	e7f6      	b.n	8009462 <__s2b+0x66>
 8009474:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009478:	4601      	mov	r1, r0
 800947a:	3b30      	subs	r3, #48	; 0x30
 800947c:	220a      	movs	r2, #10
 800947e:	4630      	mov	r0, r6
 8009480:	f7ff ff76 	bl	8009370 <__multadd>
 8009484:	e7ee      	b.n	8009464 <__s2b+0x68>
 8009486:	bf00      	nop
 8009488:	0800ae58 	.word	0x0800ae58
 800948c:	0800aee4 	.word	0x0800aee4

08009490 <__hi0bits>:
 8009490:	0c03      	lsrs	r3, r0, #16
 8009492:	041b      	lsls	r3, r3, #16
 8009494:	b9d3      	cbnz	r3, 80094cc <__hi0bits+0x3c>
 8009496:	0400      	lsls	r0, r0, #16
 8009498:	2310      	movs	r3, #16
 800949a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800949e:	bf04      	itt	eq
 80094a0:	0200      	lsleq	r0, r0, #8
 80094a2:	3308      	addeq	r3, #8
 80094a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80094a8:	bf04      	itt	eq
 80094aa:	0100      	lsleq	r0, r0, #4
 80094ac:	3304      	addeq	r3, #4
 80094ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80094b2:	bf04      	itt	eq
 80094b4:	0080      	lsleq	r0, r0, #2
 80094b6:	3302      	addeq	r3, #2
 80094b8:	2800      	cmp	r0, #0
 80094ba:	db05      	blt.n	80094c8 <__hi0bits+0x38>
 80094bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094c0:	f103 0301 	add.w	r3, r3, #1
 80094c4:	bf08      	it	eq
 80094c6:	2320      	moveq	r3, #32
 80094c8:	4618      	mov	r0, r3
 80094ca:	4770      	bx	lr
 80094cc:	2300      	movs	r3, #0
 80094ce:	e7e4      	b.n	800949a <__hi0bits+0xa>

080094d0 <__lo0bits>:
 80094d0:	6803      	ldr	r3, [r0, #0]
 80094d2:	f013 0207 	ands.w	r2, r3, #7
 80094d6:	4601      	mov	r1, r0
 80094d8:	d00b      	beq.n	80094f2 <__lo0bits+0x22>
 80094da:	07da      	lsls	r2, r3, #31
 80094dc:	d423      	bmi.n	8009526 <__lo0bits+0x56>
 80094de:	0798      	lsls	r0, r3, #30
 80094e0:	bf49      	itett	mi
 80094e2:	085b      	lsrmi	r3, r3, #1
 80094e4:	089b      	lsrpl	r3, r3, #2
 80094e6:	2001      	movmi	r0, #1
 80094e8:	600b      	strmi	r3, [r1, #0]
 80094ea:	bf5c      	itt	pl
 80094ec:	600b      	strpl	r3, [r1, #0]
 80094ee:	2002      	movpl	r0, #2
 80094f0:	4770      	bx	lr
 80094f2:	b298      	uxth	r0, r3
 80094f4:	b9a8      	cbnz	r0, 8009522 <__lo0bits+0x52>
 80094f6:	0c1b      	lsrs	r3, r3, #16
 80094f8:	2010      	movs	r0, #16
 80094fa:	b2da      	uxtb	r2, r3
 80094fc:	b90a      	cbnz	r2, 8009502 <__lo0bits+0x32>
 80094fe:	3008      	adds	r0, #8
 8009500:	0a1b      	lsrs	r3, r3, #8
 8009502:	071a      	lsls	r2, r3, #28
 8009504:	bf04      	itt	eq
 8009506:	091b      	lsreq	r3, r3, #4
 8009508:	3004      	addeq	r0, #4
 800950a:	079a      	lsls	r2, r3, #30
 800950c:	bf04      	itt	eq
 800950e:	089b      	lsreq	r3, r3, #2
 8009510:	3002      	addeq	r0, #2
 8009512:	07da      	lsls	r2, r3, #31
 8009514:	d403      	bmi.n	800951e <__lo0bits+0x4e>
 8009516:	085b      	lsrs	r3, r3, #1
 8009518:	f100 0001 	add.w	r0, r0, #1
 800951c:	d005      	beq.n	800952a <__lo0bits+0x5a>
 800951e:	600b      	str	r3, [r1, #0]
 8009520:	4770      	bx	lr
 8009522:	4610      	mov	r0, r2
 8009524:	e7e9      	b.n	80094fa <__lo0bits+0x2a>
 8009526:	2000      	movs	r0, #0
 8009528:	4770      	bx	lr
 800952a:	2020      	movs	r0, #32
 800952c:	4770      	bx	lr
	...

08009530 <__i2b>:
 8009530:	b510      	push	{r4, lr}
 8009532:	460c      	mov	r4, r1
 8009534:	2101      	movs	r1, #1
 8009536:	f7ff feb9 	bl	80092ac <_Balloc>
 800953a:	4602      	mov	r2, r0
 800953c:	b928      	cbnz	r0, 800954a <__i2b+0x1a>
 800953e:	4b05      	ldr	r3, [pc, #20]	; (8009554 <__i2b+0x24>)
 8009540:	4805      	ldr	r0, [pc, #20]	; (8009558 <__i2b+0x28>)
 8009542:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009546:	f000 fd0d 	bl	8009f64 <__assert_func>
 800954a:	2301      	movs	r3, #1
 800954c:	6144      	str	r4, [r0, #20]
 800954e:	6103      	str	r3, [r0, #16]
 8009550:	bd10      	pop	{r4, pc}
 8009552:	bf00      	nop
 8009554:	0800ae58 	.word	0x0800ae58
 8009558:	0800aee4 	.word	0x0800aee4

0800955c <__multiply>:
 800955c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009560:	4691      	mov	r9, r2
 8009562:	690a      	ldr	r2, [r1, #16]
 8009564:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009568:	429a      	cmp	r2, r3
 800956a:	bfb8      	it	lt
 800956c:	460b      	movlt	r3, r1
 800956e:	460c      	mov	r4, r1
 8009570:	bfbc      	itt	lt
 8009572:	464c      	movlt	r4, r9
 8009574:	4699      	movlt	r9, r3
 8009576:	6927      	ldr	r7, [r4, #16]
 8009578:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800957c:	68a3      	ldr	r3, [r4, #8]
 800957e:	6861      	ldr	r1, [r4, #4]
 8009580:	eb07 060a 	add.w	r6, r7, sl
 8009584:	42b3      	cmp	r3, r6
 8009586:	b085      	sub	sp, #20
 8009588:	bfb8      	it	lt
 800958a:	3101      	addlt	r1, #1
 800958c:	f7ff fe8e 	bl	80092ac <_Balloc>
 8009590:	b930      	cbnz	r0, 80095a0 <__multiply+0x44>
 8009592:	4602      	mov	r2, r0
 8009594:	4b44      	ldr	r3, [pc, #272]	; (80096a8 <__multiply+0x14c>)
 8009596:	4845      	ldr	r0, [pc, #276]	; (80096ac <__multiply+0x150>)
 8009598:	f240 115d 	movw	r1, #349	; 0x15d
 800959c:	f000 fce2 	bl	8009f64 <__assert_func>
 80095a0:	f100 0514 	add.w	r5, r0, #20
 80095a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80095a8:	462b      	mov	r3, r5
 80095aa:	2200      	movs	r2, #0
 80095ac:	4543      	cmp	r3, r8
 80095ae:	d321      	bcc.n	80095f4 <__multiply+0x98>
 80095b0:	f104 0314 	add.w	r3, r4, #20
 80095b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80095b8:	f109 0314 	add.w	r3, r9, #20
 80095bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80095c0:	9202      	str	r2, [sp, #8]
 80095c2:	1b3a      	subs	r2, r7, r4
 80095c4:	3a15      	subs	r2, #21
 80095c6:	f022 0203 	bic.w	r2, r2, #3
 80095ca:	3204      	adds	r2, #4
 80095cc:	f104 0115 	add.w	r1, r4, #21
 80095d0:	428f      	cmp	r7, r1
 80095d2:	bf38      	it	cc
 80095d4:	2204      	movcc	r2, #4
 80095d6:	9201      	str	r2, [sp, #4]
 80095d8:	9a02      	ldr	r2, [sp, #8]
 80095da:	9303      	str	r3, [sp, #12]
 80095dc:	429a      	cmp	r2, r3
 80095de:	d80c      	bhi.n	80095fa <__multiply+0x9e>
 80095e0:	2e00      	cmp	r6, #0
 80095e2:	dd03      	ble.n	80095ec <__multiply+0x90>
 80095e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d05a      	beq.n	80096a2 <__multiply+0x146>
 80095ec:	6106      	str	r6, [r0, #16]
 80095ee:	b005      	add	sp, #20
 80095f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f4:	f843 2b04 	str.w	r2, [r3], #4
 80095f8:	e7d8      	b.n	80095ac <__multiply+0x50>
 80095fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80095fe:	f1ba 0f00 	cmp.w	sl, #0
 8009602:	d024      	beq.n	800964e <__multiply+0xf2>
 8009604:	f104 0e14 	add.w	lr, r4, #20
 8009608:	46a9      	mov	r9, r5
 800960a:	f04f 0c00 	mov.w	ip, #0
 800960e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009612:	f8d9 1000 	ldr.w	r1, [r9]
 8009616:	fa1f fb82 	uxth.w	fp, r2
 800961a:	b289      	uxth	r1, r1
 800961c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009620:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009624:	f8d9 2000 	ldr.w	r2, [r9]
 8009628:	4461      	add	r1, ip
 800962a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800962e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009632:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009636:	b289      	uxth	r1, r1
 8009638:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800963c:	4577      	cmp	r7, lr
 800963e:	f849 1b04 	str.w	r1, [r9], #4
 8009642:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009646:	d8e2      	bhi.n	800960e <__multiply+0xb2>
 8009648:	9a01      	ldr	r2, [sp, #4]
 800964a:	f845 c002 	str.w	ip, [r5, r2]
 800964e:	9a03      	ldr	r2, [sp, #12]
 8009650:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009654:	3304      	adds	r3, #4
 8009656:	f1b9 0f00 	cmp.w	r9, #0
 800965a:	d020      	beq.n	800969e <__multiply+0x142>
 800965c:	6829      	ldr	r1, [r5, #0]
 800965e:	f104 0c14 	add.w	ip, r4, #20
 8009662:	46ae      	mov	lr, r5
 8009664:	f04f 0a00 	mov.w	sl, #0
 8009668:	f8bc b000 	ldrh.w	fp, [ip]
 800966c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009670:	fb09 220b 	mla	r2, r9, fp, r2
 8009674:	4492      	add	sl, r2
 8009676:	b289      	uxth	r1, r1
 8009678:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800967c:	f84e 1b04 	str.w	r1, [lr], #4
 8009680:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009684:	f8be 1000 	ldrh.w	r1, [lr]
 8009688:	0c12      	lsrs	r2, r2, #16
 800968a:	fb09 1102 	mla	r1, r9, r2, r1
 800968e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009692:	4567      	cmp	r7, ip
 8009694:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009698:	d8e6      	bhi.n	8009668 <__multiply+0x10c>
 800969a:	9a01      	ldr	r2, [sp, #4]
 800969c:	50a9      	str	r1, [r5, r2]
 800969e:	3504      	adds	r5, #4
 80096a0:	e79a      	b.n	80095d8 <__multiply+0x7c>
 80096a2:	3e01      	subs	r6, #1
 80096a4:	e79c      	b.n	80095e0 <__multiply+0x84>
 80096a6:	bf00      	nop
 80096a8:	0800ae58 	.word	0x0800ae58
 80096ac:	0800aee4 	.word	0x0800aee4

080096b0 <__pow5mult>:
 80096b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096b4:	4615      	mov	r5, r2
 80096b6:	f012 0203 	ands.w	r2, r2, #3
 80096ba:	4606      	mov	r6, r0
 80096bc:	460f      	mov	r7, r1
 80096be:	d007      	beq.n	80096d0 <__pow5mult+0x20>
 80096c0:	4c25      	ldr	r4, [pc, #148]	; (8009758 <__pow5mult+0xa8>)
 80096c2:	3a01      	subs	r2, #1
 80096c4:	2300      	movs	r3, #0
 80096c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096ca:	f7ff fe51 	bl	8009370 <__multadd>
 80096ce:	4607      	mov	r7, r0
 80096d0:	10ad      	asrs	r5, r5, #2
 80096d2:	d03d      	beq.n	8009750 <__pow5mult+0xa0>
 80096d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80096d6:	b97c      	cbnz	r4, 80096f8 <__pow5mult+0x48>
 80096d8:	2010      	movs	r0, #16
 80096da:	f7fc fd4b 	bl	8006174 <malloc>
 80096de:	4602      	mov	r2, r0
 80096e0:	6270      	str	r0, [r6, #36]	; 0x24
 80096e2:	b928      	cbnz	r0, 80096f0 <__pow5mult+0x40>
 80096e4:	4b1d      	ldr	r3, [pc, #116]	; (800975c <__pow5mult+0xac>)
 80096e6:	481e      	ldr	r0, [pc, #120]	; (8009760 <__pow5mult+0xb0>)
 80096e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80096ec:	f000 fc3a 	bl	8009f64 <__assert_func>
 80096f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096f4:	6004      	str	r4, [r0, #0]
 80096f6:	60c4      	str	r4, [r0, #12]
 80096f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80096fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009700:	b94c      	cbnz	r4, 8009716 <__pow5mult+0x66>
 8009702:	f240 2171 	movw	r1, #625	; 0x271
 8009706:	4630      	mov	r0, r6
 8009708:	f7ff ff12 	bl	8009530 <__i2b>
 800970c:	2300      	movs	r3, #0
 800970e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009712:	4604      	mov	r4, r0
 8009714:	6003      	str	r3, [r0, #0]
 8009716:	f04f 0900 	mov.w	r9, #0
 800971a:	07eb      	lsls	r3, r5, #31
 800971c:	d50a      	bpl.n	8009734 <__pow5mult+0x84>
 800971e:	4639      	mov	r1, r7
 8009720:	4622      	mov	r2, r4
 8009722:	4630      	mov	r0, r6
 8009724:	f7ff ff1a 	bl	800955c <__multiply>
 8009728:	4639      	mov	r1, r7
 800972a:	4680      	mov	r8, r0
 800972c:	4630      	mov	r0, r6
 800972e:	f7ff fdfd 	bl	800932c <_Bfree>
 8009732:	4647      	mov	r7, r8
 8009734:	106d      	asrs	r5, r5, #1
 8009736:	d00b      	beq.n	8009750 <__pow5mult+0xa0>
 8009738:	6820      	ldr	r0, [r4, #0]
 800973a:	b938      	cbnz	r0, 800974c <__pow5mult+0x9c>
 800973c:	4622      	mov	r2, r4
 800973e:	4621      	mov	r1, r4
 8009740:	4630      	mov	r0, r6
 8009742:	f7ff ff0b 	bl	800955c <__multiply>
 8009746:	6020      	str	r0, [r4, #0]
 8009748:	f8c0 9000 	str.w	r9, [r0]
 800974c:	4604      	mov	r4, r0
 800974e:	e7e4      	b.n	800971a <__pow5mult+0x6a>
 8009750:	4638      	mov	r0, r7
 8009752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009756:	bf00      	nop
 8009758:	0800b030 	.word	0x0800b030
 800975c:	0800ade6 	.word	0x0800ade6
 8009760:	0800aee4 	.word	0x0800aee4

08009764 <__lshift>:
 8009764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009768:	460c      	mov	r4, r1
 800976a:	6849      	ldr	r1, [r1, #4]
 800976c:	6923      	ldr	r3, [r4, #16]
 800976e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009772:	68a3      	ldr	r3, [r4, #8]
 8009774:	4607      	mov	r7, r0
 8009776:	4691      	mov	r9, r2
 8009778:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800977c:	f108 0601 	add.w	r6, r8, #1
 8009780:	42b3      	cmp	r3, r6
 8009782:	db0b      	blt.n	800979c <__lshift+0x38>
 8009784:	4638      	mov	r0, r7
 8009786:	f7ff fd91 	bl	80092ac <_Balloc>
 800978a:	4605      	mov	r5, r0
 800978c:	b948      	cbnz	r0, 80097a2 <__lshift+0x3e>
 800978e:	4602      	mov	r2, r0
 8009790:	4b2a      	ldr	r3, [pc, #168]	; (800983c <__lshift+0xd8>)
 8009792:	482b      	ldr	r0, [pc, #172]	; (8009840 <__lshift+0xdc>)
 8009794:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009798:	f000 fbe4 	bl	8009f64 <__assert_func>
 800979c:	3101      	adds	r1, #1
 800979e:	005b      	lsls	r3, r3, #1
 80097a0:	e7ee      	b.n	8009780 <__lshift+0x1c>
 80097a2:	2300      	movs	r3, #0
 80097a4:	f100 0114 	add.w	r1, r0, #20
 80097a8:	f100 0210 	add.w	r2, r0, #16
 80097ac:	4618      	mov	r0, r3
 80097ae:	4553      	cmp	r3, sl
 80097b0:	db37      	blt.n	8009822 <__lshift+0xbe>
 80097b2:	6920      	ldr	r0, [r4, #16]
 80097b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097b8:	f104 0314 	add.w	r3, r4, #20
 80097bc:	f019 091f 	ands.w	r9, r9, #31
 80097c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80097c8:	d02f      	beq.n	800982a <__lshift+0xc6>
 80097ca:	f1c9 0e20 	rsb	lr, r9, #32
 80097ce:	468a      	mov	sl, r1
 80097d0:	f04f 0c00 	mov.w	ip, #0
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	fa02 f209 	lsl.w	r2, r2, r9
 80097da:	ea42 020c 	orr.w	r2, r2, ip
 80097de:	f84a 2b04 	str.w	r2, [sl], #4
 80097e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097e6:	4298      	cmp	r0, r3
 80097e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80097ec:	d8f2      	bhi.n	80097d4 <__lshift+0x70>
 80097ee:	1b03      	subs	r3, r0, r4
 80097f0:	3b15      	subs	r3, #21
 80097f2:	f023 0303 	bic.w	r3, r3, #3
 80097f6:	3304      	adds	r3, #4
 80097f8:	f104 0215 	add.w	r2, r4, #21
 80097fc:	4290      	cmp	r0, r2
 80097fe:	bf38      	it	cc
 8009800:	2304      	movcc	r3, #4
 8009802:	f841 c003 	str.w	ip, [r1, r3]
 8009806:	f1bc 0f00 	cmp.w	ip, #0
 800980a:	d001      	beq.n	8009810 <__lshift+0xac>
 800980c:	f108 0602 	add.w	r6, r8, #2
 8009810:	3e01      	subs	r6, #1
 8009812:	4638      	mov	r0, r7
 8009814:	612e      	str	r6, [r5, #16]
 8009816:	4621      	mov	r1, r4
 8009818:	f7ff fd88 	bl	800932c <_Bfree>
 800981c:	4628      	mov	r0, r5
 800981e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009822:	f842 0f04 	str.w	r0, [r2, #4]!
 8009826:	3301      	adds	r3, #1
 8009828:	e7c1      	b.n	80097ae <__lshift+0x4a>
 800982a:	3904      	subs	r1, #4
 800982c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009830:	f841 2f04 	str.w	r2, [r1, #4]!
 8009834:	4298      	cmp	r0, r3
 8009836:	d8f9      	bhi.n	800982c <__lshift+0xc8>
 8009838:	e7ea      	b.n	8009810 <__lshift+0xac>
 800983a:	bf00      	nop
 800983c:	0800ae58 	.word	0x0800ae58
 8009840:	0800aee4 	.word	0x0800aee4

08009844 <__mcmp>:
 8009844:	b530      	push	{r4, r5, lr}
 8009846:	6902      	ldr	r2, [r0, #16]
 8009848:	690c      	ldr	r4, [r1, #16]
 800984a:	1b12      	subs	r2, r2, r4
 800984c:	d10e      	bne.n	800986c <__mcmp+0x28>
 800984e:	f100 0314 	add.w	r3, r0, #20
 8009852:	3114      	adds	r1, #20
 8009854:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009858:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800985c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009860:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009864:	42a5      	cmp	r5, r4
 8009866:	d003      	beq.n	8009870 <__mcmp+0x2c>
 8009868:	d305      	bcc.n	8009876 <__mcmp+0x32>
 800986a:	2201      	movs	r2, #1
 800986c:	4610      	mov	r0, r2
 800986e:	bd30      	pop	{r4, r5, pc}
 8009870:	4283      	cmp	r3, r0
 8009872:	d3f3      	bcc.n	800985c <__mcmp+0x18>
 8009874:	e7fa      	b.n	800986c <__mcmp+0x28>
 8009876:	f04f 32ff 	mov.w	r2, #4294967295
 800987a:	e7f7      	b.n	800986c <__mcmp+0x28>

0800987c <__mdiff>:
 800987c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009880:	460c      	mov	r4, r1
 8009882:	4606      	mov	r6, r0
 8009884:	4611      	mov	r1, r2
 8009886:	4620      	mov	r0, r4
 8009888:	4690      	mov	r8, r2
 800988a:	f7ff ffdb 	bl	8009844 <__mcmp>
 800988e:	1e05      	subs	r5, r0, #0
 8009890:	d110      	bne.n	80098b4 <__mdiff+0x38>
 8009892:	4629      	mov	r1, r5
 8009894:	4630      	mov	r0, r6
 8009896:	f7ff fd09 	bl	80092ac <_Balloc>
 800989a:	b930      	cbnz	r0, 80098aa <__mdiff+0x2e>
 800989c:	4b3a      	ldr	r3, [pc, #232]	; (8009988 <__mdiff+0x10c>)
 800989e:	4602      	mov	r2, r0
 80098a0:	f240 2132 	movw	r1, #562	; 0x232
 80098a4:	4839      	ldr	r0, [pc, #228]	; (800998c <__mdiff+0x110>)
 80098a6:	f000 fb5d 	bl	8009f64 <__assert_func>
 80098aa:	2301      	movs	r3, #1
 80098ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b4:	bfa4      	itt	ge
 80098b6:	4643      	movge	r3, r8
 80098b8:	46a0      	movge	r8, r4
 80098ba:	4630      	mov	r0, r6
 80098bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098c0:	bfa6      	itte	ge
 80098c2:	461c      	movge	r4, r3
 80098c4:	2500      	movge	r5, #0
 80098c6:	2501      	movlt	r5, #1
 80098c8:	f7ff fcf0 	bl	80092ac <_Balloc>
 80098cc:	b920      	cbnz	r0, 80098d8 <__mdiff+0x5c>
 80098ce:	4b2e      	ldr	r3, [pc, #184]	; (8009988 <__mdiff+0x10c>)
 80098d0:	4602      	mov	r2, r0
 80098d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80098d6:	e7e5      	b.n	80098a4 <__mdiff+0x28>
 80098d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80098dc:	6926      	ldr	r6, [r4, #16]
 80098de:	60c5      	str	r5, [r0, #12]
 80098e0:	f104 0914 	add.w	r9, r4, #20
 80098e4:	f108 0514 	add.w	r5, r8, #20
 80098e8:	f100 0e14 	add.w	lr, r0, #20
 80098ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80098f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80098f4:	f108 0210 	add.w	r2, r8, #16
 80098f8:	46f2      	mov	sl, lr
 80098fa:	2100      	movs	r1, #0
 80098fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8009900:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009904:	fa1f f883 	uxth.w	r8, r3
 8009908:	fa11 f18b 	uxtah	r1, r1, fp
 800990c:	0c1b      	lsrs	r3, r3, #16
 800990e:	eba1 0808 	sub.w	r8, r1, r8
 8009912:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009916:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800991a:	fa1f f888 	uxth.w	r8, r8
 800991e:	1419      	asrs	r1, r3, #16
 8009920:	454e      	cmp	r6, r9
 8009922:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009926:	f84a 3b04 	str.w	r3, [sl], #4
 800992a:	d8e7      	bhi.n	80098fc <__mdiff+0x80>
 800992c:	1b33      	subs	r3, r6, r4
 800992e:	3b15      	subs	r3, #21
 8009930:	f023 0303 	bic.w	r3, r3, #3
 8009934:	3304      	adds	r3, #4
 8009936:	3415      	adds	r4, #21
 8009938:	42a6      	cmp	r6, r4
 800993a:	bf38      	it	cc
 800993c:	2304      	movcc	r3, #4
 800993e:	441d      	add	r5, r3
 8009940:	4473      	add	r3, lr
 8009942:	469e      	mov	lr, r3
 8009944:	462e      	mov	r6, r5
 8009946:	4566      	cmp	r6, ip
 8009948:	d30e      	bcc.n	8009968 <__mdiff+0xec>
 800994a:	f10c 0203 	add.w	r2, ip, #3
 800994e:	1b52      	subs	r2, r2, r5
 8009950:	f022 0203 	bic.w	r2, r2, #3
 8009954:	3d03      	subs	r5, #3
 8009956:	45ac      	cmp	ip, r5
 8009958:	bf38      	it	cc
 800995a:	2200      	movcc	r2, #0
 800995c:	441a      	add	r2, r3
 800995e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009962:	b17b      	cbz	r3, 8009984 <__mdiff+0x108>
 8009964:	6107      	str	r7, [r0, #16]
 8009966:	e7a3      	b.n	80098b0 <__mdiff+0x34>
 8009968:	f856 8b04 	ldr.w	r8, [r6], #4
 800996c:	fa11 f288 	uxtah	r2, r1, r8
 8009970:	1414      	asrs	r4, r2, #16
 8009972:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009976:	b292      	uxth	r2, r2
 8009978:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800997c:	f84e 2b04 	str.w	r2, [lr], #4
 8009980:	1421      	asrs	r1, r4, #16
 8009982:	e7e0      	b.n	8009946 <__mdiff+0xca>
 8009984:	3f01      	subs	r7, #1
 8009986:	e7ea      	b.n	800995e <__mdiff+0xe2>
 8009988:	0800ae58 	.word	0x0800ae58
 800998c:	0800aee4 	.word	0x0800aee4

08009990 <__ulp>:
 8009990:	b082      	sub	sp, #8
 8009992:	ed8d 0b00 	vstr	d0, [sp]
 8009996:	9b01      	ldr	r3, [sp, #4]
 8009998:	4912      	ldr	r1, [pc, #72]	; (80099e4 <__ulp+0x54>)
 800999a:	4019      	ands	r1, r3
 800999c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80099a0:	2900      	cmp	r1, #0
 80099a2:	dd05      	ble.n	80099b0 <__ulp+0x20>
 80099a4:	2200      	movs	r2, #0
 80099a6:	460b      	mov	r3, r1
 80099a8:	ec43 2b10 	vmov	d0, r2, r3
 80099ac:	b002      	add	sp, #8
 80099ae:	4770      	bx	lr
 80099b0:	4249      	negs	r1, r1
 80099b2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80099b6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80099ba:	f04f 0200 	mov.w	r2, #0
 80099be:	f04f 0300 	mov.w	r3, #0
 80099c2:	da04      	bge.n	80099ce <__ulp+0x3e>
 80099c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80099c8:	fa41 f300 	asr.w	r3, r1, r0
 80099cc:	e7ec      	b.n	80099a8 <__ulp+0x18>
 80099ce:	f1a0 0114 	sub.w	r1, r0, #20
 80099d2:	291e      	cmp	r1, #30
 80099d4:	bfda      	itte	le
 80099d6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80099da:	fa20 f101 	lsrle.w	r1, r0, r1
 80099de:	2101      	movgt	r1, #1
 80099e0:	460a      	mov	r2, r1
 80099e2:	e7e1      	b.n	80099a8 <__ulp+0x18>
 80099e4:	7ff00000 	.word	0x7ff00000

080099e8 <__b2d>:
 80099e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099ea:	6905      	ldr	r5, [r0, #16]
 80099ec:	f100 0714 	add.w	r7, r0, #20
 80099f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80099f4:	1f2e      	subs	r6, r5, #4
 80099f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80099fa:	4620      	mov	r0, r4
 80099fc:	f7ff fd48 	bl	8009490 <__hi0bits>
 8009a00:	f1c0 0320 	rsb	r3, r0, #32
 8009a04:	280a      	cmp	r0, #10
 8009a06:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009a84 <__b2d+0x9c>
 8009a0a:	600b      	str	r3, [r1, #0]
 8009a0c:	dc14      	bgt.n	8009a38 <__b2d+0x50>
 8009a0e:	f1c0 0e0b 	rsb	lr, r0, #11
 8009a12:	fa24 f10e 	lsr.w	r1, r4, lr
 8009a16:	42b7      	cmp	r7, r6
 8009a18:	ea41 030c 	orr.w	r3, r1, ip
 8009a1c:	bf34      	ite	cc
 8009a1e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a22:	2100      	movcs	r1, #0
 8009a24:	3015      	adds	r0, #21
 8009a26:	fa04 f000 	lsl.w	r0, r4, r0
 8009a2a:	fa21 f10e 	lsr.w	r1, r1, lr
 8009a2e:	ea40 0201 	orr.w	r2, r0, r1
 8009a32:	ec43 2b10 	vmov	d0, r2, r3
 8009a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a38:	42b7      	cmp	r7, r6
 8009a3a:	bf3a      	itte	cc
 8009a3c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009a40:	f1a5 0608 	subcc.w	r6, r5, #8
 8009a44:	2100      	movcs	r1, #0
 8009a46:	380b      	subs	r0, #11
 8009a48:	d017      	beq.n	8009a7a <__b2d+0x92>
 8009a4a:	f1c0 0c20 	rsb	ip, r0, #32
 8009a4e:	fa04 f500 	lsl.w	r5, r4, r0
 8009a52:	42be      	cmp	r6, r7
 8009a54:	fa21 f40c 	lsr.w	r4, r1, ip
 8009a58:	ea45 0504 	orr.w	r5, r5, r4
 8009a5c:	bf8c      	ite	hi
 8009a5e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009a62:	2400      	movls	r4, #0
 8009a64:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009a68:	fa01 f000 	lsl.w	r0, r1, r0
 8009a6c:	fa24 f40c 	lsr.w	r4, r4, ip
 8009a70:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009a74:	ea40 0204 	orr.w	r2, r0, r4
 8009a78:	e7db      	b.n	8009a32 <__b2d+0x4a>
 8009a7a:	ea44 030c 	orr.w	r3, r4, ip
 8009a7e:	460a      	mov	r2, r1
 8009a80:	e7d7      	b.n	8009a32 <__b2d+0x4a>
 8009a82:	bf00      	nop
 8009a84:	3ff00000 	.word	0x3ff00000

08009a88 <__d2b>:
 8009a88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009a8c:	4689      	mov	r9, r1
 8009a8e:	2101      	movs	r1, #1
 8009a90:	ec57 6b10 	vmov	r6, r7, d0
 8009a94:	4690      	mov	r8, r2
 8009a96:	f7ff fc09 	bl	80092ac <_Balloc>
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	b930      	cbnz	r0, 8009aac <__d2b+0x24>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	4b25      	ldr	r3, [pc, #148]	; (8009b38 <__d2b+0xb0>)
 8009aa2:	4826      	ldr	r0, [pc, #152]	; (8009b3c <__d2b+0xb4>)
 8009aa4:	f240 310a 	movw	r1, #778	; 0x30a
 8009aa8:	f000 fa5c 	bl	8009f64 <__assert_func>
 8009aac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009ab0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ab4:	bb35      	cbnz	r5, 8009b04 <__d2b+0x7c>
 8009ab6:	2e00      	cmp	r6, #0
 8009ab8:	9301      	str	r3, [sp, #4]
 8009aba:	d028      	beq.n	8009b0e <__d2b+0x86>
 8009abc:	4668      	mov	r0, sp
 8009abe:	9600      	str	r6, [sp, #0]
 8009ac0:	f7ff fd06 	bl	80094d0 <__lo0bits>
 8009ac4:	9900      	ldr	r1, [sp, #0]
 8009ac6:	b300      	cbz	r0, 8009b0a <__d2b+0x82>
 8009ac8:	9a01      	ldr	r2, [sp, #4]
 8009aca:	f1c0 0320 	rsb	r3, r0, #32
 8009ace:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad2:	430b      	orrs	r3, r1
 8009ad4:	40c2      	lsrs	r2, r0
 8009ad6:	6163      	str	r3, [r4, #20]
 8009ad8:	9201      	str	r2, [sp, #4]
 8009ada:	9b01      	ldr	r3, [sp, #4]
 8009adc:	61a3      	str	r3, [r4, #24]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	bf14      	ite	ne
 8009ae2:	2202      	movne	r2, #2
 8009ae4:	2201      	moveq	r2, #1
 8009ae6:	6122      	str	r2, [r4, #16]
 8009ae8:	b1d5      	cbz	r5, 8009b20 <__d2b+0x98>
 8009aea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009aee:	4405      	add	r5, r0
 8009af0:	f8c9 5000 	str.w	r5, [r9]
 8009af4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009af8:	f8c8 0000 	str.w	r0, [r8]
 8009afc:	4620      	mov	r0, r4
 8009afe:	b003      	add	sp, #12
 8009b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009b04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b08:	e7d5      	b.n	8009ab6 <__d2b+0x2e>
 8009b0a:	6161      	str	r1, [r4, #20]
 8009b0c:	e7e5      	b.n	8009ada <__d2b+0x52>
 8009b0e:	a801      	add	r0, sp, #4
 8009b10:	f7ff fcde 	bl	80094d0 <__lo0bits>
 8009b14:	9b01      	ldr	r3, [sp, #4]
 8009b16:	6163      	str	r3, [r4, #20]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	6122      	str	r2, [r4, #16]
 8009b1c:	3020      	adds	r0, #32
 8009b1e:	e7e3      	b.n	8009ae8 <__d2b+0x60>
 8009b20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009b28:	f8c9 0000 	str.w	r0, [r9]
 8009b2c:	6918      	ldr	r0, [r3, #16]
 8009b2e:	f7ff fcaf 	bl	8009490 <__hi0bits>
 8009b32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b36:	e7df      	b.n	8009af8 <__d2b+0x70>
 8009b38:	0800ae58 	.word	0x0800ae58
 8009b3c:	0800aee4 	.word	0x0800aee4

08009b40 <__ratio>:
 8009b40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b44:	4688      	mov	r8, r1
 8009b46:	4669      	mov	r1, sp
 8009b48:	4681      	mov	r9, r0
 8009b4a:	f7ff ff4d 	bl	80099e8 <__b2d>
 8009b4e:	a901      	add	r1, sp, #4
 8009b50:	4640      	mov	r0, r8
 8009b52:	ec55 4b10 	vmov	r4, r5, d0
 8009b56:	f7ff ff47 	bl	80099e8 <__b2d>
 8009b5a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b5e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009b62:	eba3 0c02 	sub.w	ip, r3, r2
 8009b66:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009b6a:	1a9b      	subs	r3, r3, r2
 8009b6c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009b70:	ec51 0b10 	vmov	r0, r1, d0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	bfd6      	itet	le
 8009b78:	460a      	movle	r2, r1
 8009b7a:	462a      	movgt	r2, r5
 8009b7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b80:	468b      	mov	fp, r1
 8009b82:	462f      	mov	r7, r5
 8009b84:	bfd4      	ite	le
 8009b86:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009b8a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009b8e:	4620      	mov	r0, r4
 8009b90:	ee10 2a10 	vmov	r2, s0
 8009b94:	465b      	mov	r3, fp
 8009b96:	4639      	mov	r1, r7
 8009b98:	f7f6 fe58 	bl	800084c <__aeabi_ddiv>
 8009b9c:	ec41 0b10 	vmov	d0, r0, r1
 8009ba0:	b003      	add	sp, #12
 8009ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ba6 <__copybits>:
 8009ba6:	3901      	subs	r1, #1
 8009ba8:	b570      	push	{r4, r5, r6, lr}
 8009baa:	1149      	asrs	r1, r1, #5
 8009bac:	6914      	ldr	r4, [r2, #16]
 8009bae:	3101      	adds	r1, #1
 8009bb0:	f102 0314 	add.w	r3, r2, #20
 8009bb4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009bb8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009bbc:	1f05      	subs	r5, r0, #4
 8009bbe:	42a3      	cmp	r3, r4
 8009bc0:	d30c      	bcc.n	8009bdc <__copybits+0x36>
 8009bc2:	1aa3      	subs	r3, r4, r2
 8009bc4:	3b11      	subs	r3, #17
 8009bc6:	f023 0303 	bic.w	r3, r3, #3
 8009bca:	3211      	adds	r2, #17
 8009bcc:	42a2      	cmp	r2, r4
 8009bce:	bf88      	it	hi
 8009bd0:	2300      	movhi	r3, #0
 8009bd2:	4418      	add	r0, r3
 8009bd4:	2300      	movs	r3, #0
 8009bd6:	4288      	cmp	r0, r1
 8009bd8:	d305      	bcc.n	8009be6 <__copybits+0x40>
 8009bda:	bd70      	pop	{r4, r5, r6, pc}
 8009bdc:	f853 6b04 	ldr.w	r6, [r3], #4
 8009be0:	f845 6f04 	str.w	r6, [r5, #4]!
 8009be4:	e7eb      	b.n	8009bbe <__copybits+0x18>
 8009be6:	f840 3b04 	str.w	r3, [r0], #4
 8009bea:	e7f4      	b.n	8009bd6 <__copybits+0x30>

08009bec <__any_on>:
 8009bec:	f100 0214 	add.w	r2, r0, #20
 8009bf0:	6900      	ldr	r0, [r0, #16]
 8009bf2:	114b      	asrs	r3, r1, #5
 8009bf4:	4298      	cmp	r0, r3
 8009bf6:	b510      	push	{r4, lr}
 8009bf8:	db11      	blt.n	8009c1e <__any_on+0x32>
 8009bfa:	dd0a      	ble.n	8009c12 <__any_on+0x26>
 8009bfc:	f011 011f 	ands.w	r1, r1, #31
 8009c00:	d007      	beq.n	8009c12 <__any_on+0x26>
 8009c02:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009c06:	fa24 f001 	lsr.w	r0, r4, r1
 8009c0a:	fa00 f101 	lsl.w	r1, r0, r1
 8009c0e:	428c      	cmp	r4, r1
 8009c10:	d10b      	bne.n	8009c2a <__any_on+0x3e>
 8009c12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c16:	4293      	cmp	r3, r2
 8009c18:	d803      	bhi.n	8009c22 <__any_on+0x36>
 8009c1a:	2000      	movs	r0, #0
 8009c1c:	bd10      	pop	{r4, pc}
 8009c1e:	4603      	mov	r3, r0
 8009c20:	e7f7      	b.n	8009c12 <__any_on+0x26>
 8009c22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c26:	2900      	cmp	r1, #0
 8009c28:	d0f5      	beq.n	8009c16 <__any_on+0x2a>
 8009c2a:	2001      	movs	r0, #1
 8009c2c:	e7f6      	b.n	8009c1c <__any_on+0x30>

08009c2e <_calloc_r>:
 8009c2e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009c30:	fba1 2402 	umull	r2, r4, r1, r2
 8009c34:	b94c      	cbnz	r4, 8009c4a <_calloc_r+0x1c>
 8009c36:	4611      	mov	r1, r2
 8009c38:	9201      	str	r2, [sp, #4]
 8009c3a:	f7fc fb2d 	bl	8006298 <_malloc_r>
 8009c3e:	9a01      	ldr	r2, [sp, #4]
 8009c40:	4605      	mov	r5, r0
 8009c42:	b930      	cbnz	r0, 8009c52 <_calloc_r+0x24>
 8009c44:	4628      	mov	r0, r5
 8009c46:	b003      	add	sp, #12
 8009c48:	bd30      	pop	{r4, r5, pc}
 8009c4a:	220c      	movs	r2, #12
 8009c4c:	6002      	str	r2, [r0, #0]
 8009c4e:	2500      	movs	r5, #0
 8009c50:	e7f8      	b.n	8009c44 <_calloc_r+0x16>
 8009c52:	4621      	mov	r1, r4
 8009c54:	f7fc faac 	bl	80061b0 <memset>
 8009c58:	e7f4      	b.n	8009c44 <_calloc_r+0x16>

08009c5a <__ssputs_r>:
 8009c5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c5e:	688e      	ldr	r6, [r1, #8]
 8009c60:	429e      	cmp	r6, r3
 8009c62:	4682      	mov	sl, r0
 8009c64:	460c      	mov	r4, r1
 8009c66:	4690      	mov	r8, r2
 8009c68:	461f      	mov	r7, r3
 8009c6a:	d838      	bhi.n	8009cde <__ssputs_r+0x84>
 8009c6c:	898a      	ldrh	r2, [r1, #12]
 8009c6e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c72:	d032      	beq.n	8009cda <__ssputs_r+0x80>
 8009c74:	6825      	ldr	r5, [r4, #0]
 8009c76:	6909      	ldr	r1, [r1, #16]
 8009c78:	eba5 0901 	sub.w	r9, r5, r1
 8009c7c:	6965      	ldr	r5, [r4, #20]
 8009c7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c82:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c86:	3301      	adds	r3, #1
 8009c88:	444b      	add	r3, r9
 8009c8a:	106d      	asrs	r5, r5, #1
 8009c8c:	429d      	cmp	r5, r3
 8009c8e:	bf38      	it	cc
 8009c90:	461d      	movcc	r5, r3
 8009c92:	0553      	lsls	r3, r2, #21
 8009c94:	d531      	bpl.n	8009cfa <__ssputs_r+0xa0>
 8009c96:	4629      	mov	r1, r5
 8009c98:	f7fc fafe 	bl	8006298 <_malloc_r>
 8009c9c:	4606      	mov	r6, r0
 8009c9e:	b950      	cbnz	r0, 8009cb6 <__ssputs_r+0x5c>
 8009ca0:	230c      	movs	r3, #12
 8009ca2:	f8ca 3000 	str.w	r3, [sl]
 8009ca6:	89a3      	ldrh	r3, [r4, #12]
 8009ca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009cac:	81a3      	strh	r3, [r4, #12]
 8009cae:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cb6:	6921      	ldr	r1, [r4, #16]
 8009cb8:	464a      	mov	r2, r9
 8009cba:	f7fc fa6b 	bl	8006194 <memcpy>
 8009cbe:	89a3      	ldrh	r3, [r4, #12]
 8009cc0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cc8:	81a3      	strh	r3, [r4, #12]
 8009cca:	6126      	str	r6, [r4, #16]
 8009ccc:	6165      	str	r5, [r4, #20]
 8009cce:	444e      	add	r6, r9
 8009cd0:	eba5 0509 	sub.w	r5, r5, r9
 8009cd4:	6026      	str	r6, [r4, #0]
 8009cd6:	60a5      	str	r5, [r4, #8]
 8009cd8:	463e      	mov	r6, r7
 8009cda:	42be      	cmp	r6, r7
 8009cdc:	d900      	bls.n	8009ce0 <__ssputs_r+0x86>
 8009cde:	463e      	mov	r6, r7
 8009ce0:	6820      	ldr	r0, [r4, #0]
 8009ce2:	4632      	mov	r2, r6
 8009ce4:	4641      	mov	r1, r8
 8009ce6:	f000 f970 	bl	8009fca <memmove>
 8009cea:	68a3      	ldr	r3, [r4, #8]
 8009cec:	1b9b      	subs	r3, r3, r6
 8009cee:	60a3      	str	r3, [r4, #8]
 8009cf0:	6823      	ldr	r3, [r4, #0]
 8009cf2:	4433      	add	r3, r6
 8009cf4:	6023      	str	r3, [r4, #0]
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	e7db      	b.n	8009cb2 <__ssputs_r+0x58>
 8009cfa:	462a      	mov	r2, r5
 8009cfc:	f000 f97f 	bl	8009ffe <_realloc_r>
 8009d00:	4606      	mov	r6, r0
 8009d02:	2800      	cmp	r0, #0
 8009d04:	d1e1      	bne.n	8009cca <__ssputs_r+0x70>
 8009d06:	6921      	ldr	r1, [r4, #16]
 8009d08:	4650      	mov	r0, sl
 8009d0a:	f7fc fa59 	bl	80061c0 <_free_r>
 8009d0e:	e7c7      	b.n	8009ca0 <__ssputs_r+0x46>

08009d10 <_svfiprintf_r>:
 8009d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d14:	4698      	mov	r8, r3
 8009d16:	898b      	ldrh	r3, [r1, #12]
 8009d18:	061b      	lsls	r3, r3, #24
 8009d1a:	b09d      	sub	sp, #116	; 0x74
 8009d1c:	4607      	mov	r7, r0
 8009d1e:	460d      	mov	r5, r1
 8009d20:	4614      	mov	r4, r2
 8009d22:	d50e      	bpl.n	8009d42 <_svfiprintf_r+0x32>
 8009d24:	690b      	ldr	r3, [r1, #16]
 8009d26:	b963      	cbnz	r3, 8009d42 <_svfiprintf_r+0x32>
 8009d28:	2140      	movs	r1, #64	; 0x40
 8009d2a:	f7fc fab5 	bl	8006298 <_malloc_r>
 8009d2e:	6028      	str	r0, [r5, #0]
 8009d30:	6128      	str	r0, [r5, #16]
 8009d32:	b920      	cbnz	r0, 8009d3e <_svfiprintf_r+0x2e>
 8009d34:	230c      	movs	r3, #12
 8009d36:	603b      	str	r3, [r7, #0]
 8009d38:	f04f 30ff 	mov.w	r0, #4294967295
 8009d3c:	e0d1      	b.n	8009ee2 <_svfiprintf_r+0x1d2>
 8009d3e:	2340      	movs	r3, #64	; 0x40
 8009d40:	616b      	str	r3, [r5, #20]
 8009d42:	2300      	movs	r3, #0
 8009d44:	9309      	str	r3, [sp, #36]	; 0x24
 8009d46:	2320      	movs	r3, #32
 8009d48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d50:	2330      	movs	r3, #48	; 0x30
 8009d52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009efc <_svfiprintf_r+0x1ec>
 8009d56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d5a:	f04f 0901 	mov.w	r9, #1
 8009d5e:	4623      	mov	r3, r4
 8009d60:	469a      	mov	sl, r3
 8009d62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d66:	b10a      	cbz	r2, 8009d6c <_svfiprintf_r+0x5c>
 8009d68:	2a25      	cmp	r2, #37	; 0x25
 8009d6a:	d1f9      	bne.n	8009d60 <_svfiprintf_r+0x50>
 8009d6c:	ebba 0b04 	subs.w	fp, sl, r4
 8009d70:	d00b      	beq.n	8009d8a <_svfiprintf_r+0x7a>
 8009d72:	465b      	mov	r3, fp
 8009d74:	4622      	mov	r2, r4
 8009d76:	4629      	mov	r1, r5
 8009d78:	4638      	mov	r0, r7
 8009d7a:	f7ff ff6e 	bl	8009c5a <__ssputs_r>
 8009d7e:	3001      	adds	r0, #1
 8009d80:	f000 80aa 	beq.w	8009ed8 <_svfiprintf_r+0x1c8>
 8009d84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d86:	445a      	add	r2, fp
 8009d88:	9209      	str	r2, [sp, #36]	; 0x24
 8009d8a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	f000 80a2 	beq.w	8009ed8 <_svfiprintf_r+0x1c8>
 8009d94:	2300      	movs	r3, #0
 8009d96:	f04f 32ff 	mov.w	r2, #4294967295
 8009d9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d9e:	f10a 0a01 	add.w	sl, sl, #1
 8009da2:	9304      	str	r3, [sp, #16]
 8009da4:	9307      	str	r3, [sp, #28]
 8009da6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009daa:	931a      	str	r3, [sp, #104]	; 0x68
 8009dac:	4654      	mov	r4, sl
 8009dae:	2205      	movs	r2, #5
 8009db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009db4:	4851      	ldr	r0, [pc, #324]	; (8009efc <_svfiprintf_r+0x1ec>)
 8009db6:	f7f6 fa13 	bl	80001e0 <memchr>
 8009dba:	9a04      	ldr	r2, [sp, #16]
 8009dbc:	b9d8      	cbnz	r0, 8009df6 <_svfiprintf_r+0xe6>
 8009dbe:	06d0      	lsls	r0, r2, #27
 8009dc0:	bf44      	itt	mi
 8009dc2:	2320      	movmi	r3, #32
 8009dc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dc8:	0711      	lsls	r1, r2, #28
 8009dca:	bf44      	itt	mi
 8009dcc:	232b      	movmi	r3, #43	; 0x2b
 8009dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8009dd6:	2b2a      	cmp	r3, #42	; 0x2a
 8009dd8:	d015      	beq.n	8009e06 <_svfiprintf_r+0xf6>
 8009dda:	9a07      	ldr	r2, [sp, #28]
 8009ddc:	4654      	mov	r4, sl
 8009dde:	2000      	movs	r0, #0
 8009de0:	f04f 0c0a 	mov.w	ip, #10
 8009de4:	4621      	mov	r1, r4
 8009de6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dea:	3b30      	subs	r3, #48	; 0x30
 8009dec:	2b09      	cmp	r3, #9
 8009dee:	d94e      	bls.n	8009e8e <_svfiprintf_r+0x17e>
 8009df0:	b1b0      	cbz	r0, 8009e20 <_svfiprintf_r+0x110>
 8009df2:	9207      	str	r2, [sp, #28]
 8009df4:	e014      	b.n	8009e20 <_svfiprintf_r+0x110>
 8009df6:	eba0 0308 	sub.w	r3, r0, r8
 8009dfa:	fa09 f303 	lsl.w	r3, r9, r3
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	9304      	str	r3, [sp, #16]
 8009e02:	46a2      	mov	sl, r4
 8009e04:	e7d2      	b.n	8009dac <_svfiprintf_r+0x9c>
 8009e06:	9b03      	ldr	r3, [sp, #12]
 8009e08:	1d19      	adds	r1, r3, #4
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	9103      	str	r1, [sp, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	bfbb      	ittet	lt
 8009e12:	425b      	neglt	r3, r3
 8009e14:	f042 0202 	orrlt.w	r2, r2, #2
 8009e18:	9307      	strge	r3, [sp, #28]
 8009e1a:	9307      	strlt	r3, [sp, #28]
 8009e1c:	bfb8      	it	lt
 8009e1e:	9204      	strlt	r2, [sp, #16]
 8009e20:	7823      	ldrb	r3, [r4, #0]
 8009e22:	2b2e      	cmp	r3, #46	; 0x2e
 8009e24:	d10c      	bne.n	8009e40 <_svfiprintf_r+0x130>
 8009e26:	7863      	ldrb	r3, [r4, #1]
 8009e28:	2b2a      	cmp	r3, #42	; 0x2a
 8009e2a:	d135      	bne.n	8009e98 <_svfiprintf_r+0x188>
 8009e2c:	9b03      	ldr	r3, [sp, #12]
 8009e2e:	1d1a      	adds	r2, r3, #4
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	9203      	str	r2, [sp, #12]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	bfb8      	it	lt
 8009e38:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e3c:	3402      	adds	r4, #2
 8009e3e:	9305      	str	r3, [sp, #20]
 8009e40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009f0c <_svfiprintf_r+0x1fc>
 8009e44:	7821      	ldrb	r1, [r4, #0]
 8009e46:	2203      	movs	r2, #3
 8009e48:	4650      	mov	r0, sl
 8009e4a:	f7f6 f9c9 	bl	80001e0 <memchr>
 8009e4e:	b140      	cbz	r0, 8009e62 <_svfiprintf_r+0x152>
 8009e50:	2340      	movs	r3, #64	; 0x40
 8009e52:	eba0 000a 	sub.w	r0, r0, sl
 8009e56:	fa03 f000 	lsl.w	r0, r3, r0
 8009e5a:	9b04      	ldr	r3, [sp, #16]
 8009e5c:	4303      	orrs	r3, r0
 8009e5e:	3401      	adds	r4, #1
 8009e60:	9304      	str	r3, [sp, #16]
 8009e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e66:	4826      	ldr	r0, [pc, #152]	; (8009f00 <_svfiprintf_r+0x1f0>)
 8009e68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e6c:	2206      	movs	r2, #6
 8009e6e:	f7f6 f9b7 	bl	80001e0 <memchr>
 8009e72:	2800      	cmp	r0, #0
 8009e74:	d038      	beq.n	8009ee8 <_svfiprintf_r+0x1d8>
 8009e76:	4b23      	ldr	r3, [pc, #140]	; (8009f04 <_svfiprintf_r+0x1f4>)
 8009e78:	bb1b      	cbnz	r3, 8009ec2 <_svfiprintf_r+0x1b2>
 8009e7a:	9b03      	ldr	r3, [sp, #12]
 8009e7c:	3307      	adds	r3, #7
 8009e7e:	f023 0307 	bic.w	r3, r3, #7
 8009e82:	3308      	adds	r3, #8
 8009e84:	9303      	str	r3, [sp, #12]
 8009e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e88:	4433      	add	r3, r6
 8009e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e8c:	e767      	b.n	8009d5e <_svfiprintf_r+0x4e>
 8009e8e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e92:	460c      	mov	r4, r1
 8009e94:	2001      	movs	r0, #1
 8009e96:	e7a5      	b.n	8009de4 <_svfiprintf_r+0xd4>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	3401      	adds	r4, #1
 8009e9c:	9305      	str	r3, [sp, #20]
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	f04f 0c0a 	mov.w	ip, #10
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eaa:	3a30      	subs	r2, #48	; 0x30
 8009eac:	2a09      	cmp	r2, #9
 8009eae:	d903      	bls.n	8009eb8 <_svfiprintf_r+0x1a8>
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d0c5      	beq.n	8009e40 <_svfiprintf_r+0x130>
 8009eb4:	9105      	str	r1, [sp, #20]
 8009eb6:	e7c3      	b.n	8009e40 <_svfiprintf_r+0x130>
 8009eb8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e7f0      	b.n	8009ea4 <_svfiprintf_r+0x194>
 8009ec2:	ab03      	add	r3, sp, #12
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	462a      	mov	r2, r5
 8009ec8:	4b0f      	ldr	r3, [pc, #60]	; (8009f08 <_svfiprintf_r+0x1f8>)
 8009eca:	a904      	add	r1, sp, #16
 8009ecc:	4638      	mov	r0, r7
 8009ece:	f7fc faf7 	bl	80064c0 <_printf_float>
 8009ed2:	1c42      	adds	r2, r0, #1
 8009ed4:	4606      	mov	r6, r0
 8009ed6:	d1d6      	bne.n	8009e86 <_svfiprintf_r+0x176>
 8009ed8:	89ab      	ldrh	r3, [r5, #12]
 8009eda:	065b      	lsls	r3, r3, #25
 8009edc:	f53f af2c 	bmi.w	8009d38 <_svfiprintf_r+0x28>
 8009ee0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ee2:	b01d      	add	sp, #116	; 0x74
 8009ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ee8:	ab03      	add	r3, sp, #12
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	462a      	mov	r2, r5
 8009eee:	4b06      	ldr	r3, [pc, #24]	; (8009f08 <_svfiprintf_r+0x1f8>)
 8009ef0:	a904      	add	r1, sp, #16
 8009ef2:	4638      	mov	r0, r7
 8009ef4:	f7fc fd88 	bl	8006a08 <_printf_i>
 8009ef8:	e7eb      	b.n	8009ed2 <_svfiprintf_r+0x1c2>
 8009efa:	bf00      	nop
 8009efc:	0800b03c 	.word	0x0800b03c
 8009f00:	0800b046 	.word	0x0800b046
 8009f04:	080064c1 	.word	0x080064c1
 8009f08:	08009c5b 	.word	0x08009c5b
 8009f0c:	0800b042 	.word	0x0800b042

08009f10 <nan>:
 8009f10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009f18 <nan+0x8>
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	00000000 	.word	0x00000000
 8009f1c:	7ff80000 	.word	0x7ff80000

08009f20 <strncmp>:
 8009f20:	b510      	push	{r4, lr}
 8009f22:	b17a      	cbz	r2, 8009f44 <strncmp+0x24>
 8009f24:	4603      	mov	r3, r0
 8009f26:	3901      	subs	r1, #1
 8009f28:	1884      	adds	r4, r0, r2
 8009f2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009f2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009f32:	4290      	cmp	r0, r2
 8009f34:	d101      	bne.n	8009f3a <strncmp+0x1a>
 8009f36:	42a3      	cmp	r3, r4
 8009f38:	d101      	bne.n	8009f3e <strncmp+0x1e>
 8009f3a:	1a80      	subs	r0, r0, r2
 8009f3c:	bd10      	pop	{r4, pc}
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	d1f3      	bne.n	8009f2a <strncmp+0xa>
 8009f42:	e7fa      	b.n	8009f3a <strncmp+0x1a>
 8009f44:	4610      	mov	r0, r2
 8009f46:	e7f9      	b.n	8009f3c <strncmp+0x1c>

08009f48 <__ascii_wctomb>:
 8009f48:	b149      	cbz	r1, 8009f5e <__ascii_wctomb+0x16>
 8009f4a:	2aff      	cmp	r2, #255	; 0xff
 8009f4c:	bf85      	ittet	hi
 8009f4e:	238a      	movhi	r3, #138	; 0x8a
 8009f50:	6003      	strhi	r3, [r0, #0]
 8009f52:	700a      	strbls	r2, [r1, #0]
 8009f54:	f04f 30ff 	movhi.w	r0, #4294967295
 8009f58:	bf98      	it	ls
 8009f5a:	2001      	movls	r0, #1
 8009f5c:	4770      	bx	lr
 8009f5e:	4608      	mov	r0, r1
 8009f60:	4770      	bx	lr
	...

08009f64 <__assert_func>:
 8009f64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f66:	4614      	mov	r4, r2
 8009f68:	461a      	mov	r2, r3
 8009f6a:	4b09      	ldr	r3, [pc, #36]	; (8009f90 <__assert_func+0x2c>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4605      	mov	r5, r0
 8009f70:	68d8      	ldr	r0, [r3, #12]
 8009f72:	b14c      	cbz	r4, 8009f88 <__assert_func+0x24>
 8009f74:	4b07      	ldr	r3, [pc, #28]	; (8009f94 <__assert_func+0x30>)
 8009f76:	9100      	str	r1, [sp, #0]
 8009f78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f7c:	4906      	ldr	r1, [pc, #24]	; (8009f98 <__assert_func+0x34>)
 8009f7e:	462b      	mov	r3, r5
 8009f80:	f000 f80e 	bl	8009fa0 <fiprintf>
 8009f84:	f000 fa84 	bl	800a490 <abort>
 8009f88:	4b04      	ldr	r3, [pc, #16]	; (8009f9c <__assert_func+0x38>)
 8009f8a:	461c      	mov	r4, r3
 8009f8c:	e7f3      	b.n	8009f76 <__assert_func+0x12>
 8009f8e:	bf00      	nop
 8009f90:	20000010 	.word	0x20000010
 8009f94:	0800b04d 	.word	0x0800b04d
 8009f98:	0800b05a 	.word	0x0800b05a
 8009f9c:	0800b088 	.word	0x0800b088

08009fa0 <fiprintf>:
 8009fa0:	b40e      	push	{r1, r2, r3}
 8009fa2:	b503      	push	{r0, r1, lr}
 8009fa4:	4601      	mov	r1, r0
 8009fa6:	ab03      	add	r3, sp, #12
 8009fa8:	4805      	ldr	r0, [pc, #20]	; (8009fc0 <fiprintf+0x20>)
 8009faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fae:	6800      	ldr	r0, [r0, #0]
 8009fb0:	9301      	str	r3, [sp, #4]
 8009fb2:	f000 f87d 	bl	800a0b0 <_vfiprintf_r>
 8009fb6:	b002      	add	sp, #8
 8009fb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fbc:	b003      	add	sp, #12
 8009fbe:	4770      	bx	lr
 8009fc0:	20000010 	.word	0x20000010

08009fc4 <__retarget_lock_init_recursive>:
 8009fc4:	4770      	bx	lr

08009fc6 <__retarget_lock_acquire_recursive>:
 8009fc6:	4770      	bx	lr

08009fc8 <__retarget_lock_release_recursive>:
 8009fc8:	4770      	bx	lr

08009fca <memmove>:
 8009fca:	4288      	cmp	r0, r1
 8009fcc:	b510      	push	{r4, lr}
 8009fce:	eb01 0402 	add.w	r4, r1, r2
 8009fd2:	d902      	bls.n	8009fda <memmove+0x10>
 8009fd4:	4284      	cmp	r4, r0
 8009fd6:	4623      	mov	r3, r4
 8009fd8:	d807      	bhi.n	8009fea <memmove+0x20>
 8009fda:	1e43      	subs	r3, r0, #1
 8009fdc:	42a1      	cmp	r1, r4
 8009fde:	d008      	beq.n	8009ff2 <memmove+0x28>
 8009fe0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fe4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009fe8:	e7f8      	b.n	8009fdc <memmove+0x12>
 8009fea:	4402      	add	r2, r0
 8009fec:	4601      	mov	r1, r0
 8009fee:	428a      	cmp	r2, r1
 8009ff0:	d100      	bne.n	8009ff4 <memmove+0x2a>
 8009ff2:	bd10      	pop	{r4, pc}
 8009ff4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ff8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ffc:	e7f7      	b.n	8009fee <memmove+0x24>

08009ffe <_realloc_r>:
 8009ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a002:	4680      	mov	r8, r0
 800a004:	4614      	mov	r4, r2
 800a006:	460e      	mov	r6, r1
 800a008:	b921      	cbnz	r1, 800a014 <_realloc_r+0x16>
 800a00a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a00e:	4611      	mov	r1, r2
 800a010:	f7fc b942 	b.w	8006298 <_malloc_r>
 800a014:	b92a      	cbnz	r2, 800a022 <_realloc_r+0x24>
 800a016:	f7fc f8d3 	bl	80061c0 <_free_r>
 800a01a:	4625      	mov	r5, r4
 800a01c:	4628      	mov	r0, r5
 800a01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a022:	f000 fc59 	bl	800a8d8 <_malloc_usable_size_r>
 800a026:	4284      	cmp	r4, r0
 800a028:	4607      	mov	r7, r0
 800a02a:	d802      	bhi.n	800a032 <_realloc_r+0x34>
 800a02c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a030:	d812      	bhi.n	800a058 <_realloc_r+0x5a>
 800a032:	4621      	mov	r1, r4
 800a034:	4640      	mov	r0, r8
 800a036:	f7fc f92f 	bl	8006298 <_malloc_r>
 800a03a:	4605      	mov	r5, r0
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d0ed      	beq.n	800a01c <_realloc_r+0x1e>
 800a040:	42bc      	cmp	r4, r7
 800a042:	4622      	mov	r2, r4
 800a044:	4631      	mov	r1, r6
 800a046:	bf28      	it	cs
 800a048:	463a      	movcs	r2, r7
 800a04a:	f7fc f8a3 	bl	8006194 <memcpy>
 800a04e:	4631      	mov	r1, r6
 800a050:	4640      	mov	r0, r8
 800a052:	f7fc f8b5 	bl	80061c0 <_free_r>
 800a056:	e7e1      	b.n	800a01c <_realloc_r+0x1e>
 800a058:	4635      	mov	r5, r6
 800a05a:	e7df      	b.n	800a01c <_realloc_r+0x1e>

0800a05c <__sfputc_r>:
 800a05c:	6893      	ldr	r3, [r2, #8]
 800a05e:	3b01      	subs	r3, #1
 800a060:	2b00      	cmp	r3, #0
 800a062:	b410      	push	{r4}
 800a064:	6093      	str	r3, [r2, #8]
 800a066:	da08      	bge.n	800a07a <__sfputc_r+0x1e>
 800a068:	6994      	ldr	r4, [r2, #24]
 800a06a:	42a3      	cmp	r3, r4
 800a06c:	db01      	blt.n	800a072 <__sfputc_r+0x16>
 800a06e:	290a      	cmp	r1, #10
 800a070:	d103      	bne.n	800a07a <__sfputc_r+0x1e>
 800a072:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a076:	f000 b94b 	b.w	800a310 <__swbuf_r>
 800a07a:	6813      	ldr	r3, [r2, #0]
 800a07c:	1c58      	adds	r0, r3, #1
 800a07e:	6010      	str	r0, [r2, #0]
 800a080:	7019      	strb	r1, [r3, #0]
 800a082:	4608      	mov	r0, r1
 800a084:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <__sfputs_r>:
 800a08a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a08c:	4606      	mov	r6, r0
 800a08e:	460f      	mov	r7, r1
 800a090:	4614      	mov	r4, r2
 800a092:	18d5      	adds	r5, r2, r3
 800a094:	42ac      	cmp	r4, r5
 800a096:	d101      	bne.n	800a09c <__sfputs_r+0x12>
 800a098:	2000      	movs	r0, #0
 800a09a:	e007      	b.n	800a0ac <__sfputs_r+0x22>
 800a09c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0a0:	463a      	mov	r2, r7
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	f7ff ffda 	bl	800a05c <__sfputc_r>
 800a0a8:	1c43      	adds	r3, r0, #1
 800a0aa:	d1f3      	bne.n	800a094 <__sfputs_r+0xa>
 800a0ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a0b0 <_vfiprintf_r>:
 800a0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b4:	460d      	mov	r5, r1
 800a0b6:	b09d      	sub	sp, #116	; 0x74
 800a0b8:	4614      	mov	r4, r2
 800a0ba:	4698      	mov	r8, r3
 800a0bc:	4606      	mov	r6, r0
 800a0be:	b118      	cbz	r0, 800a0c8 <_vfiprintf_r+0x18>
 800a0c0:	6983      	ldr	r3, [r0, #24]
 800a0c2:	b90b      	cbnz	r3, 800a0c8 <_vfiprintf_r+0x18>
 800a0c4:	f000 fb06 	bl	800a6d4 <__sinit>
 800a0c8:	4b89      	ldr	r3, [pc, #548]	; (800a2f0 <_vfiprintf_r+0x240>)
 800a0ca:	429d      	cmp	r5, r3
 800a0cc:	d11b      	bne.n	800a106 <_vfiprintf_r+0x56>
 800a0ce:	6875      	ldr	r5, [r6, #4]
 800a0d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0d2:	07d9      	lsls	r1, r3, #31
 800a0d4:	d405      	bmi.n	800a0e2 <_vfiprintf_r+0x32>
 800a0d6:	89ab      	ldrh	r3, [r5, #12]
 800a0d8:	059a      	lsls	r2, r3, #22
 800a0da:	d402      	bmi.n	800a0e2 <_vfiprintf_r+0x32>
 800a0dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0de:	f7ff ff72 	bl	8009fc6 <__retarget_lock_acquire_recursive>
 800a0e2:	89ab      	ldrh	r3, [r5, #12]
 800a0e4:	071b      	lsls	r3, r3, #28
 800a0e6:	d501      	bpl.n	800a0ec <_vfiprintf_r+0x3c>
 800a0e8:	692b      	ldr	r3, [r5, #16]
 800a0ea:	b9eb      	cbnz	r3, 800a128 <_vfiprintf_r+0x78>
 800a0ec:	4629      	mov	r1, r5
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	f000 f960 	bl	800a3b4 <__swsetup_r>
 800a0f4:	b1c0      	cbz	r0, 800a128 <_vfiprintf_r+0x78>
 800a0f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0f8:	07dc      	lsls	r4, r3, #31
 800a0fa:	d50e      	bpl.n	800a11a <_vfiprintf_r+0x6a>
 800a0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a100:	b01d      	add	sp, #116	; 0x74
 800a102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a106:	4b7b      	ldr	r3, [pc, #492]	; (800a2f4 <_vfiprintf_r+0x244>)
 800a108:	429d      	cmp	r5, r3
 800a10a:	d101      	bne.n	800a110 <_vfiprintf_r+0x60>
 800a10c:	68b5      	ldr	r5, [r6, #8]
 800a10e:	e7df      	b.n	800a0d0 <_vfiprintf_r+0x20>
 800a110:	4b79      	ldr	r3, [pc, #484]	; (800a2f8 <_vfiprintf_r+0x248>)
 800a112:	429d      	cmp	r5, r3
 800a114:	bf08      	it	eq
 800a116:	68f5      	ldreq	r5, [r6, #12]
 800a118:	e7da      	b.n	800a0d0 <_vfiprintf_r+0x20>
 800a11a:	89ab      	ldrh	r3, [r5, #12]
 800a11c:	0598      	lsls	r0, r3, #22
 800a11e:	d4ed      	bmi.n	800a0fc <_vfiprintf_r+0x4c>
 800a120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a122:	f7ff ff51 	bl	8009fc8 <__retarget_lock_release_recursive>
 800a126:	e7e9      	b.n	800a0fc <_vfiprintf_r+0x4c>
 800a128:	2300      	movs	r3, #0
 800a12a:	9309      	str	r3, [sp, #36]	; 0x24
 800a12c:	2320      	movs	r3, #32
 800a12e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a132:	f8cd 800c 	str.w	r8, [sp, #12]
 800a136:	2330      	movs	r3, #48	; 0x30
 800a138:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a2fc <_vfiprintf_r+0x24c>
 800a13c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a140:	f04f 0901 	mov.w	r9, #1
 800a144:	4623      	mov	r3, r4
 800a146:	469a      	mov	sl, r3
 800a148:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a14c:	b10a      	cbz	r2, 800a152 <_vfiprintf_r+0xa2>
 800a14e:	2a25      	cmp	r2, #37	; 0x25
 800a150:	d1f9      	bne.n	800a146 <_vfiprintf_r+0x96>
 800a152:	ebba 0b04 	subs.w	fp, sl, r4
 800a156:	d00b      	beq.n	800a170 <_vfiprintf_r+0xc0>
 800a158:	465b      	mov	r3, fp
 800a15a:	4622      	mov	r2, r4
 800a15c:	4629      	mov	r1, r5
 800a15e:	4630      	mov	r0, r6
 800a160:	f7ff ff93 	bl	800a08a <__sfputs_r>
 800a164:	3001      	adds	r0, #1
 800a166:	f000 80aa 	beq.w	800a2be <_vfiprintf_r+0x20e>
 800a16a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a16c:	445a      	add	r2, fp
 800a16e:	9209      	str	r2, [sp, #36]	; 0x24
 800a170:	f89a 3000 	ldrb.w	r3, [sl]
 800a174:	2b00      	cmp	r3, #0
 800a176:	f000 80a2 	beq.w	800a2be <_vfiprintf_r+0x20e>
 800a17a:	2300      	movs	r3, #0
 800a17c:	f04f 32ff 	mov.w	r2, #4294967295
 800a180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a184:	f10a 0a01 	add.w	sl, sl, #1
 800a188:	9304      	str	r3, [sp, #16]
 800a18a:	9307      	str	r3, [sp, #28]
 800a18c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a190:	931a      	str	r3, [sp, #104]	; 0x68
 800a192:	4654      	mov	r4, sl
 800a194:	2205      	movs	r2, #5
 800a196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a19a:	4858      	ldr	r0, [pc, #352]	; (800a2fc <_vfiprintf_r+0x24c>)
 800a19c:	f7f6 f820 	bl	80001e0 <memchr>
 800a1a0:	9a04      	ldr	r2, [sp, #16]
 800a1a2:	b9d8      	cbnz	r0, 800a1dc <_vfiprintf_r+0x12c>
 800a1a4:	06d1      	lsls	r1, r2, #27
 800a1a6:	bf44      	itt	mi
 800a1a8:	2320      	movmi	r3, #32
 800a1aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1ae:	0713      	lsls	r3, r2, #28
 800a1b0:	bf44      	itt	mi
 800a1b2:	232b      	movmi	r3, #43	; 0x2b
 800a1b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a1bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a1be:	d015      	beq.n	800a1ec <_vfiprintf_r+0x13c>
 800a1c0:	9a07      	ldr	r2, [sp, #28]
 800a1c2:	4654      	mov	r4, sl
 800a1c4:	2000      	movs	r0, #0
 800a1c6:	f04f 0c0a 	mov.w	ip, #10
 800a1ca:	4621      	mov	r1, r4
 800a1cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1d0:	3b30      	subs	r3, #48	; 0x30
 800a1d2:	2b09      	cmp	r3, #9
 800a1d4:	d94e      	bls.n	800a274 <_vfiprintf_r+0x1c4>
 800a1d6:	b1b0      	cbz	r0, 800a206 <_vfiprintf_r+0x156>
 800a1d8:	9207      	str	r2, [sp, #28]
 800a1da:	e014      	b.n	800a206 <_vfiprintf_r+0x156>
 800a1dc:	eba0 0308 	sub.w	r3, r0, r8
 800a1e0:	fa09 f303 	lsl.w	r3, r9, r3
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	9304      	str	r3, [sp, #16]
 800a1e8:	46a2      	mov	sl, r4
 800a1ea:	e7d2      	b.n	800a192 <_vfiprintf_r+0xe2>
 800a1ec:	9b03      	ldr	r3, [sp, #12]
 800a1ee:	1d19      	adds	r1, r3, #4
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	9103      	str	r1, [sp, #12]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	bfbb      	ittet	lt
 800a1f8:	425b      	neglt	r3, r3
 800a1fa:	f042 0202 	orrlt.w	r2, r2, #2
 800a1fe:	9307      	strge	r3, [sp, #28]
 800a200:	9307      	strlt	r3, [sp, #28]
 800a202:	bfb8      	it	lt
 800a204:	9204      	strlt	r2, [sp, #16]
 800a206:	7823      	ldrb	r3, [r4, #0]
 800a208:	2b2e      	cmp	r3, #46	; 0x2e
 800a20a:	d10c      	bne.n	800a226 <_vfiprintf_r+0x176>
 800a20c:	7863      	ldrb	r3, [r4, #1]
 800a20e:	2b2a      	cmp	r3, #42	; 0x2a
 800a210:	d135      	bne.n	800a27e <_vfiprintf_r+0x1ce>
 800a212:	9b03      	ldr	r3, [sp, #12]
 800a214:	1d1a      	adds	r2, r3, #4
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	9203      	str	r2, [sp, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	bfb8      	it	lt
 800a21e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a222:	3402      	adds	r4, #2
 800a224:	9305      	str	r3, [sp, #20]
 800a226:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a30c <_vfiprintf_r+0x25c>
 800a22a:	7821      	ldrb	r1, [r4, #0]
 800a22c:	2203      	movs	r2, #3
 800a22e:	4650      	mov	r0, sl
 800a230:	f7f5 ffd6 	bl	80001e0 <memchr>
 800a234:	b140      	cbz	r0, 800a248 <_vfiprintf_r+0x198>
 800a236:	2340      	movs	r3, #64	; 0x40
 800a238:	eba0 000a 	sub.w	r0, r0, sl
 800a23c:	fa03 f000 	lsl.w	r0, r3, r0
 800a240:	9b04      	ldr	r3, [sp, #16]
 800a242:	4303      	orrs	r3, r0
 800a244:	3401      	adds	r4, #1
 800a246:	9304      	str	r3, [sp, #16]
 800a248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a24c:	482c      	ldr	r0, [pc, #176]	; (800a300 <_vfiprintf_r+0x250>)
 800a24e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a252:	2206      	movs	r2, #6
 800a254:	f7f5 ffc4 	bl	80001e0 <memchr>
 800a258:	2800      	cmp	r0, #0
 800a25a:	d03f      	beq.n	800a2dc <_vfiprintf_r+0x22c>
 800a25c:	4b29      	ldr	r3, [pc, #164]	; (800a304 <_vfiprintf_r+0x254>)
 800a25e:	bb1b      	cbnz	r3, 800a2a8 <_vfiprintf_r+0x1f8>
 800a260:	9b03      	ldr	r3, [sp, #12]
 800a262:	3307      	adds	r3, #7
 800a264:	f023 0307 	bic.w	r3, r3, #7
 800a268:	3308      	adds	r3, #8
 800a26a:	9303      	str	r3, [sp, #12]
 800a26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a26e:	443b      	add	r3, r7
 800a270:	9309      	str	r3, [sp, #36]	; 0x24
 800a272:	e767      	b.n	800a144 <_vfiprintf_r+0x94>
 800a274:	fb0c 3202 	mla	r2, ip, r2, r3
 800a278:	460c      	mov	r4, r1
 800a27a:	2001      	movs	r0, #1
 800a27c:	e7a5      	b.n	800a1ca <_vfiprintf_r+0x11a>
 800a27e:	2300      	movs	r3, #0
 800a280:	3401      	adds	r4, #1
 800a282:	9305      	str	r3, [sp, #20]
 800a284:	4619      	mov	r1, r3
 800a286:	f04f 0c0a 	mov.w	ip, #10
 800a28a:	4620      	mov	r0, r4
 800a28c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a290:	3a30      	subs	r2, #48	; 0x30
 800a292:	2a09      	cmp	r2, #9
 800a294:	d903      	bls.n	800a29e <_vfiprintf_r+0x1ee>
 800a296:	2b00      	cmp	r3, #0
 800a298:	d0c5      	beq.n	800a226 <_vfiprintf_r+0x176>
 800a29a:	9105      	str	r1, [sp, #20]
 800a29c:	e7c3      	b.n	800a226 <_vfiprintf_r+0x176>
 800a29e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	e7f0      	b.n	800a28a <_vfiprintf_r+0x1da>
 800a2a8:	ab03      	add	r3, sp, #12
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	462a      	mov	r2, r5
 800a2ae:	4b16      	ldr	r3, [pc, #88]	; (800a308 <_vfiprintf_r+0x258>)
 800a2b0:	a904      	add	r1, sp, #16
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	f7fc f904 	bl	80064c0 <_printf_float>
 800a2b8:	4607      	mov	r7, r0
 800a2ba:	1c78      	adds	r0, r7, #1
 800a2bc:	d1d6      	bne.n	800a26c <_vfiprintf_r+0x1bc>
 800a2be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2c0:	07d9      	lsls	r1, r3, #31
 800a2c2:	d405      	bmi.n	800a2d0 <_vfiprintf_r+0x220>
 800a2c4:	89ab      	ldrh	r3, [r5, #12]
 800a2c6:	059a      	lsls	r2, r3, #22
 800a2c8:	d402      	bmi.n	800a2d0 <_vfiprintf_r+0x220>
 800a2ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2cc:	f7ff fe7c 	bl	8009fc8 <__retarget_lock_release_recursive>
 800a2d0:	89ab      	ldrh	r3, [r5, #12]
 800a2d2:	065b      	lsls	r3, r3, #25
 800a2d4:	f53f af12 	bmi.w	800a0fc <_vfiprintf_r+0x4c>
 800a2d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2da:	e711      	b.n	800a100 <_vfiprintf_r+0x50>
 800a2dc:	ab03      	add	r3, sp, #12
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	462a      	mov	r2, r5
 800a2e2:	4b09      	ldr	r3, [pc, #36]	; (800a308 <_vfiprintf_r+0x258>)
 800a2e4:	a904      	add	r1, sp, #16
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	f7fc fb8e 	bl	8006a08 <_printf_i>
 800a2ec:	e7e4      	b.n	800a2b8 <_vfiprintf_r+0x208>
 800a2ee:	bf00      	nop
 800a2f0:	0800b0ac 	.word	0x0800b0ac
 800a2f4:	0800b0cc 	.word	0x0800b0cc
 800a2f8:	0800b08c 	.word	0x0800b08c
 800a2fc:	0800b03c 	.word	0x0800b03c
 800a300:	0800b046 	.word	0x0800b046
 800a304:	080064c1 	.word	0x080064c1
 800a308:	0800a08b 	.word	0x0800a08b
 800a30c:	0800b042 	.word	0x0800b042

0800a310 <__swbuf_r>:
 800a310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a312:	460e      	mov	r6, r1
 800a314:	4614      	mov	r4, r2
 800a316:	4605      	mov	r5, r0
 800a318:	b118      	cbz	r0, 800a322 <__swbuf_r+0x12>
 800a31a:	6983      	ldr	r3, [r0, #24]
 800a31c:	b90b      	cbnz	r3, 800a322 <__swbuf_r+0x12>
 800a31e:	f000 f9d9 	bl	800a6d4 <__sinit>
 800a322:	4b21      	ldr	r3, [pc, #132]	; (800a3a8 <__swbuf_r+0x98>)
 800a324:	429c      	cmp	r4, r3
 800a326:	d12b      	bne.n	800a380 <__swbuf_r+0x70>
 800a328:	686c      	ldr	r4, [r5, #4]
 800a32a:	69a3      	ldr	r3, [r4, #24]
 800a32c:	60a3      	str	r3, [r4, #8]
 800a32e:	89a3      	ldrh	r3, [r4, #12]
 800a330:	071a      	lsls	r2, r3, #28
 800a332:	d52f      	bpl.n	800a394 <__swbuf_r+0x84>
 800a334:	6923      	ldr	r3, [r4, #16]
 800a336:	b36b      	cbz	r3, 800a394 <__swbuf_r+0x84>
 800a338:	6923      	ldr	r3, [r4, #16]
 800a33a:	6820      	ldr	r0, [r4, #0]
 800a33c:	1ac0      	subs	r0, r0, r3
 800a33e:	6963      	ldr	r3, [r4, #20]
 800a340:	b2f6      	uxtb	r6, r6
 800a342:	4283      	cmp	r3, r0
 800a344:	4637      	mov	r7, r6
 800a346:	dc04      	bgt.n	800a352 <__swbuf_r+0x42>
 800a348:	4621      	mov	r1, r4
 800a34a:	4628      	mov	r0, r5
 800a34c:	f000 f92e 	bl	800a5ac <_fflush_r>
 800a350:	bb30      	cbnz	r0, 800a3a0 <__swbuf_r+0x90>
 800a352:	68a3      	ldr	r3, [r4, #8]
 800a354:	3b01      	subs	r3, #1
 800a356:	60a3      	str	r3, [r4, #8]
 800a358:	6823      	ldr	r3, [r4, #0]
 800a35a:	1c5a      	adds	r2, r3, #1
 800a35c:	6022      	str	r2, [r4, #0]
 800a35e:	701e      	strb	r6, [r3, #0]
 800a360:	6963      	ldr	r3, [r4, #20]
 800a362:	3001      	adds	r0, #1
 800a364:	4283      	cmp	r3, r0
 800a366:	d004      	beq.n	800a372 <__swbuf_r+0x62>
 800a368:	89a3      	ldrh	r3, [r4, #12]
 800a36a:	07db      	lsls	r3, r3, #31
 800a36c:	d506      	bpl.n	800a37c <__swbuf_r+0x6c>
 800a36e:	2e0a      	cmp	r6, #10
 800a370:	d104      	bne.n	800a37c <__swbuf_r+0x6c>
 800a372:	4621      	mov	r1, r4
 800a374:	4628      	mov	r0, r5
 800a376:	f000 f919 	bl	800a5ac <_fflush_r>
 800a37a:	b988      	cbnz	r0, 800a3a0 <__swbuf_r+0x90>
 800a37c:	4638      	mov	r0, r7
 800a37e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a380:	4b0a      	ldr	r3, [pc, #40]	; (800a3ac <__swbuf_r+0x9c>)
 800a382:	429c      	cmp	r4, r3
 800a384:	d101      	bne.n	800a38a <__swbuf_r+0x7a>
 800a386:	68ac      	ldr	r4, [r5, #8]
 800a388:	e7cf      	b.n	800a32a <__swbuf_r+0x1a>
 800a38a:	4b09      	ldr	r3, [pc, #36]	; (800a3b0 <__swbuf_r+0xa0>)
 800a38c:	429c      	cmp	r4, r3
 800a38e:	bf08      	it	eq
 800a390:	68ec      	ldreq	r4, [r5, #12]
 800a392:	e7ca      	b.n	800a32a <__swbuf_r+0x1a>
 800a394:	4621      	mov	r1, r4
 800a396:	4628      	mov	r0, r5
 800a398:	f000 f80c 	bl	800a3b4 <__swsetup_r>
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d0cb      	beq.n	800a338 <__swbuf_r+0x28>
 800a3a0:	f04f 37ff 	mov.w	r7, #4294967295
 800a3a4:	e7ea      	b.n	800a37c <__swbuf_r+0x6c>
 800a3a6:	bf00      	nop
 800a3a8:	0800b0ac 	.word	0x0800b0ac
 800a3ac:	0800b0cc 	.word	0x0800b0cc
 800a3b0:	0800b08c 	.word	0x0800b08c

0800a3b4 <__swsetup_r>:
 800a3b4:	4b32      	ldr	r3, [pc, #200]	; (800a480 <__swsetup_r+0xcc>)
 800a3b6:	b570      	push	{r4, r5, r6, lr}
 800a3b8:	681d      	ldr	r5, [r3, #0]
 800a3ba:	4606      	mov	r6, r0
 800a3bc:	460c      	mov	r4, r1
 800a3be:	b125      	cbz	r5, 800a3ca <__swsetup_r+0x16>
 800a3c0:	69ab      	ldr	r3, [r5, #24]
 800a3c2:	b913      	cbnz	r3, 800a3ca <__swsetup_r+0x16>
 800a3c4:	4628      	mov	r0, r5
 800a3c6:	f000 f985 	bl	800a6d4 <__sinit>
 800a3ca:	4b2e      	ldr	r3, [pc, #184]	; (800a484 <__swsetup_r+0xd0>)
 800a3cc:	429c      	cmp	r4, r3
 800a3ce:	d10f      	bne.n	800a3f0 <__swsetup_r+0x3c>
 800a3d0:	686c      	ldr	r4, [r5, #4]
 800a3d2:	89a3      	ldrh	r3, [r4, #12]
 800a3d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3d8:	0719      	lsls	r1, r3, #28
 800a3da:	d42c      	bmi.n	800a436 <__swsetup_r+0x82>
 800a3dc:	06dd      	lsls	r5, r3, #27
 800a3de:	d411      	bmi.n	800a404 <__swsetup_r+0x50>
 800a3e0:	2309      	movs	r3, #9
 800a3e2:	6033      	str	r3, [r6, #0]
 800a3e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3e8:	81a3      	strh	r3, [r4, #12]
 800a3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ee:	e03e      	b.n	800a46e <__swsetup_r+0xba>
 800a3f0:	4b25      	ldr	r3, [pc, #148]	; (800a488 <__swsetup_r+0xd4>)
 800a3f2:	429c      	cmp	r4, r3
 800a3f4:	d101      	bne.n	800a3fa <__swsetup_r+0x46>
 800a3f6:	68ac      	ldr	r4, [r5, #8]
 800a3f8:	e7eb      	b.n	800a3d2 <__swsetup_r+0x1e>
 800a3fa:	4b24      	ldr	r3, [pc, #144]	; (800a48c <__swsetup_r+0xd8>)
 800a3fc:	429c      	cmp	r4, r3
 800a3fe:	bf08      	it	eq
 800a400:	68ec      	ldreq	r4, [r5, #12]
 800a402:	e7e6      	b.n	800a3d2 <__swsetup_r+0x1e>
 800a404:	0758      	lsls	r0, r3, #29
 800a406:	d512      	bpl.n	800a42e <__swsetup_r+0x7a>
 800a408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a40a:	b141      	cbz	r1, 800a41e <__swsetup_r+0x6a>
 800a40c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a410:	4299      	cmp	r1, r3
 800a412:	d002      	beq.n	800a41a <__swsetup_r+0x66>
 800a414:	4630      	mov	r0, r6
 800a416:	f7fb fed3 	bl	80061c0 <_free_r>
 800a41a:	2300      	movs	r3, #0
 800a41c:	6363      	str	r3, [r4, #52]	; 0x34
 800a41e:	89a3      	ldrh	r3, [r4, #12]
 800a420:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a424:	81a3      	strh	r3, [r4, #12]
 800a426:	2300      	movs	r3, #0
 800a428:	6063      	str	r3, [r4, #4]
 800a42a:	6923      	ldr	r3, [r4, #16]
 800a42c:	6023      	str	r3, [r4, #0]
 800a42e:	89a3      	ldrh	r3, [r4, #12]
 800a430:	f043 0308 	orr.w	r3, r3, #8
 800a434:	81a3      	strh	r3, [r4, #12]
 800a436:	6923      	ldr	r3, [r4, #16]
 800a438:	b94b      	cbnz	r3, 800a44e <__swsetup_r+0x9a>
 800a43a:	89a3      	ldrh	r3, [r4, #12]
 800a43c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a444:	d003      	beq.n	800a44e <__swsetup_r+0x9a>
 800a446:	4621      	mov	r1, r4
 800a448:	4630      	mov	r0, r6
 800a44a:	f000 fa05 	bl	800a858 <__smakebuf_r>
 800a44e:	89a0      	ldrh	r0, [r4, #12]
 800a450:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a454:	f010 0301 	ands.w	r3, r0, #1
 800a458:	d00a      	beq.n	800a470 <__swsetup_r+0xbc>
 800a45a:	2300      	movs	r3, #0
 800a45c:	60a3      	str	r3, [r4, #8]
 800a45e:	6963      	ldr	r3, [r4, #20]
 800a460:	425b      	negs	r3, r3
 800a462:	61a3      	str	r3, [r4, #24]
 800a464:	6923      	ldr	r3, [r4, #16]
 800a466:	b943      	cbnz	r3, 800a47a <__swsetup_r+0xc6>
 800a468:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a46c:	d1ba      	bne.n	800a3e4 <__swsetup_r+0x30>
 800a46e:	bd70      	pop	{r4, r5, r6, pc}
 800a470:	0781      	lsls	r1, r0, #30
 800a472:	bf58      	it	pl
 800a474:	6963      	ldrpl	r3, [r4, #20]
 800a476:	60a3      	str	r3, [r4, #8]
 800a478:	e7f4      	b.n	800a464 <__swsetup_r+0xb0>
 800a47a:	2000      	movs	r0, #0
 800a47c:	e7f7      	b.n	800a46e <__swsetup_r+0xba>
 800a47e:	bf00      	nop
 800a480:	20000010 	.word	0x20000010
 800a484:	0800b0ac 	.word	0x0800b0ac
 800a488:	0800b0cc 	.word	0x0800b0cc
 800a48c:	0800b08c 	.word	0x0800b08c

0800a490 <abort>:
 800a490:	b508      	push	{r3, lr}
 800a492:	2006      	movs	r0, #6
 800a494:	f000 fa50 	bl	800a938 <raise>
 800a498:	2001      	movs	r0, #1
 800a49a:	f7f7 fbb7 	bl	8001c0c <_exit>
	...

0800a4a0 <__sflush_r>:
 800a4a0:	898a      	ldrh	r2, [r1, #12]
 800a4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a6:	4605      	mov	r5, r0
 800a4a8:	0710      	lsls	r0, r2, #28
 800a4aa:	460c      	mov	r4, r1
 800a4ac:	d458      	bmi.n	800a560 <__sflush_r+0xc0>
 800a4ae:	684b      	ldr	r3, [r1, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	dc05      	bgt.n	800a4c0 <__sflush_r+0x20>
 800a4b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	dc02      	bgt.n	800a4c0 <__sflush_r+0x20>
 800a4ba:	2000      	movs	r0, #0
 800a4bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4c2:	2e00      	cmp	r6, #0
 800a4c4:	d0f9      	beq.n	800a4ba <__sflush_r+0x1a>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4cc:	682f      	ldr	r7, [r5, #0]
 800a4ce:	602b      	str	r3, [r5, #0]
 800a4d0:	d032      	beq.n	800a538 <__sflush_r+0x98>
 800a4d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4d4:	89a3      	ldrh	r3, [r4, #12]
 800a4d6:	075a      	lsls	r2, r3, #29
 800a4d8:	d505      	bpl.n	800a4e6 <__sflush_r+0x46>
 800a4da:	6863      	ldr	r3, [r4, #4]
 800a4dc:	1ac0      	subs	r0, r0, r3
 800a4de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4e0:	b10b      	cbz	r3, 800a4e6 <__sflush_r+0x46>
 800a4e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4e4:	1ac0      	subs	r0, r0, r3
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4ec:	6a21      	ldr	r1, [r4, #32]
 800a4ee:	4628      	mov	r0, r5
 800a4f0:	47b0      	blx	r6
 800a4f2:	1c43      	adds	r3, r0, #1
 800a4f4:	89a3      	ldrh	r3, [r4, #12]
 800a4f6:	d106      	bne.n	800a506 <__sflush_r+0x66>
 800a4f8:	6829      	ldr	r1, [r5, #0]
 800a4fa:	291d      	cmp	r1, #29
 800a4fc:	d82c      	bhi.n	800a558 <__sflush_r+0xb8>
 800a4fe:	4a2a      	ldr	r2, [pc, #168]	; (800a5a8 <__sflush_r+0x108>)
 800a500:	40ca      	lsrs	r2, r1
 800a502:	07d6      	lsls	r6, r2, #31
 800a504:	d528      	bpl.n	800a558 <__sflush_r+0xb8>
 800a506:	2200      	movs	r2, #0
 800a508:	6062      	str	r2, [r4, #4]
 800a50a:	04d9      	lsls	r1, r3, #19
 800a50c:	6922      	ldr	r2, [r4, #16]
 800a50e:	6022      	str	r2, [r4, #0]
 800a510:	d504      	bpl.n	800a51c <__sflush_r+0x7c>
 800a512:	1c42      	adds	r2, r0, #1
 800a514:	d101      	bne.n	800a51a <__sflush_r+0x7a>
 800a516:	682b      	ldr	r3, [r5, #0]
 800a518:	b903      	cbnz	r3, 800a51c <__sflush_r+0x7c>
 800a51a:	6560      	str	r0, [r4, #84]	; 0x54
 800a51c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a51e:	602f      	str	r7, [r5, #0]
 800a520:	2900      	cmp	r1, #0
 800a522:	d0ca      	beq.n	800a4ba <__sflush_r+0x1a>
 800a524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a528:	4299      	cmp	r1, r3
 800a52a:	d002      	beq.n	800a532 <__sflush_r+0x92>
 800a52c:	4628      	mov	r0, r5
 800a52e:	f7fb fe47 	bl	80061c0 <_free_r>
 800a532:	2000      	movs	r0, #0
 800a534:	6360      	str	r0, [r4, #52]	; 0x34
 800a536:	e7c1      	b.n	800a4bc <__sflush_r+0x1c>
 800a538:	6a21      	ldr	r1, [r4, #32]
 800a53a:	2301      	movs	r3, #1
 800a53c:	4628      	mov	r0, r5
 800a53e:	47b0      	blx	r6
 800a540:	1c41      	adds	r1, r0, #1
 800a542:	d1c7      	bne.n	800a4d4 <__sflush_r+0x34>
 800a544:	682b      	ldr	r3, [r5, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d0c4      	beq.n	800a4d4 <__sflush_r+0x34>
 800a54a:	2b1d      	cmp	r3, #29
 800a54c:	d001      	beq.n	800a552 <__sflush_r+0xb2>
 800a54e:	2b16      	cmp	r3, #22
 800a550:	d101      	bne.n	800a556 <__sflush_r+0xb6>
 800a552:	602f      	str	r7, [r5, #0]
 800a554:	e7b1      	b.n	800a4ba <__sflush_r+0x1a>
 800a556:	89a3      	ldrh	r3, [r4, #12]
 800a558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a55c:	81a3      	strh	r3, [r4, #12]
 800a55e:	e7ad      	b.n	800a4bc <__sflush_r+0x1c>
 800a560:	690f      	ldr	r7, [r1, #16]
 800a562:	2f00      	cmp	r7, #0
 800a564:	d0a9      	beq.n	800a4ba <__sflush_r+0x1a>
 800a566:	0793      	lsls	r3, r2, #30
 800a568:	680e      	ldr	r6, [r1, #0]
 800a56a:	bf08      	it	eq
 800a56c:	694b      	ldreq	r3, [r1, #20]
 800a56e:	600f      	str	r7, [r1, #0]
 800a570:	bf18      	it	ne
 800a572:	2300      	movne	r3, #0
 800a574:	eba6 0807 	sub.w	r8, r6, r7
 800a578:	608b      	str	r3, [r1, #8]
 800a57a:	f1b8 0f00 	cmp.w	r8, #0
 800a57e:	dd9c      	ble.n	800a4ba <__sflush_r+0x1a>
 800a580:	6a21      	ldr	r1, [r4, #32]
 800a582:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a584:	4643      	mov	r3, r8
 800a586:	463a      	mov	r2, r7
 800a588:	4628      	mov	r0, r5
 800a58a:	47b0      	blx	r6
 800a58c:	2800      	cmp	r0, #0
 800a58e:	dc06      	bgt.n	800a59e <__sflush_r+0xfe>
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a596:	81a3      	strh	r3, [r4, #12]
 800a598:	f04f 30ff 	mov.w	r0, #4294967295
 800a59c:	e78e      	b.n	800a4bc <__sflush_r+0x1c>
 800a59e:	4407      	add	r7, r0
 800a5a0:	eba8 0800 	sub.w	r8, r8, r0
 800a5a4:	e7e9      	b.n	800a57a <__sflush_r+0xda>
 800a5a6:	bf00      	nop
 800a5a8:	20400001 	.word	0x20400001

0800a5ac <_fflush_r>:
 800a5ac:	b538      	push	{r3, r4, r5, lr}
 800a5ae:	690b      	ldr	r3, [r1, #16]
 800a5b0:	4605      	mov	r5, r0
 800a5b2:	460c      	mov	r4, r1
 800a5b4:	b913      	cbnz	r3, 800a5bc <_fflush_r+0x10>
 800a5b6:	2500      	movs	r5, #0
 800a5b8:	4628      	mov	r0, r5
 800a5ba:	bd38      	pop	{r3, r4, r5, pc}
 800a5bc:	b118      	cbz	r0, 800a5c6 <_fflush_r+0x1a>
 800a5be:	6983      	ldr	r3, [r0, #24]
 800a5c0:	b90b      	cbnz	r3, 800a5c6 <_fflush_r+0x1a>
 800a5c2:	f000 f887 	bl	800a6d4 <__sinit>
 800a5c6:	4b14      	ldr	r3, [pc, #80]	; (800a618 <_fflush_r+0x6c>)
 800a5c8:	429c      	cmp	r4, r3
 800a5ca:	d11b      	bne.n	800a604 <_fflush_r+0x58>
 800a5cc:	686c      	ldr	r4, [r5, #4]
 800a5ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d0ef      	beq.n	800a5b6 <_fflush_r+0xa>
 800a5d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5d8:	07d0      	lsls	r0, r2, #31
 800a5da:	d404      	bmi.n	800a5e6 <_fflush_r+0x3a>
 800a5dc:	0599      	lsls	r1, r3, #22
 800a5de:	d402      	bmi.n	800a5e6 <_fflush_r+0x3a>
 800a5e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5e2:	f7ff fcf0 	bl	8009fc6 <__retarget_lock_acquire_recursive>
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	f7ff ff59 	bl	800a4a0 <__sflush_r>
 800a5ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5f0:	07da      	lsls	r2, r3, #31
 800a5f2:	4605      	mov	r5, r0
 800a5f4:	d4e0      	bmi.n	800a5b8 <_fflush_r+0xc>
 800a5f6:	89a3      	ldrh	r3, [r4, #12]
 800a5f8:	059b      	lsls	r3, r3, #22
 800a5fa:	d4dd      	bmi.n	800a5b8 <_fflush_r+0xc>
 800a5fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5fe:	f7ff fce3 	bl	8009fc8 <__retarget_lock_release_recursive>
 800a602:	e7d9      	b.n	800a5b8 <_fflush_r+0xc>
 800a604:	4b05      	ldr	r3, [pc, #20]	; (800a61c <_fflush_r+0x70>)
 800a606:	429c      	cmp	r4, r3
 800a608:	d101      	bne.n	800a60e <_fflush_r+0x62>
 800a60a:	68ac      	ldr	r4, [r5, #8]
 800a60c:	e7df      	b.n	800a5ce <_fflush_r+0x22>
 800a60e:	4b04      	ldr	r3, [pc, #16]	; (800a620 <_fflush_r+0x74>)
 800a610:	429c      	cmp	r4, r3
 800a612:	bf08      	it	eq
 800a614:	68ec      	ldreq	r4, [r5, #12]
 800a616:	e7da      	b.n	800a5ce <_fflush_r+0x22>
 800a618:	0800b0ac 	.word	0x0800b0ac
 800a61c:	0800b0cc 	.word	0x0800b0cc
 800a620:	0800b08c 	.word	0x0800b08c

0800a624 <std>:
 800a624:	2300      	movs	r3, #0
 800a626:	b510      	push	{r4, lr}
 800a628:	4604      	mov	r4, r0
 800a62a:	e9c0 3300 	strd	r3, r3, [r0]
 800a62e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a632:	6083      	str	r3, [r0, #8]
 800a634:	8181      	strh	r1, [r0, #12]
 800a636:	6643      	str	r3, [r0, #100]	; 0x64
 800a638:	81c2      	strh	r2, [r0, #14]
 800a63a:	6183      	str	r3, [r0, #24]
 800a63c:	4619      	mov	r1, r3
 800a63e:	2208      	movs	r2, #8
 800a640:	305c      	adds	r0, #92	; 0x5c
 800a642:	f7fb fdb5 	bl	80061b0 <memset>
 800a646:	4b05      	ldr	r3, [pc, #20]	; (800a65c <std+0x38>)
 800a648:	6263      	str	r3, [r4, #36]	; 0x24
 800a64a:	4b05      	ldr	r3, [pc, #20]	; (800a660 <std+0x3c>)
 800a64c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a64e:	4b05      	ldr	r3, [pc, #20]	; (800a664 <std+0x40>)
 800a650:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a652:	4b05      	ldr	r3, [pc, #20]	; (800a668 <std+0x44>)
 800a654:	6224      	str	r4, [r4, #32]
 800a656:	6323      	str	r3, [r4, #48]	; 0x30
 800a658:	bd10      	pop	{r4, pc}
 800a65a:	bf00      	nop
 800a65c:	0800a971 	.word	0x0800a971
 800a660:	0800a993 	.word	0x0800a993
 800a664:	0800a9cb 	.word	0x0800a9cb
 800a668:	0800a9ef 	.word	0x0800a9ef

0800a66c <_cleanup_r>:
 800a66c:	4901      	ldr	r1, [pc, #4]	; (800a674 <_cleanup_r+0x8>)
 800a66e:	f000 b8af 	b.w	800a7d0 <_fwalk_reent>
 800a672:	bf00      	nop
 800a674:	0800a5ad 	.word	0x0800a5ad

0800a678 <__sfmoreglue>:
 800a678:	b570      	push	{r4, r5, r6, lr}
 800a67a:	2268      	movs	r2, #104	; 0x68
 800a67c:	1e4d      	subs	r5, r1, #1
 800a67e:	4355      	muls	r5, r2
 800a680:	460e      	mov	r6, r1
 800a682:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a686:	f7fb fe07 	bl	8006298 <_malloc_r>
 800a68a:	4604      	mov	r4, r0
 800a68c:	b140      	cbz	r0, 800a6a0 <__sfmoreglue+0x28>
 800a68e:	2100      	movs	r1, #0
 800a690:	e9c0 1600 	strd	r1, r6, [r0]
 800a694:	300c      	adds	r0, #12
 800a696:	60a0      	str	r0, [r4, #8]
 800a698:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a69c:	f7fb fd88 	bl	80061b0 <memset>
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	bd70      	pop	{r4, r5, r6, pc}

0800a6a4 <__sfp_lock_acquire>:
 800a6a4:	4801      	ldr	r0, [pc, #4]	; (800a6ac <__sfp_lock_acquire+0x8>)
 800a6a6:	f7ff bc8e 	b.w	8009fc6 <__retarget_lock_acquire_recursive>
 800a6aa:	bf00      	nop
 800a6ac:	20004391 	.word	0x20004391

0800a6b0 <__sfp_lock_release>:
 800a6b0:	4801      	ldr	r0, [pc, #4]	; (800a6b8 <__sfp_lock_release+0x8>)
 800a6b2:	f7ff bc89 	b.w	8009fc8 <__retarget_lock_release_recursive>
 800a6b6:	bf00      	nop
 800a6b8:	20004391 	.word	0x20004391

0800a6bc <__sinit_lock_acquire>:
 800a6bc:	4801      	ldr	r0, [pc, #4]	; (800a6c4 <__sinit_lock_acquire+0x8>)
 800a6be:	f7ff bc82 	b.w	8009fc6 <__retarget_lock_acquire_recursive>
 800a6c2:	bf00      	nop
 800a6c4:	20004392 	.word	0x20004392

0800a6c8 <__sinit_lock_release>:
 800a6c8:	4801      	ldr	r0, [pc, #4]	; (800a6d0 <__sinit_lock_release+0x8>)
 800a6ca:	f7ff bc7d 	b.w	8009fc8 <__retarget_lock_release_recursive>
 800a6ce:	bf00      	nop
 800a6d0:	20004392 	.word	0x20004392

0800a6d4 <__sinit>:
 800a6d4:	b510      	push	{r4, lr}
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	f7ff fff0 	bl	800a6bc <__sinit_lock_acquire>
 800a6dc:	69a3      	ldr	r3, [r4, #24]
 800a6de:	b11b      	cbz	r3, 800a6e8 <__sinit+0x14>
 800a6e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6e4:	f7ff bff0 	b.w	800a6c8 <__sinit_lock_release>
 800a6e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a6ec:	6523      	str	r3, [r4, #80]	; 0x50
 800a6ee:	4b13      	ldr	r3, [pc, #76]	; (800a73c <__sinit+0x68>)
 800a6f0:	4a13      	ldr	r2, [pc, #76]	; (800a740 <__sinit+0x6c>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a6f6:	42a3      	cmp	r3, r4
 800a6f8:	bf04      	itt	eq
 800a6fa:	2301      	moveq	r3, #1
 800a6fc:	61a3      	streq	r3, [r4, #24]
 800a6fe:	4620      	mov	r0, r4
 800a700:	f000 f820 	bl	800a744 <__sfp>
 800a704:	6060      	str	r0, [r4, #4]
 800a706:	4620      	mov	r0, r4
 800a708:	f000 f81c 	bl	800a744 <__sfp>
 800a70c:	60a0      	str	r0, [r4, #8]
 800a70e:	4620      	mov	r0, r4
 800a710:	f000 f818 	bl	800a744 <__sfp>
 800a714:	2200      	movs	r2, #0
 800a716:	60e0      	str	r0, [r4, #12]
 800a718:	2104      	movs	r1, #4
 800a71a:	6860      	ldr	r0, [r4, #4]
 800a71c:	f7ff ff82 	bl	800a624 <std>
 800a720:	68a0      	ldr	r0, [r4, #8]
 800a722:	2201      	movs	r2, #1
 800a724:	2109      	movs	r1, #9
 800a726:	f7ff ff7d 	bl	800a624 <std>
 800a72a:	68e0      	ldr	r0, [r4, #12]
 800a72c:	2202      	movs	r2, #2
 800a72e:	2112      	movs	r1, #18
 800a730:	f7ff ff78 	bl	800a624 <std>
 800a734:	2301      	movs	r3, #1
 800a736:	61a3      	str	r3, [r4, #24]
 800a738:	e7d2      	b.n	800a6e0 <__sinit+0xc>
 800a73a:	bf00      	nop
 800a73c:	0800ac48 	.word	0x0800ac48
 800a740:	0800a66d 	.word	0x0800a66d

0800a744 <__sfp>:
 800a744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a746:	4607      	mov	r7, r0
 800a748:	f7ff ffac 	bl	800a6a4 <__sfp_lock_acquire>
 800a74c:	4b1e      	ldr	r3, [pc, #120]	; (800a7c8 <__sfp+0x84>)
 800a74e:	681e      	ldr	r6, [r3, #0]
 800a750:	69b3      	ldr	r3, [r6, #24]
 800a752:	b913      	cbnz	r3, 800a75a <__sfp+0x16>
 800a754:	4630      	mov	r0, r6
 800a756:	f7ff ffbd 	bl	800a6d4 <__sinit>
 800a75a:	3648      	adds	r6, #72	; 0x48
 800a75c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a760:	3b01      	subs	r3, #1
 800a762:	d503      	bpl.n	800a76c <__sfp+0x28>
 800a764:	6833      	ldr	r3, [r6, #0]
 800a766:	b30b      	cbz	r3, 800a7ac <__sfp+0x68>
 800a768:	6836      	ldr	r6, [r6, #0]
 800a76a:	e7f7      	b.n	800a75c <__sfp+0x18>
 800a76c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a770:	b9d5      	cbnz	r5, 800a7a8 <__sfp+0x64>
 800a772:	4b16      	ldr	r3, [pc, #88]	; (800a7cc <__sfp+0x88>)
 800a774:	60e3      	str	r3, [r4, #12]
 800a776:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a77a:	6665      	str	r5, [r4, #100]	; 0x64
 800a77c:	f7ff fc22 	bl	8009fc4 <__retarget_lock_init_recursive>
 800a780:	f7ff ff96 	bl	800a6b0 <__sfp_lock_release>
 800a784:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a788:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a78c:	6025      	str	r5, [r4, #0]
 800a78e:	61a5      	str	r5, [r4, #24]
 800a790:	2208      	movs	r2, #8
 800a792:	4629      	mov	r1, r5
 800a794:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a798:	f7fb fd0a 	bl	80061b0 <memset>
 800a79c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a7a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7a8:	3468      	adds	r4, #104	; 0x68
 800a7aa:	e7d9      	b.n	800a760 <__sfp+0x1c>
 800a7ac:	2104      	movs	r1, #4
 800a7ae:	4638      	mov	r0, r7
 800a7b0:	f7ff ff62 	bl	800a678 <__sfmoreglue>
 800a7b4:	4604      	mov	r4, r0
 800a7b6:	6030      	str	r0, [r6, #0]
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	d1d5      	bne.n	800a768 <__sfp+0x24>
 800a7bc:	f7ff ff78 	bl	800a6b0 <__sfp_lock_release>
 800a7c0:	230c      	movs	r3, #12
 800a7c2:	603b      	str	r3, [r7, #0]
 800a7c4:	e7ee      	b.n	800a7a4 <__sfp+0x60>
 800a7c6:	bf00      	nop
 800a7c8:	0800ac48 	.word	0x0800ac48
 800a7cc:	ffff0001 	.word	0xffff0001

0800a7d0 <_fwalk_reent>:
 800a7d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7d4:	4606      	mov	r6, r0
 800a7d6:	4688      	mov	r8, r1
 800a7d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a7dc:	2700      	movs	r7, #0
 800a7de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7e2:	f1b9 0901 	subs.w	r9, r9, #1
 800a7e6:	d505      	bpl.n	800a7f4 <_fwalk_reent+0x24>
 800a7e8:	6824      	ldr	r4, [r4, #0]
 800a7ea:	2c00      	cmp	r4, #0
 800a7ec:	d1f7      	bne.n	800a7de <_fwalk_reent+0xe>
 800a7ee:	4638      	mov	r0, r7
 800a7f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7f4:	89ab      	ldrh	r3, [r5, #12]
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d907      	bls.n	800a80a <_fwalk_reent+0x3a>
 800a7fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7fe:	3301      	adds	r3, #1
 800a800:	d003      	beq.n	800a80a <_fwalk_reent+0x3a>
 800a802:	4629      	mov	r1, r5
 800a804:	4630      	mov	r0, r6
 800a806:	47c0      	blx	r8
 800a808:	4307      	orrs	r7, r0
 800a80a:	3568      	adds	r5, #104	; 0x68
 800a80c:	e7e9      	b.n	800a7e2 <_fwalk_reent+0x12>

0800a80e <__swhatbuf_r>:
 800a80e:	b570      	push	{r4, r5, r6, lr}
 800a810:	460e      	mov	r6, r1
 800a812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a816:	2900      	cmp	r1, #0
 800a818:	b096      	sub	sp, #88	; 0x58
 800a81a:	4614      	mov	r4, r2
 800a81c:	461d      	mov	r5, r3
 800a81e:	da08      	bge.n	800a832 <__swhatbuf_r+0x24>
 800a820:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a824:	2200      	movs	r2, #0
 800a826:	602a      	str	r2, [r5, #0]
 800a828:	061a      	lsls	r2, r3, #24
 800a82a:	d410      	bmi.n	800a84e <__swhatbuf_r+0x40>
 800a82c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a830:	e00e      	b.n	800a850 <__swhatbuf_r+0x42>
 800a832:	466a      	mov	r2, sp
 800a834:	f000 f902 	bl	800aa3c <_fstat_r>
 800a838:	2800      	cmp	r0, #0
 800a83a:	dbf1      	blt.n	800a820 <__swhatbuf_r+0x12>
 800a83c:	9a01      	ldr	r2, [sp, #4]
 800a83e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a842:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a846:	425a      	negs	r2, r3
 800a848:	415a      	adcs	r2, r3
 800a84a:	602a      	str	r2, [r5, #0]
 800a84c:	e7ee      	b.n	800a82c <__swhatbuf_r+0x1e>
 800a84e:	2340      	movs	r3, #64	; 0x40
 800a850:	2000      	movs	r0, #0
 800a852:	6023      	str	r3, [r4, #0]
 800a854:	b016      	add	sp, #88	; 0x58
 800a856:	bd70      	pop	{r4, r5, r6, pc}

0800a858 <__smakebuf_r>:
 800a858:	898b      	ldrh	r3, [r1, #12]
 800a85a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a85c:	079d      	lsls	r5, r3, #30
 800a85e:	4606      	mov	r6, r0
 800a860:	460c      	mov	r4, r1
 800a862:	d507      	bpl.n	800a874 <__smakebuf_r+0x1c>
 800a864:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a868:	6023      	str	r3, [r4, #0]
 800a86a:	6123      	str	r3, [r4, #16]
 800a86c:	2301      	movs	r3, #1
 800a86e:	6163      	str	r3, [r4, #20]
 800a870:	b002      	add	sp, #8
 800a872:	bd70      	pop	{r4, r5, r6, pc}
 800a874:	ab01      	add	r3, sp, #4
 800a876:	466a      	mov	r2, sp
 800a878:	f7ff ffc9 	bl	800a80e <__swhatbuf_r>
 800a87c:	9900      	ldr	r1, [sp, #0]
 800a87e:	4605      	mov	r5, r0
 800a880:	4630      	mov	r0, r6
 800a882:	f7fb fd09 	bl	8006298 <_malloc_r>
 800a886:	b948      	cbnz	r0, 800a89c <__smakebuf_r+0x44>
 800a888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a88c:	059a      	lsls	r2, r3, #22
 800a88e:	d4ef      	bmi.n	800a870 <__smakebuf_r+0x18>
 800a890:	f023 0303 	bic.w	r3, r3, #3
 800a894:	f043 0302 	orr.w	r3, r3, #2
 800a898:	81a3      	strh	r3, [r4, #12]
 800a89a:	e7e3      	b.n	800a864 <__smakebuf_r+0xc>
 800a89c:	4b0d      	ldr	r3, [pc, #52]	; (800a8d4 <__smakebuf_r+0x7c>)
 800a89e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a8a0:	89a3      	ldrh	r3, [r4, #12]
 800a8a2:	6020      	str	r0, [r4, #0]
 800a8a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8a8:	81a3      	strh	r3, [r4, #12]
 800a8aa:	9b00      	ldr	r3, [sp, #0]
 800a8ac:	6163      	str	r3, [r4, #20]
 800a8ae:	9b01      	ldr	r3, [sp, #4]
 800a8b0:	6120      	str	r0, [r4, #16]
 800a8b2:	b15b      	cbz	r3, 800a8cc <__smakebuf_r+0x74>
 800a8b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	f000 f8d1 	bl	800aa60 <_isatty_r>
 800a8be:	b128      	cbz	r0, 800a8cc <__smakebuf_r+0x74>
 800a8c0:	89a3      	ldrh	r3, [r4, #12]
 800a8c2:	f023 0303 	bic.w	r3, r3, #3
 800a8c6:	f043 0301 	orr.w	r3, r3, #1
 800a8ca:	81a3      	strh	r3, [r4, #12]
 800a8cc:	89a0      	ldrh	r0, [r4, #12]
 800a8ce:	4305      	orrs	r5, r0
 800a8d0:	81a5      	strh	r5, [r4, #12]
 800a8d2:	e7cd      	b.n	800a870 <__smakebuf_r+0x18>
 800a8d4:	0800a66d 	.word	0x0800a66d

0800a8d8 <_malloc_usable_size_r>:
 800a8d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8dc:	1f18      	subs	r0, r3, #4
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	bfbc      	itt	lt
 800a8e2:	580b      	ldrlt	r3, [r1, r0]
 800a8e4:	18c0      	addlt	r0, r0, r3
 800a8e6:	4770      	bx	lr

0800a8e8 <_raise_r>:
 800a8e8:	291f      	cmp	r1, #31
 800a8ea:	b538      	push	{r3, r4, r5, lr}
 800a8ec:	4604      	mov	r4, r0
 800a8ee:	460d      	mov	r5, r1
 800a8f0:	d904      	bls.n	800a8fc <_raise_r+0x14>
 800a8f2:	2316      	movs	r3, #22
 800a8f4:	6003      	str	r3, [r0, #0]
 800a8f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8fa:	bd38      	pop	{r3, r4, r5, pc}
 800a8fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a8fe:	b112      	cbz	r2, 800a906 <_raise_r+0x1e>
 800a900:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a904:	b94b      	cbnz	r3, 800a91a <_raise_r+0x32>
 800a906:	4620      	mov	r0, r4
 800a908:	f000 f830 	bl	800a96c <_getpid_r>
 800a90c:	462a      	mov	r2, r5
 800a90e:	4601      	mov	r1, r0
 800a910:	4620      	mov	r0, r4
 800a912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a916:	f000 b817 	b.w	800a948 <_kill_r>
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d00a      	beq.n	800a934 <_raise_r+0x4c>
 800a91e:	1c59      	adds	r1, r3, #1
 800a920:	d103      	bne.n	800a92a <_raise_r+0x42>
 800a922:	2316      	movs	r3, #22
 800a924:	6003      	str	r3, [r0, #0]
 800a926:	2001      	movs	r0, #1
 800a928:	e7e7      	b.n	800a8fa <_raise_r+0x12>
 800a92a:	2400      	movs	r4, #0
 800a92c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a930:	4628      	mov	r0, r5
 800a932:	4798      	blx	r3
 800a934:	2000      	movs	r0, #0
 800a936:	e7e0      	b.n	800a8fa <_raise_r+0x12>

0800a938 <raise>:
 800a938:	4b02      	ldr	r3, [pc, #8]	; (800a944 <raise+0xc>)
 800a93a:	4601      	mov	r1, r0
 800a93c:	6818      	ldr	r0, [r3, #0]
 800a93e:	f7ff bfd3 	b.w	800a8e8 <_raise_r>
 800a942:	bf00      	nop
 800a944:	20000010 	.word	0x20000010

0800a948 <_kill_r>:
 800a948:	b538      	push	{r3, r4, r5, lr}
 800a94a:	4d07      	ldr	r5, [pc, #28]	; (800a968 <_kill_r+0x20>)
 800a94c:	2300      	movs	r3, #0
 800a94e:	4604      	mov	r4, r0
 800a950:	4608      	mov	r0, r1
 800a952:	4611      	mov	r1, r2
 800a954:	602b      	str	r3, [r5, #0]
 800a956:	f7f7 f949 	bl	8001bec <_kill>
 800a95a:	1c43      	adds	r3, r0, #1
 800a95c:	d102      	bne.n	800a964 <_kill_r+0x1c>
 800a95e:	682b      	ldr	r3, [r5, #0]
 800a960:	b103      	cbz	r3, 800a964 <_kill_r+0x1c>
 800a962:	6023      	str	r3, [r4, #0]
 800a964:	bd38      	pop	{r3, r4, r5, pc}
 800a966:	bf00      	nop
 800a968:	2000438c 	.word	0x2000438c

0800a96c <_getpid_r>:
 800a96c:	f7f7 b936 	b.w	8001bdc <_getpid>

0800a970 <__sread>:
 800a970:	b510      	push	{r4, lr}
 800a972:	460c      	mov	r4, r1
 800a974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a978:	f000 f894 	bl	800aaa4 <_read_r>
 800a97c:	2800      	cmp	r0, #0
 800a97e:	bfab      	itete	ge
 800a980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a982:	89a3      	ldrhlt	r3, [r4, #12]
 800a984:	181b      	addge	r3, r3, r0
 800a986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a98a:	bfac      	ite	ge
 800a98c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a98e:	81a3      	strhlt	r3, [r4, #12]
 800a990:	bd10      	pop	{r4, pc}

0800a992 <__swrite>:
 800a992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a996:	461f      	mov	r7, r3
 800a998:	898b      	ldrh	r3, [r1, #12]
 800a99a:	05db      	lsls	r3, r3, #23
 800a99c:	4605      	mov	r5, r0
 800a99e:	460c      	mov	r4, r1
 800a9a0:	4616      	mov	r6, r2
 800a9a2:	d505      	bpl.n	800a9b0 <__swrite+0x1e>
 800a9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f000 f868 	bl	800aa80 <_lseek_r>
 800a9b0:	89a3      	ldrh	r3, [r4, #12]
 800a9b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9ba:	81a3      	strh	r3, [r4, #12]
 800a9bc:	4632      	mov	r2, r6
 800a9be:	463b      	mov	r3, r7
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c6:	f000 b817 	b.w	800a9f8 <_write_r>

0800a9ca <__sseek>:
 800a9ca:	b510      	push	{r4, lr}
 800a9cc:	460c      	mov	r4, r1
 800a9ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d2:	f000 f855 	bl	800aa80 <_lseek_r>
 800a9d6:	1c43      	adds	r3, r0, #1
 800a9d8:	89a3      	ldrh	r3, [r4, #12]
 800a9da:	bf15      	itete	ne
 800a9dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9e6:	81a3      	strheq	r3, [r4, #12]
 800a9e8:	bf18      	it	ne
 800a9ea:	81a3      	strhne	r3, [r4, #12]
 800a9ec:	bd10      	pop	{r4, pc}

0800a9ee <__sclose>:
 800a9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f2:	f000 b813 	b.w	800aa1c <_close_r>
	...

0800a9f8 <_write_r>:
 800a9f8:	b538      	push	{r3, r4, r5, lr}
 800a9fa:	4d07      	ldr	r5, [pc, #28]	; (800aa18 <_write_r+0x20>)
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	4608      	mov	r0, r1
 800aa00:	4611      	mov	r1, r2
 800aa02:	2200      	movs	r2, #0
 800aa04:	602a      	str	r2, [r5, #0]
 800aa06:	461a      	mov	r2, r3
 800aa08:	f7f7 f927 	bl	8001c5a <_write>
 800aa0c:	1c43      	adds	r3, r0, #1
 800aa0e:	d102      	bne.n	800aa16 <_write_r+0x1e>
 800aa10:	682b      	ldr	r3, [r5, #0]
 800aa12:	b103      	cbz	r3, 800aa16 <_write_r+0x1e>
 800aa14:	6023      	str	r3, [r4, #0]
 800aa16:	bd38      	pop	{r3, r4, r5, pc}
 800aa18:	2000438c 	.word	0x2000438c

0800aa1c <_close_r>:
 800aa1c:	b538      	push	{r3, r4, r5, lr}
 800aa1e:	4d06      	ldr	r5, [pc, #24]	; (800aa38 <_close_r+0x1c>)
 800aa20:	2300      	movs	r3, #0
 800aa22:	4604      	mov	r4, r0
 800aa24:	4608      	mov	r0, r1
 800aa26:	602b      	str	r3, [r5, #0]
 800aa28:	f7f7 f933 	bl	8001c92 <_close>
 800aa2c:	1c43      	adds	r3, r0, #1
 800aa2e:	d102      	bne.n	800aa36 <_close_r+0x1a>
 800aa30:	682b      	ldr	r3, [r5, #0]
 800aa32:	b103      	cbz	r3, 800aa36 <_close_r+0x1a>
 800aa34:	6023      	str	r3, [r4, #0]
 800aa36:	bd38      	pop	{r3, r4, r5, pc}
 800aa38:	2000438c 	.word	0x2000438c

0800aa3c <_fstat_r>:
 800aa3c:	b538      	push	{r3, r4, r5, lr}
 800aa3e:	4d07      	ldr	r5, [pc, #28]	; (800aa5c <_fstat_r+0x20>)
 800aa40:	2300      	movs	r3, #0
 800aa42:	4604      	mov	r4, r0
 800aa44:	4608      	mov	r0, r1
 800aa46:	4611      	mov	r1, r2
 800aa48:	602b      	str	r3, [r5, #0]
 800aa4a:	f7f7 f92e 	bl	8001caa <_fstat>
 800aa4e:	1c43      	adds	r3, r0, #1
 800aa50:	d102      	bne.n	800aa58 <_fstat_r+0x1c>
 800aa52:	682b      	ldr	r3, [r5, #0]
 800aa54:	b103      	cbz	r3, 800aa58 <_fstat_r+0x1c>
 800aa56:	6023      	str	r3, [r4, #0]
 800aa58:	bd38      	pop	{r3, r4, r5, pc}
 800aa5a:	bf00      	nop
 800aa5c:	2000438c 	.word	0x2000438c

0800aa60 <_isatty_r>:
 800aa60:	b538      	push	{r3, r4, r5, lr}
 800aa62:	4d06      	ldr	r5, [pc, #24]	; (800aa7c <_isatty_r+0x1c>)
 800aa64:	2300      	movs	r3, #0
 800aa66:	4604      	mov	r4, r0
 800aa68:	4608      	mov	r0, r1
 800aa6a:	602b      	str	r3, [r5, #0]
 800aa6c:	f7f7 f92d 	bl	8001cca <_isatty>
 800aa70:	1c43      	adds	r3, r0, #1
 800aa72:	d102      	bne.n	800aa7a <_isatty_r+0x1a>
 800aa74:	682b      	ldr	r3, [r5, #0]
 800aa76:	b103      	cbz	r3, 800aa7a <_isatty_r+0x1a>
 800aa78:	6023      	str	r3, [r4, #0]
 800aa7a:	bd38      	pop	{r3, r4, r5, pc}
 800aa7c:	2000438c 	.word	0x2000438c

0800aa80 <_lseek_r>:
 800aa80:	b538      	push	{r3, r4, r5, lr}
 800aa82:	4d07      	ldr	r5, [pc, #28]	; (800aaa0 <_lseek_r+0x20>)
 800aa84:	4604      	mov	r4, r0
 800aa86:	4608      	mov	r0, r1
 800aa88:	4611      	mov	r1, r2
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	602a      	str	r2, [r5, #0]
 800aa8e:	461a      	mov	r2, r3
 800aa90:	f7f7 f926 	bl	8001ce0 <_lseek>
 800aa94:	1c43      	adds	r3, r0, #1
 800aa96:	d102      	bne.n	800aa9e <_lseek_r+0x1e>
 800aa98:	682b      	ldr	r3, [r5, #0]
 800aa9a:	b103      	cbz	r3, 800aa9e <_lseek_r+0x1e>
 800aa9c:	6023      	str	r3, [r4, #0]
 800aa9e:	bd38      	pop	{r3, r4, r5, pc}
 800aaa0:	2000438c 	.word	0x2000438c

0800aaa4 <_read_r>:
 800aaa4:	b538      	push	{r3, r4, r5, lr}
 800aaa6:	4d07      	ldr	r5, [pc, #28]	; (800aac4 <_read_r+0x20>)
 800aaa8:	4604      	mov	r4, r0
 800aaaa:	4608      	mov	r0, r1
 800aaac:	4611      	mov	r1, r2
 800aaae:	2200      	movs	r2, #0
 800aab0:	602a      	str	r2, [r5, #0]
 800aab2:	461a      	mov	r2, r3
 800aab4:	f7f7 f8b4 	bl	8001c20 <_read>
 800aab8:	1c43      	adds	r3, r0, #1
 800aaba:	d102      	bne.n	800aac2 <_read_r+0x1e>
 800aabc:	682b      	ldr	r3, [r5, #0]
 800aabe:	b103      	cbz	r3, 800aac2 <_read_r+0x1e>
 800aac0:	6023      	str	r3, [r4, #0]
 800aac2:	bd38      	pop	{r3, r4, r5, pc}
 800aac4:	2000438c 	.word	0x2000438c

0800aac8 <_gettimeofday>:
 800aac8:	4b02      	ldr	r3, [pc, #8]	; (800aad4 <_gettimeofday+0xc>)
 800aaca:	2258      	movs	r2, #88	; 0x58
 800aacc:	601a      	str	r2, [r3, #0]
 800aace:	f04f 30ff 	mov.w	r0, #4294967295
 800aad2:	4770      	bx	lr
 800aad4:	2000438c 	.word	0x2000438c

0800aad8 <_init>:
 800aad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aada:	bf00      	nop
 800aadc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aade:	bc08      	pop	{r3}
 800aae0:	469e      	mov	lr, r3
 800aae2:	4770      	bx	lr

0800aae4 <_fini>:
 800aae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aae6:	bf00      	nop
 800aae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaea:	bc08      	pop	{r3}
 800aaec:	469e      	mov	lr, r3
 800aaee:	4770      	bx	lr
