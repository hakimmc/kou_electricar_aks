
AKS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ab4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  08009c44  08009c44  00019c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ed0  08009ed0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009ed0  08009ed0  00019ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ed8  08009ed8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ed8  08009ed8  00019ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009edc  08009edc  00019edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0000571c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005794  20005794  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d1c4  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c8e  00000000  00000000  0003d26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001848  00000000  00000000  00040f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000016e0  00000000  00000000  00042748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c0d  00000000  00000000  00043e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a169  00000000  00000000  00067a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dabb4  00000000  00000000  00081b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015c752  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006dac  00000000  00000000  0015c7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009c2c 	.word	0x08009c2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08009c2c 	.word	0x08009c2c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2f>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a74:	bf24      	itt	cs
 8000a76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a7e:	d90d      	bls.n	8000a9c <__aeabi_d2f+0x30>
 8000a80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aa0:	d121      	bne.n	8000ae6 <__aeabi_d2f+0x7a>
 8000aa2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aa6:	bfbc      	itt	lt
 8000aa8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	4770      	bxlt	lr
 8000aae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ab2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ab6:	f1c2 0218 	rsb	r2, r2, #24
 8000aba:	f1c2 0c20 	rsb	ip, r2, #32
 8000abe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ac2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	f040 0001 	orrne.w	r0, r0, #1
 8000acc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ad4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ad8:	ea40 000c 	orr.w	r0, r0, ip
 8000adc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ae4:	e7cc      	b.n	8000a80 <__aeabi_d2f+0x14>
 8000ae6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aea:	d107      	bne.n	8000afc <__aeabi_d2f+0x90>
 8000aec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af0:	bf1e      	ittt	ne
 8000af2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000af6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000afa:	4770      	bxne	lr
 8000afc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop

08000b0c <__aeabi_uldivmod>:
 8000b0c:	b953      	cbnz	r3, 8000b24 <__aeabi_uldivmod+0x18>
 8000b0e:	b94a      	cbnz	r2, 8000b24 <__aeabi_uldivmod+0x18>
 8000b10:	2900      	cmp	r1, #0
 8000b12:	bf08      	it	eq
 8000b14:	2800      	cmpeq	r0, #0
 8000b16:	bf1c      	itt	ne
 8000b18:	f04f 31ff 	movne.w	r1, #4294967295
 8000b1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b20:	f000 b974 	b.w	8000e0c <__aeabi_idiv0>
 8000b24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b2c:	f000 f806 	bl	8000b3c <__udivmoddi4>
 8000b30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b38:	b004      	add	sp, #16
 8000b3a:	4770      	bx	lr

08000b3c <__udivmoddi4>:
 8000b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b40:	9d08      	ldr	r5, [sp, #32]
 8000b42:	4604      	mov	r4, r0
 8000b44:	468e      	mov	lr, r1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d14d      	bne.n	8000be6 <__udivmoddi4+0xaa>
 8000b4a:	428a      	cmp	r2, r1
 8000b4c:	4694      	mov	ip, r2
 8000b4e:	d969      	bls.n	8000c24 <__udivmoddi4+0xe8>
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	b152      	cbz	r2, 8000b6c <__udivmoddi4+0x30>
 8000b56:	fa01 f302 	lsl.w	r3, r1, r2
 8000b5a:	f1c2 0120 	rsb	r1, r2, #32
 8000b5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b66:	ea41 0e03 	orr.w	lr, r1, r3
 8000b6a:	4094      	lsls	r4, r2
 8000b6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b70:	0c21      	lsrs	r1, r4, #16
 8000b72:	fbbe f6f8 	udiv	r6, lr, r8
 8000b76:	fa1f f78c 	uxth.w	r7, ip
 8000b7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b82:	fb06 f107 	mul.w	r1, r6, r7
 8000b86:	4299      	cmp	r1, r3
 8000b88:	d90a      	bls.n	8000ba0 <__udivmoddi4+0x64>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b92:	f080 811f 	bcs.w	8000dd4 <__udivmoddi4+0x298>
 8000b96:	4299      	cmp	r1, r3
 8000b98:	f240 811c 	bls.w	8000dd4 <__udivmoddi4+0x298>
 8000b9c:	3e02      	subs	r6, #2
 8000b9e:	4463      	add	r3, ip
 8000ba0:	1a5b      	subs	r3, r3, r1
 8000ba2:	b2a4      	uxth	r4, r4
 8000ba4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb0:	fb00 f707 	mul.w	r7, r0, r7
 8000bb4:	42a7      	cmp	r7, r4
 8000bb6:	d90a      	bls.n	8000bce <__udivmoddi4+0x92>
 8000bb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc0:	f080 810a 	bcs.w	8000dd8 <__udivmoddi4+0x29c>
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	f240 8107 	bls.w	8000dd8 <__udivmoddi4+0x29c>
 8000bca:	4464      	add	r4, ip
 8000bcc:	3802      	subs	r0, #2
 8000bce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bd2:	1be4      	subs	r4, r4, r7
 8000bd4:	2600      	movs	r6, #0
 8000bd6:	b11d      	cbz	r5, 8000be0 <__udivmoddi4+0xa4>
 8000bd8:	40d4      	lsrs	r4, r2
 8000bda:	2300      	movs	r3, #0
 8000bdc:	e9c5 4300 	strd	r4, r3, [r5]
 8000be0:	4631      	mov	r1, r6
 8000be2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0xc2>
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	f000 80ef 	beq.w	8000dce <__udivmoddi4+0x292>
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bf6:	4630      	mov	r0, r6
 8000bf8:	4631      	mov	r1, r6
 8000bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bfe:	fab3 f683 	clz	r6, r3
 8000c02:	2e00      	cmp	r6, #0
 8000c04:	d14a      	bne.n	8000c9c <__udivmoddi4+0x160>
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d302      	bcc.n	8000c10 <__udivmoddi4+0xd4>
 8000c0a:	4282      	cmp	r2, r0
 8000c0c:	f200 80f9 	bhi.w	8000e02 <__udivmoddi4+0x2c6>
 8000c10:	1a84      	subs	r4, r0, r2
 8000c12:	eb61 0303 	sbc.w	r3, r1, r3
 8000c16:	2001      	movs	r0, #1
 8000c18:	469e      	mov	lr, r3
 8000c1a:	2d00      	cmp	r5, #0
 8000c1c:	d0e0      	beq.n	8000be0 <__udivmoddi4+0xa4>
 8000c1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c22:	e7dd      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000c24:	b902      	cbnz	r2, 8000c28 <__udivmoddi4+0xec>
 8000c26:	deff      	udf	#255	; 0xff
 8000c28:	fab2 f282 	clz	r2, r2
 8000c2c:	2a00      	cmp	r2, #0
 8000c2e:	f040 8092 	bne.w	8000d56 <__udivmoddi4+0x21a>
 8000c32:	eba1 010c 	sub.w	r1, r1, ip
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f fe8c 	uxth.w	lr, ip
 8000c3e:	2601      	movs	r6, #1
 8000c40:	0c20      	lsrs	r0, r4, #16
 8000c42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c46:	fb07 1113 	mls	r1, r7, r3, r1
 8000c4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c4e:	fb0e f003 	mul.w	r0, lr, r3
 8000c52:	4288      	cmp	r0, r1
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x12c>
 8000c56:	eb1c 0101 	adds.w	r1, ip, r1
 8000c5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x12a>
 8000c60:	4288      	cmp	r0, r1
 8000c62:	f200 80cb 	bhi.w	8000dfc <__udivmoddi4+0x2c0>
 8000c66:	4643      	mov	r3, r8
 8000c68:	1a09      	subs	r1, r1, r0
 8000c6a:	b2a4      	uxth	r4, r4
 8000c6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c70:	fb07 1110 	mls	r1, r7, r0, r1
 8000c74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c78:	fb0e fe00 	mul.w	lr, lr, r0
 8000c7c:	45a6      	cmp	lr, r4
 8000c7e:	d908      	bls.n	8000c92 <__udivmoddi4+0x156>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c88:	d202      	bcs.n	8000c90 <__udivmoddi4+0x154>
 8000c8a:	45a6      	cmp	lr, r4
 8000c8c:	f200 80bb 	bhi.w	8000e06 <__udivmoddi4+0x2ca>
 8000c90:	4608      	mov	r0, r1
 8000c92:	eba4 040e 	sub.w	r4, r4, lr
 8000c96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c9a:	e79c      	b.n	8000bd6 <__udivmoddi4+0x9a>
 8000c9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ca0:	40b3      	lsls	r3, r6
 8000ca2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ca6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000caa:	fa20 f407 	lsr.w	r4, r0, r7
 8000cae:	fa01 f306 	lsl.w	r3, r1, r6
 8000cb2:	431c      	orrs	r4, r3
 8000cb4:	40f9      	lsrs	r1, r7
 8000cb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cba:	fa00 f306 	lsl.w	r3, r0, r6
 8000cbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cc2:	0c20      	lsrs	r0, r4, #16
 8000cc4:	fa1f fe8c 	uxth.w	lr, ip
 8000cc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ccc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000cd4:	4288      	cmp	r0, r1
 8000cd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b8>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ce4:	f080 8088 	bcs.w	8000df8 <__udivmoddi4+0x2bc>
 8000ce8:	4288      	cmp	r0, r1
 8000cea:	f240 8085 	bls.w	8000df8 <__udivmoddi4+0x2bc>
 8000cee:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf2:	4461      	add	r1, ip
 8000cf4:	1a09      	subs	r1, r1, r0
 8000cf6:	b2a4      	uxth	r4, r4
 8000cf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000d00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d08:	458e      	cmp	lr, r1
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1e2>
 8000d0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d14:	d26c      	bcs.n	8000df0 <__udivmoddi4+0x2b4>
 8000d16:	458e      	cmp	lr, r1
 8000d18:	d96a      	bls.n	8000df0 <__udivmoddi4+0x2b4>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4461      	add	r1, ip
 8000d1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d22:	fba0 9402 	umull	r9, r4, r0, r2
 8000d26:	eba1 010e 	sub.w	r1, r1, lr
 8000d2a:	42a1      	cmp	r1, r4
 8000d2c:	46c8      	mov	r8, r9
 8000d2e:	46a6      	mov	lr, r4
 8000d30:	d356      	bcc.n	8000de0 <__udivmoddi4+0x2a4>
 8000d32:	d053      	beq.n	8000ddc <__udivmoddi4+0x2a0>
 8000d34:	b15d      	cbz	r5, 8000d4e <__udivmoddi4+0x212>
 8000d36:	ebb3 0208 	subs.w	r2, r3, r8
 8000d3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d42:	fa22 f306 	lsr.w	r3, r2, r6
 8000d46:	40f1      	lsrs	r1, r6
 8000d48:	431f      	orrs	r7, r3
 8000d4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d4e:	2600      	movs	r6, #0
 8000d50:	4631      	mov	r1, r6
 8000d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d56:	f1c2 0320 	rsb	r3, r2, #32
 8000d5a:	40d8      	lsrs	r0, r3
 8000d5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d60:	fa21 f303 	lsr.w	r3, r1, r3
 8000d64:	4091      	lsls	r1, r2
 8000d66:	4301      	orrs	r1, r0
 8000d68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6c:	fa1f fe8c 	uxth.w	lr, ip
 8000d70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d74:	fb07 3610 	mls	r6, r7, r0, r3
 8000d78:	0c0b      	lsrs	r3, r1, #16
 8000d7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d82:	429e      	cmp	r6, r3
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x260>
 8000d8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d92:	d22f      	bcs.n	8000df4 <__udivmoddi4+0x2b8>
 8000d94:	429e      	cmp	r6, r3
 8000d96:	d92d      	bls.n	8000df4 <__udivmoddi4+0x2b8>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4463      	add	r3, ip
 8000d9c:	1b9b      	subs	r3, r3, r6
 8000d9e:	b289      	uxth	r1, r1
 8000da0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000da4:	fb07 3316 	mls	r3, r7, r6, r3
 8000da8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dac:	fb06 f30e 	mul.w	r3, r6, lr
 8000db0:	428b      	cmp	r3, r1
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x28a>
 8000db4:	eb1c 0101 	adds.w	r1, ip, r1
 8000db8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dbc:	d216      	bcs.n	8000dec <__udivmoddi4+0x2b0>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d914      	bls.n	8000dec <__udivmoddi4+0x2b0>
 8000dc2:	3e02      	subs	r6, #2
 8000dc4:	4461      	add	r1, ip
 8000dc6:	1ac9      	subs	r1, r1, r3
 8000dc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dcc:	e738      	b.n	8000c40 <__udivmoddi4+0x104>
 8000dce:	462e      	mov	r6, r5
 8000dd0:	4628      	mov	r0, r5
 8000dd2:	e705      	b.n	8000be0 <__udivmoddi4+0xa4>
 8000dd4:	4606      	mov	r6, r0
 8000dd6:	e6e3      	b.n	8000ba0 <__udivmoddi4+0x64>
 8000dd8:	4618      	mov	r0, r3
 8000dda:	e6f8      	b.n	8000bce <__udivmoddi4+0x92>
 8000ddc:	454b      	cmp	r3, r9
 8000dde:	d2a9      	bcs.n	8000d34 <__udivmoddi4+0x1f8>
 8000de0:	ebb9 0802 	subs.w	r8, r9, r2
 8000de4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de8:	3801      	subs	r0, #1
 8000dea:	e7a3      	b.n	8000d34 <__udivmoddi4+0x1f8>
 8000dec:	4646      	mov	r6, r8
 8000dee:	e7ea      	b.n	8000dc6 <__udivmoddi4+0x28a>
 8000df0:	4620      	mov	r0, r4
 8000df2:	e794      	b.n	8000d1e <__udivmoddi4+0x1e2>
 8000df4:	4640      	mov	r0, r8
 8000df6:	e7d1      	b.n	8000d9c <__udivmoddi4+0x260>
 8000df8:	46d0      	mov	r8, sl
 8000dfa:	e77b      	b.n	8000cf4 <__udivmoddi4+0x1b8>
 8000dfc:	3b02      	subs	r3, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	e732      	b.n	8000c68 <__udivmoddi4+0x12c>
 8000e02:	4630      	mov	r0, r6
 8000e04:	e709      	b.n	8000c1a <__udivmoddi4+0xde>
 8000e06:	4464      	add	r4, ip
 8000e08:	3802      	subs	r0, #2
 8000e0a:	e742      	b.n	8000c92 <__udivmoddi4+0x156>

08000e0c <__aeabi_idiv0>:
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop

08000e10 <cf2a>:
	printf("\r%s\n",cf2a(32.33)); //%s
	OUTPUT: A.D for "65.68";

}*/

char* cf2a(float num,char str[4]){//working
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	ed87 0a03 	vstr	s0, [r7, #12]
 8000e1a:	60b8      	str	r0, [r7, #8]
	num+=33.33;
 8000e1c:	68f8      	ldr	r0, [r7, #12]
 8000e1e:	f7ff fb93 	bl	8000548 <__aeabi_f2d>
 8000e22:	a326      	add	r3, pc, #152	; (adr r3, 8000ebc <cf2a+0xac>)
 8000e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e28:	f7ff fa30 	bl	800028c <__adddf3>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	460b      	mov	r3, r1
 8000e30:	4610      	mov	r0, r2
 8000e32:	4619      	mov	r1, r3
 8000e34:	f7ff fe1a 	bl	8000a6c <__aeabi_d2f>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	60fb      	str	r3, [r7, #12]
	str[0] = (char)(int)(num);
 8000e3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e44:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e48:	793a      	ldrb	r2, [r7, #4]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	701a      	strb	r2, [r3, #0]
	str[1] = '0';
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	3301      	adds	r3, #1
 8000e52:	2230      	movs	r2, #48	; 0x30
 8000e54:	701a      	strb	r2, [r3, #0]
	str[2] = (char) (((int)(num*100.0))-(100*((int)num)));
 8000e56:	68f8      	ldr	r0, [r7, #12]
 8000e58:	f7ff fb76 	bl	8000548 <__aeabi_f2d>
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <cf2a+0xa8>)
 8000e62:	f7ff fbc9 	bl	80005f8 <__aeabi_dmul>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f7ff fdd5 	bl	8000a1c <__aeabi_d2iz>
 8000e72:	4603      	mov	r3, r0
 8000e74:	b2d9      	uxtb	r1, r3
 8000e76:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e7e:	edc7 7a01 	vstr	s15, [r7, #4]
 8000e82:	793b      	ldrb	r3, [r7, #4]
 8000e84:	461a      	mov	r2, r3
 8000e86:	0092      	lsls	r2, r2, #2
 8000e88:	4413      	add	r3, r2
 8000e8a:	461a      	mov	r2, r3
 8000e8c:	0090      	lsls	r0, r2, #2
 8000e8e:	461a      	mov	r2, r3
 8000e90:	4603      	mov	r3, r0
 8000e92:	4413      	add	r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	1a8a      	subs	r2, r1, r2
 8000e9e:	b2d2      	uxtb	r2, r2
 8000ea0:	701a      	strb	r2, [r3, #0]
	str[3] = '\0';
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	3303      	adds	r3, #3
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]

	return str;
 8000eaa:	68bb      	ldr	r3, [r7, #8]
	/*USAGE
	printf("\r%s\n",ci2a("65.68")); //%s
	OUTPUT: A.D for "65.68";
	*/
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	f3af 8000 	nop.w
 8000eb8:	40590000 	.word	0x40590000
 8000ebc:	70a3d70a 	.word	0x70a3d70a
 8000ec0:	4040aa3d 	.word	0x4040aa3d

08000ec4 <ci2a>:

char ci2a(int num){//working
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	return (char) (num+33);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	3321      	adds	r3, #33	; 0x21
 8000ed2:	b2db      	uxtb	r3, r3
	/*USAGE 
	printf("\r%c\n",ci2a(32));  //%c
	OUTPUT: A for "65";
	*/
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <NEXTION_SEND>:
        dest_array[i] = dec%2;
        dec/=2;
    }
}

void NEXTION_SEND(UART_HandleTypeDef huart,int what_do_you_want,char* ID,int variable,char myMessage[50]){
 8000ee0:	b084      	sub	sp, #16
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b088      	sub	sp, #32
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8000eec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//0 for vis
	//1 for value
	//2 for txt
	int lenx;
	uint8_t cmdEnd[3] = { 0xFF, 0xFF, 0xFF };
 8000ef0:	4a30      	ldr	r2, [pc, #192]	; (8000fb4 <NEXTION_SEND+0xd4>)
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	6812      	ldr	r2, [r2, #0]
 8000ef8:	4611      	mov	r1, r2
 8000efa:	8019      	strh	r1, [r3, #0]
 8000efc:	3302      	adds	r3, #2
 8000efe:	0c12      	lsrs	r2, r2, #16
 8000f00:	701a      	strb	r2, [r3, #0]
	int leny;
	char arr[8];
	char x[5];

	switch (what_do_you_want) {
 8000f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d019      	beq.n	8000f3c <NEXTION_SEND+0x5c>
 8000f08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	dc35      	bgt.n	8000f7a <NEXTION_SEND+0x9a>
 8000f0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d003      	beq.n	8000f1c <NEXTION_SEND+0x3c>
 8000f14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d008      	beq.n	8000f2c <NEXTION_SEND+0x4c>
			leny = sprintf(x, "%d", variable);
			strcat(myMessage,x);
			strcat(myMessage,"\"");
			break;
		default:
			break;
 8000f1a:	e02e      	b.n	8000f7a <NEXTION_SEND+0x9a>
			lenx = sprintf(myMessage, "vis %s,%d", ID,variable);
 8000f1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000f20:	4925      	ldr	r1, [pc, #148]	; (8000fb8 <NEXTION_SEND+0xd8>)
 8000f22:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000f24:	f008 fa12 	bl	800934c <siprintf>
 8000f28:	61f8      	str	r0, [r7, #28]
			break;
 8000f2a:	e027      	b.n	8000f7c <NEXTION_SEND+0x9c>
			lenx = sprintf(myMessage, "%s.val=%d", ID,variable);
 8000f2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f2e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000f30:	4922      	ldr	r1, [pc, #136]	; (8000fbc <NEXTION_SEND+0xdc>)
 8000f32:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000f34:	f008 fa0a 	bl	800934c <siprintf>
 8000f38:	61f8      	str	r0, [r7, #28]
			break;
 8000f3a:	e01f      	b.n	8000f7c <NEXTION_SEND+0x9c>
			lenx = sprintf(myMessage, "%s.txt=\"", ID);
 8000f3c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8000f3e:	4920      	ldr	r1, [pc, #128]	; (8000fc0 <NEXTION_SEND+0xe0>)
 8000f40:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000f42:	f008 fa03 	bl	800934c <siprintf>
 8000f46:	61f8      	str	r0, [r7, #28]
			leny = sprintf(x, "%d", variable);
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8000f4c:	491d      	ldr	r1, [pc, #116]	; (8000fc4 <NEXTION_SEND+0xe4>)
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f008 f9fc 	bl	800934c <siprintf>
 8000f54:	61b8      	str	r0, [r7, #24]
			strcat(myMessage,x);
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	4619      	mov	r1, r3
 8000f5a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000f5c:	f008 fa16 	bl	800938c <strcat>
			strcat(myMessage,"\"");
 8000f60:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000f62:	f7ff f935 	bl	80001d0 <strlen>
 8000f66:	4603      	mov	r3, r0
 8000f68:	461a      	mov	r2, r3
 8000f6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000f6c:	4413      	add	r3, r2
 8000f6e:	4916      	ldr	r1, [pc, #88]	; (8000fc8 <NEXTION_SEND+0xe8>)
 8000f70:	461a      	mov	r2, r3
 8000f72:	460b      	mov	r3, r1
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	8013      	strh	r3, [r2, #0]
			break;
 8000f78:	e000      	b.n	8000f7c <NEXTION_SEND+0x9c>
			break;
 8000f7a:	bf00      	nop
	}
	HAL_UART_Transmit(&huart,(uint8_t*)myMessage , strlen(myMessage), 1000);
 8000f7c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000f7e:	f7ff f927 	bl	80001d0 <strlen>
 8000f82:	4603      	mov	r3, r0
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000f8c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000f90:	f005 f893 	bl	80060ba <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart, cmdEnd, 3, 1000);
 8000f94:	f107 0114 	add.w	r1, r7, #20
 8000f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000fa2:	f005 f88a 	bl	80060ba <HAL_UART_Transmit>
}
 8000fa6:	bf00      	nop
 8000fa8:	3720      	adds	r7, #32
 8000faa:	46bd      	mov	sp, r7
 8000fac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fb0:	b004      	add	sp, #16
 8000fb2:	4770      	bx	lr
 8000fb4:	08009c94 	.word	0x08009c94
 8000fb8:	08009c68 	.word	0x08009c68
 8000fbc:	08009c74 	.word	0x08009c74
 8000fc0:	08009c80 	.word	0x08009c80
 8000fc4:	08009c8c 	.word	0x08009c8c
 8000fc8:	08009c90 	.word	0x08009c90

08000fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd0:	f001 fc78 	bl	80028c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd4:	f000 f8b0 	bl	8001138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd8:	f000 fac2 	bl	8001560 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000fdc:	f000 f916 	bl	800120c <MX_CAN1_Init>
  MX_DAC_Init();
 8000fe0:	f000 f94a 	bl	8001278 <MX_DAC_Init>
  MX_USART2_UART_Init();
 8000fe4:	f000 fa48 	bl	8001478 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000fe8:	f000 fa70 	bl	80014cc <MX_USART6_UART_Init>
  MX_DMA_Init();
 8000fec:	f000 fa98 	bl	8001520 <MX_DMA_Init>
  MX_TIM6_Init();
 8000ff0:	f000 fa0c 	bl	800140c <MX_TIM6_Init>
  MX_TIM1_Init();
 8000ff4:	f000 f96a 	bl	80012cc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4838      	ldr	r0, [pc, #224]	; (80010dc <main+0x110>)
 8000ffc:	f002 f9da 	bl	80033b4 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8001000:	4837      	ldr	r0, [pc, #220]	; (80010e0 <main+0x114>)
 8001002:	f003 fd23 	bl	8004a4c <HAL_TIM_Base_Start_IT>
  HAL_CAN_Start(&hcan1);
 8001006:	4837      	ldr	r0, [pc, #220]	; (80010e4 <main+0x118>)
 8001008:	f001 fe9e 	bl	8002d48 <HAL_CAN_Start>


  pTxHeader.DLC = 1;
 800100c:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <main+0x11c>)
 800100e:	2201      	movs	r2, #1
 8001010:	611a      	str	r2, [r3, #16]
  pTxHeader.IDE = CAN_ID_STD;
 8001012:	4b35      	ldr	r3, [pc, #212]	; (80010e8 <main+0x11c>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  pTxHeader.RTR = CAN_RTR_DATA;
 8001018:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <main+0x11c>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  pTxHeader.StdId = 0x0407;
 800101e:	4b32      	ldr	r3, [pc, #200]	; (80010e8 <main+0x11c>)
 8001020:	f240 4207 	movw	r2, #1031	; 0x407
 8001024:	601a      	str	r2, [r3, #0]


  Reset_LED();
 8001026:	f001 f81f 	bl	8002068 <Reset_LED>

  Set_Brightness(45);
 800102a:	202d      	movs	r0, #45	; 0x2d
 800102c:	f000 ffa4 	bl	8001f78 <Set_Brightness>
  WS2812_Send();
 8001030:	f000 ffac 	bl	8001f8c <WS2812_Send>
   //set filter parameters
   sFilterConfig.FilterActivation = ENABLE;
 8001034:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <main+0x120>)
 8001036:	2201      	movs	r2, #1
 8001038:	621a      	str	r2, [r3, #32]
   sFilterConfig.FilterBank = 0;
 800103a:	4b2c      	ldr	r3, [pc, #176]	; (80010ec <main+0x120>)
 800103c:	2200      	movs	r2, #0
 800103e:	615a      	str	r2, [r3, #20]
   sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001040:	4b2a      	ldr	r3, [pc, #168]	; (80010ec <main+0x120>)
 8001042:	2200      	movs	r2, #0
 8001044:	611a      	str	r2, [r3, #16]
   sFilterConfig.FilterIdHigh = 0x0000 ;
 8001046:	4b29      	ldr	r3, [pc, #164]	; (80010ec <main+0x120>)
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
   sFilterConfig.FilterIdLow = 0x0000 ;
 800104c:	4b27      	ldr	r3, [pc, #156]	; (80010ec <main+0x120>)
 800104e:	2200      	movs	r2, #0
 8001050:	605a      	str	r2, [r3, #4]
   sFilterConfig.FilterMaskIdHigh = 0x0000 ;
 8001052:	4b26      	ldr	r3, [pc, #152]	; (80010ec <main+0x120>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
   sFilterConfig.FilterMaskIdLow = 0x0000 ;
 8001058:	4b24      	ldr	r3, [pc, #144]	; (80010ec <main+0x120>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
   sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800105e:	4b23      	ldr	r3, [pc, #140]	; (80010ec <main+0x120>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]
   sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001064:	4b21      	ldr	r3, [pc, #132]	; (80010ec <main+0x120>)
 8001066:	2201      	movs	r2, #1
 8001068:	61da      	str	r2, [r3, #28]

   HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 800106a:	4920      	ldr	r1, [pc, #128]	; (80010ec <main+0x120>)
 800106c:	481d      	ldr	r0, [pc, #116]	; (80010e4 <main+0x118>)
 800106e:	f001 fd8b 	bl	8002b88 <HAL_CAN_ConfigFilter>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001072:	f005 fbdb 	bl	800682c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of nextion */
  nextionHandle = osThreadNew(start_nextion, NULL, &nextion_attributes);
 8001076:	4a1e      	ldr	r2, [pc, #120]	; (80010f0 <main+0x124>)
 8001078:	2100      	movs	r1, #0
 800107a:	481e      	ldr	r0, [pc, #120]	; (80010f4 <main+0x128>)
 800107c:	f005 fc20 	bl	80068c0 <osThreadNew>
 8001080:	4603      	mov	r3, r0
 8001082:	4a1d      	ldr	r2, [pc, #116]	; (80010f8 <main+0x12c>)
 8001084:	6013      	str	r3, [r2, #0]

  /* creation of rf */
  rfHandle = osThreadNew(start_rf, NULL, &rf_attributes);
 8001086:	4a1d      	ldr	r2, [pc, #116]	; (80010fc <main+0x130>)
 8001088:	2100      	movs	r1, #0
 800108a:	481d      	ldr	r0, [pc, #116]	; (8001100 <main+0x134>)
 800108c:	f005 fc18 	bl	80068c0 <osThreadNew>
 8001090:	4603      	mov	r3, r0
 8001092:	4a1c      	ldr	r2, [pc, #112]	; (8001104 <main+0x138>)
 8001094:	6013      	str	r3, [r2, #0]

  /* creation of can */
  canHandle = osThreadNew(start_can, NULL, &can_attributes);
 8001096:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <main+0x13c>)
 8001098:	2100      	movs	r1, #0
 800109a:	481c      	ldr	r0, [pc, #112]	; (800110c <main+0x140>)
 800109c:	f005 fc10 	bl	80068c0 <osThreadNew>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a1b      	ldr	r2, [pc, #108]	; (8001110 <main+0x144>)
 80010a4:	6013      	str	r3, [r2, #0]

  /* creation of right_signal */
  right_signalHandle = osThreadNew(right_signal_start, NULL, &right_signal_attributes);
 80010a6:	4a1b      	ldr	r2, [pc, #108]	; (8001114 <main+0x148>)
 80010a8:	2100      	movs	r1, #0
 80010aa:	481b      	ldr	r0, [pc, #108]	; (8001118 <main+0x14c>)
 80010ac:	f005 fc08 	bl	80068c0 <osThreadNew>
 80010b0:	4603      	mov	r3, r0
 80010b2:	4a1a      	ldr	r2, [pc, #104]	; (800111c <main+0x150>)
 80010b4:	6013      	str	r3, [r2, #0]

  /* creation of left_signal */
  left_signalHandle = osThreadNew(left_signal_signal, NULL, &left_signal_attributes);
 80010b6:	4a1a      	ldr	r2, [pc, #104]	; (8001120 <main+0x154>)
 80010b8:	2100      	movs	r1, #0
 80010ba:	481a      	ldr	r0, [pc, #104]	; (8001124 <main+0x158>)
 80010bc:	f005 fc00 	bl	80068c0 <osThreadNew>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4a19      	ldr	r2, [pc, #100]	; (8001128 <main+0x15c>)
 80010c4:	6013      	str	r3, [r2, #0]

  /* creation of stop_signal */
  stop_signalHandle = osThreadNew(stop_signal_start, NULL, &stop_signal_attributes);
 80010c6:	4a19      	ldr	r2, [pc, #100]	; (800112c <main+0x160>)
 80010c8:	2100      	movs	r1, #0
 80010ca:	4819      	ldr	r0, [pc, #100]	; (8001130 <main+0x164>)
 80010cc:	f005 fbf8 	bl	80068c0 <osThreadNew>
 80010d0:	4603      	mov	r3, r0
 80010d2:	4a18      	ldr	r2, [pc, #96]	; (8001134 <main+0x168>)
 80010d4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80010d6:	f005 fbcd 	bl	8006874 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010da:	e7fe      	b.n	80010da <main+0x10e>
 80010dc:	200002b4 	.word	0x200002b4
 80010e0:	20000310 	.word	0x20000310
 80010e4:	2000028c 	.word	0x2000028c
 80010e8:	20000094 	.word	0x20000094
 80010ec:	200000c8 	.word	0x200000c8
 80010f0:	08009d44 	.word	0x08009d44
 80010f4:	0800163d 	.word	0x0800163d
 80010f8:	20000440 	.word	0x20000440
 80010fc:	08009d68 	.word	0x08009d68
 8001100:	08001a29 	.word	0x08001a29
 8001104:	20000444 	.word	0x20000444
 8001108:	08009d8c 	.word	0x08009d8c
 800110c:	08001a85 	.word	0x08001a85
 8001110:	20000448 	.word	0x20000448
 8001114:	08009db0 	.word	0x08009db0
 8001118:	08001e71 	.word	0x08001e71
 800111c:	2000044c 	.word	0x2000044c
 8001120:	08009dd4 	.word	0x08009dd4
 8001124:	08001e9d 	.word	0x08001e9d
 8001128:	20000450 	.word	0x20000450
 800112c:	08009df8 	.word	0x08009df8
 8001130:	08001ec9 	.word	0x08001ec9
 8001134:	20000454 	.word	0x20000454

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b094      	sub	sp, #80	; 0x50
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 0320 	add.w	r3, r7, #32
 8001142:	2230      	movs	r2, #48	; 0x30
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f008 f8f8 	bl	800933c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	4b28      	ldr	r3, [pc, #160]	; (8001204 <SystemClock_Config+0xcc>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	4a27      	ldr	r2, [pc, #156]	; (8001204 <SystemClock_Config+0xcc>)
 8001166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116a:	6413      	str	r3, [r2, #64]	; 0x40
 800116c:	4b25      	ldr	r3, [pc, #148]	; (8001204 <SystemClock_Config+0xcc>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <SystemClock_Config+0xd0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a21      	ldr	r2, [pc, #132]	; (8001208 <SystemClock_Config+0xd0>)
 8001182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <SystemClock_Config+0xd0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001194:	2302      	movs	r3, #2
 8001196:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001198:	2301      	movs	r3, #1
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800119c:	2310      	movs	r3, #16
 800119e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a0:	2302      	movs	r3, #2
 80011a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011a4:	2300      	movs	r3, #0
 80011a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011a8:	2308      	movs	r3, #8
 80011aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011ac:	23a8      	movs	r3, #168	; 0xa8
 80011ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011b4:	2304      	movs	r3, #4
 80011b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b8:	f107 0320 	add.w	r3, r7, #32
 80011bc:	4618      	mov	r0, r3
 80011be:	f002 ff6b 	bl	8004098 <HAL_RCC_OscConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011c8:	f001 f888 	bl	80022dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011cc:	230f      	movs	r3, #15
 80011ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d0:	2302      	movs	r3, #2
 80011d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80011de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011e4:	f107 030c 	add.w	r3, r7, #12
 80011e8:	2105      	movs	r1, #5
 80011ea:	4618      	mov	r0, r3
 80011ec:	f003 f9cc 	bl	8004588 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011f6:	f001 f871 	bl	80022dc <Error_Handler>
  }
}
 80011fa:	bf00      	nop
 80011fc:	3750      	adds	r7, #80	; 0x50
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40007000 	.word	0x40007000

0800120c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <MX_CAN1_Init+0x64>)
 8001212:	4a18      	ldr	r2, [pc, #96]	; (8001274 <MX_CAN1_Init+0x68>)
 8001214:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <MX_CAN1_Init+0x64>)
 8001218:	2206      	movs	r2, #6
 800121a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_CAN1_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <MX_CAN1_Init+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_CAN1_Init+0x64>)
 800122a:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 800122e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_CAN1_Init+0x64>)
 8001232:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001236:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001238:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <MX_CAN1_Init+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <MX_CAN1_Init+0x64>)
 8001240:	2200      	movs	r2, #0
 8001242:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <MX_CAN1_Init+0x64>)
 8001246:	2200      	movs	r2, #0
 8001248:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <MX_CAN1_Init+0x64>)
 800124c:	2200      	movs	r2, #0
 800124e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001250:	4b07      	ldr	r3, [pc, #28]	; (8001270 <MX_CAN1_Init+0x64>)
 8001252:	2200      	movs	r2, #0
 8001254:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <MX_CAN1_Init+0x64>)
 8001258:	2200      	movs	r2, #0
 800125a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800125c:	4804      	ldr	r0, [pc, #16]	; (8001270 <MX_CAN1_Init+0x64>)
 800125e:	f001 fb97 	bl	8002990 <HAL_CAN_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001268:	f001 f838 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	2000028c 	.word	0x2000028c
 8001274:	40006400 	.word	0x40006400

08001278 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800127e:	463b      	mov	r3, r7
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <MX_DAC_Init+0x4c>)
 8001288:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <MX_DAC_Init+0x50>)
 800128a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800128c:	480d      	ldr	r0, [pc, #52]	; (80012c4 <MX_DAC_Init+0x4c>)
 800128e:	f002 f86f 	bl	8003370 <HAL_DAC_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001298:	f001 f820 	bl	80022dc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800129c:	2304      	movs	r3, #4
 800129e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	2200      	movs	r2, #0
 80012a8:	4619      	mov	r1, r3
 80012aa:	4806      	ldr	r0, [pc, #24]	; (80012c4 <MX_DAC_Init+0x4c>)
 80012ac:	f002 f938 	bl	8003520 <HAL_DAC_ConfigChannel>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80012b6:	f001 f811 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200002b4 	.word	0x200002b4
 80012c8:	40007400 	.word	0x40007400

080012cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b096      	sub	sp, #88	; 0x58
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]
 80012fa:	615a      	str	r2, [r3, #20]
 80012fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2220      	movs	r2, #32
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f008 f819 	bl	800933c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800130a:	4b3e      	ldr	r3, [pc, #248]	; (8001404 <MX_TIM1_Init+0x138>)
 800130c:	4a3e      	ldr	r2, [pc, #248]	; (8001408 <MX_TIM1_Init+0x13c>)
 800130e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001310:	4b3c      	ldr	r3, [pc, #240]	; (8001404 <MX_TIM1_Init+0x138>)
 8001312:	2200      	movs	r2, #0
 8001314:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b3b      	ldr	r3, [pc, #236]	; (8001404 <MX_TIM1_Init+0x138>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 105-1;
 800131c:	4b39      	ldr	r3, [pc, #228]	; (8001404 <MX_TIM1_Init+0x138>)
 800131e:	2268      	movs	r2, #104	; 0x68
 8001320:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001322:	4b38      	ldr	r3, [pc, #224]	; (8001404 <MX_TIM1_Init+0x138>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001328:	4b36      	ldr	r3, [pc, #216]	; (8001404 <MX_TIM1_Init+0x138>)
 800132a:	2200      	movs	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132e:	4b35      	ldr	r3, [pc, #212]	; (8001404 <MX_TIM1_Init+0x138>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001334:	4833      	ldr	r0, [pc, #204]	; (8001404 <MX_TIM1_Init+0x138>)
 8001336:	f003 fb39 	bl	80049ac <HAL_TIM_Base_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001340:	f000 ffcc 	bl	80022dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001348:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800134a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800134e:	4619      	mov	r1, r3
 8001350:	482c      	ldr	r0, [pc, #176]	; (8001404 <MX_TIM1_Init+0x138>)
 8001352:	f004 f8a9 	bl	80054a8 <HAL_TIM_ConfigClockSource>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800135c:	f000 ffbe 	bl	80022dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001360:	4828      	ldr	r0, [pc, #160]	; (8001404 <MX_TIM1_Init+0x138>)
 8001362:	f003 fbe3 	bl	8004b2c <HAL_TIM_PWM_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800136c:	f000 ffb6 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001370:	2300      	movs	r3, #0
 8001372:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001374:	2300      	movs	r3, #0
 8001376:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001378:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800137c:	4619      	mov	r1, r3
 800137e:	4821      	ldr	r0, [pc, #132]	; (8001404 <MX_TIM1_Init+0x138>)
 8001380:	f004 fd6c 	bl	8005e5c <HAL_TIMEx_MasterConfigSynchronization>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800138a:	f000 ffa7 	bl	80022dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138e:	2360      	movs	r3, #96	; 0x60
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001396:	2300      	movs	r3, #0
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800139a:	2300      	movs	r3, #0
 800139c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800139e:	2300      	movs	r3, #0
 80013a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013a2:	2300      	movs	r3, #0
 80013a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ae:	2200      	movs	r2, #0
 80013b0:	4619      	mov	r1, r3
 80013b2:	4814      	ldr	r0, [pc, #80]	; (8001404 <MX_TIM1_Init+0x138>)
 80013b4:	f003 ffb6 	bl	8005324 <HAL_TIM_PWM_ConfigChannel>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80013be:	f000 ff8d 	bl	80022dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013d2:	2300      	movs	r3, #0
 80013d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013e0:	1d3b      	adds	r3, r7, #4
 80013e2:	4619      	mov	r1, r3
 80013e4:	4807      	ldr	r0, [pc, #28]	; (8001404 <MX_TIM1_Init+0x138>)
 80013e6:	f004 fdb5 	bl	8005f54 <HAL_TIMEx_ConfigBreakDeadTime>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80013f0:	f000 ff74 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013f4:	4803      	ldr	r0, [pc, #12]	; (8001404 <MX_TIM1_Init+0x138>)
 80013f6:	f001 f8a9 	bl	800254c <HAL_TIM_MspPostInit>

}
 80013fa:	bf00      	nop
 80013fc:	3758      	adds	r7, #88	; 0x58
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200002c8 	.word	0x200002c8
 8001408:	40010000 	.word	0x40010000

0800140c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001412:	463b      	mov	r3, r7
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <MX_TIM6_Init+0x64>)
 800141c:	4a15      	ldr	r2, [pc, #84]	; (8001474 <MX_TIM6_Init+0x68>)
 800141e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <MX_TIM6_Init+0x64>)
 8001422:	2200      	movs	r2, #0
 8001424:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001426:	4b12      	ldr	r3, [pc, #72]	; (8001470 <MX_TIM6_Init+0x64>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3000;
 800142c:	4b10      	ldr	r3, [pc, #64]	; (8001470 <MX_TIM6_Init+0x64>)
 800142e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001432:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <MX_TIM6_Init+0x64>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800143a:	480d      	ldr	r0, [pc, #52]	; (8001470 <MX_TIM6_Init+0x64>)
 800143c:	f003 fab6 	bl	80049ac <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001446:	f000 ff49 	bl	80022dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001452:	463b      	mov	r3, r7
 8001454:	4619      	mov	r1, r3
 8001456:	4806      	ldr	r0, [pc, #24]	; (8001470 <MX_TIM6_Init+0x64>)
 8001458:	f004 fd00 	bl	8005e5c <HAL_TIMEx_MasterConfigSynchronization>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001462:	f000 ff3b 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	20000310 	.word	0x20000310
 8001474:	40001000 	.word	0x40001000

08001478 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_USART2_UART_Init+0x4c>)
 800147e:	4a12      	ldr	r2, [pc, #72]	; (80014c8 <MX_USART2_UART_Init+0x50>)
 8001480:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001482:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <MX_USART2_UART_Init+0x4c>)
 8001484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001488:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_USART2_UART_Init+0x4c>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_USART2_UART_Init+0x4c>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <MX_USART2_UART_Init+0x4c>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_USART2_UART_Init+0x4c>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <MX_USART2_UART_Init+0x4c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_USART2_UART_Init+0x4c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_USART2_UART_Init+0x4c>)
 80014b0:	f004 fdb6 	bl	8006020 <HAL_UART_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ba:	f000 ff0f 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200003b8 	.word	0x200003b8
 80014c8:	40004400 	.word	0x40004400

080014cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <MX_USART6_UART_Init+0x50>)
 80014d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014f2:	220c      	movs	r2, #12
 80014f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <MX_USART6_UART_Init+0x4c>)
 8001504:	f004 fd8c 	bl	8006020 <HAL_UART_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800150e:	f000 fee5 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200003fc 	.word	0x200003fc
 800151c:	40011400 	.word	0x40011400

08001520 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_DMA_Init+0x3c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a0b      	ldr	r2, [pc, #44]	; (800155c <MX_DMA_Init+0x3c>)
 8001530:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_DMA_Init+0x3c>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001542:	2200      	movs	r2, #0
 8001544:	2105      	movs	r1, #5
 8001546:	2039      	movs	r0, #57	; 0x39
 8001548:	f001 fee8 	bl	800331c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800154c:	2039      	movs	r0, #57	; 0x39
 800154e:	f001 ff01 	bl	8003354 <HAL_NVIC_EnableIRQ>

}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800

08001560 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <MX_GPIO_Init+0xd4>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a2d      	ldr	r2, [pc, #180]	; (8001634 <MX_GPIO_Init+0xd4>)
 8001580:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <MX_GPIO_Init+0xd4>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	4b27      	ldr	r3, [pc, #156]	; (8001634 <MX_GPIO_Init+0xd4>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a26      	ldr	r2, [pc, #152]	; (8001634 <MX_GPIO_Init+0xd4>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <MX_GPIO_Init+0xd4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <MX_GPIO_Init+0xd4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a1f      	ldr	r2, [pc, #124]	; (8001634 <MX_GPIO_Init+0xd4>)
 80015b8:	f043 0310 	orr.w	r3, r3, #16
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <MX_GPIO_Init+0xd4>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0310 	and.w	r3, r3, #16
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <MX_GPIO_Init+0xd4>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a18      	ldr	r2, [pc, #96]	; (8001634 <MX_GPIO_Init+0xd4>)
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <MX_GPIO_Init+0xd4>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	4b12      	ldr	r3, [pc, #72]	; (8001634 <MX_GPIO_Init+0xd4>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a11      	ldr	r2, [pc, #68]	; (8001634 <MX_GPIO_Init+0xd4>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <MX_GPIO_Init+0xd4>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001608:	480b      	ldr	r0, [pc, #44]	; (8001638 <MX_GPIO_Init+0xd8>)
 800160a:	f002 fd11 	bl	8004030 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800160e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001612:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001614:	2301      	movs	r3, #1
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	4804      	ldr	r0, [pc, #16]	; (8001638 <MX_GPIO_Init+0xd8>)
 8001628:	f002 fb66 	bl	8003cf8 <HAL_GPIO_Init>

}
 800162c:	bf00      	nop
 800162e:	3728      	adds	r7, #40	; 0x28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40023800 	.word	0x40023800
 8001638:	40020c00 	.word	0x40020c00

0800163c <start_nextion>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_start_nextion */
void start_nextion(void *argument)
{
 800163c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800163e:	b0a5      	sub	sp, #148	; 0x94
 8001640:	af12      	add	r7, sp, #72	; 0x48
 8001642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	  	 number++;
 8001644:	4b9a      	ldr	r3, [pc, #616]	; (80018b0 <start_nextion+0x274>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3301      	adds	r3, #1
 800164a:	4a99      	ldr	r2, [pc, #612]	; (80018b0 <start_nextion+0x274>)
 800164c:	6013      	str	r3, [r2, #0]
	  	 if(number>100){
 800164e:	4b98      	ldr	r3, [pc, #608]	; (80018b0 <start_nextion+0x274>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b64      	cmp	r3, #100	; 0x64
 8001654:	dd02      	ble.n	800165c <start_nextion+0x20>
	  		 number=10;
 8001656:	4b96      	ldr	r3, [pc, #600]	; (80018b0 <start_nextion+0x274>)
 8001658:	220a      	movs	r2, #10
 800165a:	601a      	str	r2, [r3, #0]
	  	 }
	  	 	 uint8_t cmdEnd[3] = { 0xFF, 0xFF, 0xFF };
 800165c:	4a95      	ldr	r2, [pc, #596]	; (80018b4 <start_nextion+0x278>)
 800165e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	4611      	mov	r1, r2
 8001666:	8019      	strh	r1, [r3, #0]
 8001668:	3302      	adds	r3, #2
 800166a:	0c12      	lsrs	r2, r2, #16
 800166c:	701a      	strb	r2, [r3, #0]
	  	 	 uint8_t myMessage[50];
	  	 	 int lenx = sprintf(myMessage, "%s.txt=\"", "t12");
 800166e:	f107 030c 	add.w	r3, r7, #12
 8001672:	4a91      	ldr	r2, [pc, #580]	; (80018b8 <start_nextion+0x27c>)
 8001674:	4991      	ldr	r1, [pc, #580]	; (80018bc <start_nextion+0x280>)
 8001676:	4618      	mov	r0, r3
 8001678:	f007 fe68 	bl	800934c <siprintf>
 800167c:	6478      	str	r0, [r7, #68]	; 0x44
	  	 	 HAL_UART_Transmit(&huart6, (uint8_t*)myMessage , lenx, 1000);
 800167e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001680:	b29a      	uxth	r2, r3
 8001682:	f107 010c 	add.w	r1, r7, #12
 8001686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800168a:	488d      	ldr	r0, [pc, #564]	; (80018c0 <start_nextion+0x284>)
 800168c:	f004 fd15 	bl	80060ba <HAL_UART_Transmit>
	  	 	 HAL_UART_Transmit(&huart6, (uint8_t*)"20\"" , strlen("20\""), 1000);
 8001690:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001694:	2203      	movs	r2, #3
 8001696:	498b      	ldr	r1, [pc, #556]	; (80018c4 <start_nextion+0x288>)
 8001698:	4889      	ldr	r0, [pc, #548]	; (80018c0 <start_nextion+0x284>)
 800169a:	f004 fd0e 	bl	80060ba <HAL_UART_Transmit>
	  	 	 HAL_UART_Transmit(&huart6, cmdEnd, 3, 1000);
 800169e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80016a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016a6:	2203      	movs	r2, #3
 80016a8:	4885      	ldr	r0, [pc, #532]	; (80018c0 <start_nextion+0x284>)
 80016aa:	f004 fd06 	bl	80060ba <HAL_UART_Transmit>
	  	status= !status;
 80016ae:	4b86      	ldr	r3, [pc, #536]	; (80018c8 <start_nextion+0x28c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	bf0c      	ite	eq
 80016b6:	2301      	moveq	r3, #1
 80016b8:	2300      	movne	r3, #0
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	461a      	mov	r2, r3
 80016be:	4b82      	ldr	r3, [pc, #520]	; (80018c8 <start_nextion+0x28c>)
 80016c0:	601a      	str	r2, [r3, #0]
	  	 NEXTION_SEND(huart6,2, power, number, myMessagex);
 80016c2:	4b7b      	ldr	r3, [pc, #492]	; (80018b0 <start_nextion+0x274>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4e7e      	ldr	r6, [pc, #504]	; (80018c0 <start_nextion+0x284>)
 80016c8:	4a80      	ldr	r2, [pc, #512]	; (80018cc <start_nextion+0x290>)
 80016ca:	9210      	str	r2, [sp, #64]	; 0x40
 80016cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80016ce:	4b80      	ldr	r3, [pc, #512]	; (80018d0 <start_nextion+0x294>)
 80016d0:	930e      	str	r3, [sp, #56]	; 0x38
 80016d2:	2302      	movs	r3, #2
 80016d4:	930d      	str	r3, [sp, #52]	; 0x34
 80016d6:	466d      	mov	r5, sp
 80016d8:	f106 0410 	add.w	r4, r6, #16
 80016dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016e8:	6823      	ldr	r3, [r4, #0]
 80016ea:	602b      	str	r3, [r5, #0]
 80016ec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80016f0:	f7ff fbf6 	bl	8000ee0 <NEXTION_SEND>
	  	 NEXTION_SEND(huart6, 2, speed, number, myMessagex);
 80016f4:	4b6e      	ldr	r3, [pc, #440]	; (80018b0 <start_nextion+0x274>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4e71      	ldr	r6, [pc, #452]	; (80018c0 <start_nextion+0x284>)
 80016fa:	4a74      	ldr	r2, [pc, #464]	; (80018cc <start_nextion+0x290>)
 80016fc:	9210      	str	r2, [sp, #64]	; 0x40
 80016fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8001700:	4b6d      	ldr	r3, [pc, #436]	; (80018b8 <start_nextion+0x27c>)
 8001702:	930e      	str	r3, [sp, #56]	; 0x38
 8001704:	2302      	movs	r3, #2
 8001706:	930d      	str	r3, [sp, #52]	; 0x34
 8001708:	466d      	mov	r5, sp
 800170a:	f106 0410 	add.w	r4, r6, #16
 800170e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001712:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001714:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171a:	6823      	ldr	r3, [r4, #0]
 800171c:	602b      	str	r3, [r5, #0]
 800171e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001722:	f7ff fbdd 	bl	8000ee0 <NEXTION_SEND>
	  	 NEXTION_SEND(huart6, 2, temp, number, myMessagex);
 8001726:	4b62      	ldr	r3, [pc, #392]	; (80018b0 <start_nextion+0x274>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4e65      	ldr	r6, [pc, #404]	; (80018c0 <start_nextion+0x284>)
 800172c:	4a67      	ldr	r2, [pc, #412]	; (80018cc <start_nextion+0x290>)
 800172e:	9210      	str	r2, [sp, #64]	; 0x40
 8001730:	930f      	str	r3, [sp, #60]	; 0x3c
 8001732:	4b68      	ldr	r3, [pc, #416]	; (80018d4 <start_nextion+0x298>)
 8001734:	930e      	str	r3, [sp, #56]	; 0x38
 8001736:	2302      	movs	r3, #2
 8001738:	930d      	str	r3, [sp, #52]	; 0x34
 800173a:	466d      	mov	r5, sp
 800173c:	f106 0410 	add.w	r4, r6, #16
 8001740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800174a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800174c:	6823      	ldr	r3, [r4, #0]
 800174e:	602b      	str	r3, [r5, #0]
 8001750:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001754:	f7ff fbc4 	bl	8000ee0 <NEXTION_SEND>
	  	 NEXTION_SEND(huart6, 2, watt, number, myMessagex);
 8001758:	4b55      	ldr	r3, [pc, #340]	; (80018b0 <start_nextion+0x274>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4e58      	ldr	r6, [pc, #352]	; (80018c0 <start_nextion+0x284>)
 800175e:	4a5b      	ldr	r2, [pc, #364]	; (80018cc <start_nextion+0x290>)
 8001760:	9210      	str	r2, [sp, #64]	; 0x40
 8001762:	930f      	str	r3, [sp, #60]	; 0x3c
 8001764:	4b5c      	ldr	r3, [pc, #368]	; (80018d8 <start_nextion+0x29c>)
 8001766:	930e      	str	r3, [sp, #56]	; 0x38
 8001768:	2302      	movs	r3, #2
 800176a:	930d      	str	r3, [sp, #52]	; 0x34
 800176c:	466d      	mov	r5, sp
 800176e:	f106 0410 	add.w	r4, r6, #16
 8001772:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001774:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001778:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800177c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	602b      	str	r3, [r5, #0]
 8001782:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001786:	f7ff fbab 	bl	8000ee0 <NEXTION_SEND>
	  	 NEXTION_SEND(huart6, 2, charge_percentage, number, myMessagex);
 800178a:	4b49      	ldr	r3, [pc, #292]	; (80018b0 <start_nextion+0x274>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4e4c      	ldr	r6, [pc, #304]	; (80018c0 <start_nextion+0x284>)
 8001790:	4a4e      	ldr	r2, [pc, #312]	; (80018cc <start_nextion+0x290>)
 8001792:	9210      	str	r2, [sp, #64]	; 0x40
 8001794:	930f      	str	r3, [sp, #60]	; 0x3c
 8001796:	4b51      	ldr	r3, [pc, #324]	; (80018dc <start_nextion+0x2a0>)
 8001798:	930e      	str	r3, [sp, #56]	; 0x38
 800179a:	2302      	movs	r3, #2
 800179c:	930d      	str	r3, [sp, #52]	; 0x34
 800179e:	466d      	mov	r5, sp
 80017a0:	f106 0410 	add.w	r4, r6, #16
 80017a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017b0:	6823      	ldr	r3, [r4, #0]
 80017b2:	602b      	str	r3, [r5, #0]
 80017b4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017b8:	f7ff fb92 	bl	8000ee0 <NEXTION_SEND>
	  	 NEXTION_SEND(huart6, 2, clock, number, myMessagex);
 80017bc:	4b3c      	ldr	r3, [pc, #240]	; (80018b0 <start_nextion+0x274>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4e3f      	ldr	r6, [pc, #252]	; (80018c0 <start_nextion+0x284>)
 80017c2:	4a42      	ldr	r2, [pc, #264]	; (80018cc <start_nextion+0x290>)
 80017c4:	9210      	str	r2, [sp, #64]	; 0x40
 80017c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80017c8:	4b45      	ldr	r3, [pc, #276]	; (80018e0 <start_nextion+0x2a4>)
 80017ca:	930e      	str	r3, [sp, #56]	; 0x38
 80017cc:	2302      	movs	r3, #2
 80017ce:	930d      	str	r3, [sp, #52]	; 0x34
 80017d0:	466d      	mov	r5, sp
 80017d2:	f106 0410 	add.w	r4, r6, #16
 80017d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017e2:	6823      	ldr	r3, [r4, #0]
 80017e4:	602b      	str	r3, [r5, #0]
 80017e6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017ea:	f7ff fb79 	bl	8000ee0 <NEXTION_SEND>
	  	 NEXTION_SEND(huart6, 0, state_of_charge1, status, myMessagex);
 80017ee:	4b36      	ldr	r3, [pc, #216]	; (80018c8 <start_nextion+0x28c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4e33      	ldr	r6, [pc, #204]	; (80018c0 <start_nextion+0x284>)
 80017f4:	4a35      	ldr	r2, [pc, #212]	; (80018cc <start_nextion+0x290>)
 80017f6:	9210      	str	r2, [sp, #64]	; 0x40
 80017f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80017fa:	4b3a      	ldr	r3, [pc, #232]	; (80018e4 <start_nextion+0x2a8>)
 80017fc:	930e      	str	r3, [sp, #56]	; 0x38
 80017fe:	2300      	movs	r3, #0
 8001800:	930d      	str	r3, [sp, #52]	; 0x34
 8001802:	466d      	mov	r5, sp
 8001804:	f106 0410 	add.w	r4, r6, #16
 8001808:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800180a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800180c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800180e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001810:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001812:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001814:	6823      	ldr	r3, [r4, #0]
 8001816:	602b      	str	r3, [r5, #0]
 8001818:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800181c:	f7ff fb60 	bl	8000ee0 <NEXTION_SEND>
	  	 NEXTION_SEND(huart6, 0, state_of_charge2, status, myMessagex);
 8001820:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <start_nextion+0x28c>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4e26      	ldr	r6, [pc, #152]	; (80018c0 <start_nextion+0x284>)
 8001826:	4a29      	ldr	r2, [pc, #164]	; (80018cc <start_nextion+0x290>)
 8001828:	9210      	str	r2, [sp, #64]	; 0x40
 800182a:	930f      	str	r3, [sp, #60]	; 0x3c
 800182c:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <start_nextion+0x2ac>)
 800182e:	930e      	str	r3, [sp, #56]	; 0x38
 8001830:	2300      	movs	r3, #0
 8001832:	930d      	str	r3, [sp, #52]	; 0x34
 8001834:	466d      	mov	r5, sp
 8001836:	f106 0410 	add.w	r4, r6, #16
 800183a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800183c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001846:	6823      	ldr	r3, [r4, #0]
 8001848:	602b      	str	r3, [r5, #0]
 800184a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800184e:	f7ff fb47 	bl	8000ee0 <NEXTION_SEND>
	  	 NEXTION_SEND(huart6, 2, charge_time, number, myMessagex);
 8001852:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <start_nextion+0x274>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4e1a      	ldr	r6, [pc, #104]	; (80018c0 <start_nextion+0x284>)
 8001858:	4a1c      	ldr	r2, [pc, #112]	; (80018cc <start_nextion+0x290>)
 800185a:	9210      	str	r2, [sp, #64]	; 0x40
 800185c:	930f      	str	r3, [sp, #60]	; 0x3c
 800185e:	4b23      	ldr	r3, [pc, #140]	; (80018ec <start_nextion+0x2b0>)
 8001860:	930e      	str	r3, [sp, #56]	; 0x38
 8001862:	2302      	movs	r3, #2
 8001864:	930d      	str	r3, [sp, #52]	; 0x34
 8001866:	466d      	mov	r5, sp
 8001868:	f106 0410 	add.w	r4, r6, #16
 800186c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800186e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001874:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001876:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	602b      	str	r3, [r5, #0]
 800187c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001880:	f7ff fb2e 	bl	8000ee0 <NEXTION_SEND>
	  	 NEXTION_SEND(huart6, 0, state_of_charge3, status, myMessagex);
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <start_nextion+0x28c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4e0d      	ldr	r6, [pc, #52]	; (80018c0 <start_nextion+0x284>)
 800188a:	4a10      	ldr	r2, [pc, #64]	; (80018cc <start_nextion+0x290>)
 800188c:	9210      	str	r2, [sp, #64]	; 0x40
 800188e:	930f      	str	r3, [sp, #60]	; 0x3c
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <start_nextion+0x2b4>)
 8001892:	930e      	str	r3, [sp, #56]	; 0x38
 8001894:	2300      	movs	r3, #0
 8001896:	930d      	str	r3, [sp, #52]	; 0x34
 8001898:	466d      	mov	r5, sp
 800189a:	f106 0410 	add.w	r4, r6, #16
 800189e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018aa:	6823      	ldr	r3, [r4, #0]
 80018ac:	e022      	b.n	80018f4 <start_nextion+0x2b8>
 80018ae:	bf00      	nop
 80018b0:	20000000 	.word	0x20000000
 80018b4:	08009d1c 	.word	0x08009d1c
 80018b8:	08009cd0 	.word	0x08009cd0
 80018bc:	08009cd4 	.word	0x08009cd4
 80018c0:	200003fc 	.word	0x200003fc
 80018c4:	08009ce0 	.word	0x08009ce0
 80018c8:	20000160 	.word	0x20000160
 80018cc:	200001c4 	.word	0x200001c4
 80018d0:	08009ce4 	.word	0x08009ce4
 80018d4:	08009ce8 	.word	0x08009ce8
 80018d8:	08009cec 	.word	0x08009cec
 80018dc:	08009cf0 	.word	0x08009cf0
 80018e0:	08009cf4 	.word	0x08009cf4
 80018e4:	08009cf8 	.word	0x08009cf8
 80018e8:	08009cfc 	.word	0x08009cfc
 80018ec:	08009d00 	.word	0x08009d00
 80018f0:	08009d04 	.word	0x08009d04
 80018f4:	602b      	str	r3, [r5, #0]
 80018f6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80018fa:	f7ff faf1 	bl	8000ee0 <NEXTION_SEND>
	  	 NEXTION_SEND(huart6, 0, left_arrow, status, myMessagex);
 80018fe:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <start_nextion+0x3c8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4e41      	ldr	r6, [pc, #260]	; (8001a08 <start_nextion+0x3cc>)
 8001904:	4a41      	ldr	r2, [pc, #260]	; (8001a0c <start_nextion+0x3d0>)
 8001906:	9210      	str	r2, [sp, #64]	; 0x40
 8001908:	930f      	str	r3, [sp, #60]	; 0x3c
 800190a:	4b41      	ldr	r3, [pc, #260]	; (8001a10 <start_nextion+0x3d4>)
 800190c:	930e      	str	r3, [sp, #56]	; 0x38
 800190e:	2300      	movs	r3, #0
 8001910:	930d      	str	r3, [sp, #52]	; 0x34
 8001912:	466d      	mov	r5, sp
 8001914:	f106 0410 	add.w	r4, r6, #16
 8001918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800191a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800191c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800191e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001920:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	602b      	str	r3, [r5, #0]
 8001928:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800192c:	f7ff fad8 	bl	8000ee0 <NEXTION_SEND>
	  	 NEXTION_SEND(huart6, 0, right_arrow, status, myMessagex);
 8001930:	4b34      	ldr	r3, [pc, #208]	; (8001a04 <start_nextion+0x3c8>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4e34      	ldr	r6, [pc, #208]	; (8001a08 <start_nextion+0x3cc>)
 8001936:	4a35      	ldr	r2, [pc, #212]	; (8001a0c <start_nextion+0x3d0>)
 8001938:	9210      	str	r2, [sp, #64]	; 0x40
 800193a:	930f      	str	r3, [sp, #60]	; 0x3c
 800193c:	4b35      	ldr	r3, [pc, #212]	; (8001a14 <start_nextion+0x3d8>)
 800193e:	930e      	str	r3, [sp, #56]	; 0x38
 8001940:	2300      	movs	r3, #0
 8001942:	930d      	str	r3, [sp, #52]	; 0x34
 8001944:	466d      	mov	r5, sp
 8001946:	f106 0410 	add.w	r4, r6, #16
 800194a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800194c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800194e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001956:	6823      	ldr	r3, [r4, #0]
 8001958:	602b      	str	r3, [r5, #0]
 800195a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800195e:	f7ff fabf 	bl	8000ee0 <NEXTION_SEND>
	  	 NEXTION_SEND(huart6, 0, horn, status, myMessagex);
 8001962:	4b28      	ldr	r3, [pc, #160]	; (8001a04 <start_nextion+0x3c8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4e28      	ldr	r6, [pc, #160]	; (8001a08 <start_nextion+0x3cc>)
 8001968:	4a28      	ldr	r2, [pc, #160]	; (8001a0c <start_nextion+0x3d0>)
 800196a:	9210      	str	r2, [sp, #64]	; 0x40
 800196c:	930f      	str	r3, [sp, #60]	; 0x3c
 800196e:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <start_nextion+0x3dc>)
 8001970:	930e      	str	r3, [sp, #56]	; 0x38
 8001972:	2300      	movs	r3, #0
 8001974:	930d      	str	r3, [sp, #52]	; 0x34
 8001976:	466d      	mov	r5, sp
 8001978:	f106 0410 	add.w	r4, r6, #16
 800197c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800197e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001988:	6823      	ldr	r3, [r4, #0]
 800198a:	602b      	str	r3, [r5, #0]
 800198c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001990:	f7ff faa6 	bl	8000ee0 <NEXTION_SEND>
	  	 NEXTION_SEND(huart6, 0, lights, status, myMessagex);
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <start_nextion+0x3c8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4e1b      	ldr	r6, [pc, #108]	; (8001a08 <start_nextion+0x3cc>)
 800199a:	4a1c      	ldr	r2, [pc, #112]	; (8001a0c <start_nextion+0x3d0>)
 800199c:	9210      	str	r2, [sp, #64]	; 0x40
 800199e:	930f      	str	r3, [sp, #60]	; 0x3c
 80019a0:	4b1e      	ldr	r3, [pc, #120]	; (8001a1c <start_nextion+0x3e0>)
 80019a2:	930e      	str	r3, [sp, #56]	; 0x38
 80019a4:	2300      	movs	r3, #0
 80019a6:	930d      	str	r3, [sp, #52]	; 0x34
 80019a8:	466d      	mov	r5, sp
 80019aa:	f106 0410 	add.w	r4, r6, #16
 80019ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	602b      	str	r3, [r5, #0]
 80019be:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80019c2:	f7ff fa8d 	bl	8000ee0 <NEXTION_SEND>
	  	 NEXTION_SEND(huart6, 0, wiper, status, myMessagex);
 80019c6:	4b0f      	ldr	r3, [pc, #60]	; (8001a04 <start_nextion+0x3c8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4e0f      	ldr	r6, [pc, #60]	; (8001a08 <start_nextion+0x3cc>)
 80019cc:	4a0f      	ldr	r2, [pc, #60]	; (8001a0c <start_nextion+0x3d0>)
 80019ce:	9210      	str	r2, [sp, #64]	; 0x40
 80019d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <start_nextion+0x3e4>)
 80019d4:	930e      	str	r3, [sp, #56]	; 0x38
 80019d6:	2300      	movs	r3, #0
 80019d8:	930d      	str	r3, [sp, #52]	; 0x34
 80019da:	466d      	mov	r5, sp
 80019dc:	f106 0410 	add.w	r4, r6, #16
 80019e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	602b      	str	r3, [r5, #0]
 80019f0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80019f4:	f7ff fa74 	bl	8000ee0 <NEXTION_SEND>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 80019f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019fc:	4809      	ldr	r0, [pc, #36]	; (8001a24 <start_nextion+0x3e8>)
 80019fe:	f002 fb30 	bl	8004062 <HAL_GPIO_TogglePin>
  {
 8001a02:	e61f      	b.n	8001644 <start_nextion+0x8>
 8001a04:	20000160 	.word	0x20000160
 8001a08:	200003fc 	.word	0x200003fc
 8001a0c:	200001c4 	.word	0x200001c4
 8001a10:	08009d08 	.word	0x08009d08
 8001a14:	08009d0c 	.word	0x08009d0c
 8001a18:	08009d10 	.word	0x08009d10
 8001a1c:	08009d14 	.word	0x08009d14
 8001a20:	08009d18 	.word	0x08009d18
 8001a24:	40020c00 	.word	0x40020c00

08001a28 <start_rf>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_rf */
void start_rf(void *argument)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_rf */
  /* Infinite loop */
ecar.direction='+';
 8001a30:	4b10      	ldr	r3, [pc, #64]	; (8001a74 <start_rf+0x4c>)
 8001a32:	222b      	movs	r2, #43	; 0x2b
 8001a34:	601a      	str	r2, [r3, #0]
  for(;;)
  {

	//sprintf(arr,"%c%c%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%c1",ecar.direction,ci2a(ecar.speed_for_rf),cf2a(ecar.battery_voltage[0],tempp[0]),cf2a(ecar.battery_voltage[1],tempp[1]),cf2a(ecar.battery_voltage[2],tempp[2]),cf2a(ecar.battery_voltage[3],tempp[3]),cf2a(ecar.battery_voltage[4],tempp[4]),cf2a(ecar.battery_voltage[5],tempp[5]),cf2a(ecar.battery_voltage[6],tempp[6]),cf2a(ecar.battery_voltage[7],tempp[7]),cf2a(ecar.battery_voltage[8],tempp[8]),cf2a(ecar.battery_voltage[9],tempp[9]),cf2a(ecar.battery_voltage[10],tempp[10]),cf2a(ecar.battery_voltage[11],tempp[11]),cf2a(ecar.battery_voltage[12],tempp[12]),cf2a(ecar.battery_voltage[13],tempp[13]),cf2a(ecar.battery_voltage[14],tempp[14]),cf2a(ecar.battery_voltage[15],tempp[15]),cf2a(ecar.battery_voltage[16],tempp[16]),cf2a(ecar.battery_voltage[17],tempp[17]),cf2a(ecar.battery_voltage[18],tempp[18]),cf2a(ecar.battery_voltage[19],tempp[19]),cf2a(ecar.battery_voltage[20],tempp[20]),cf2a(ecar.battery_voltage[21],tempp[21]),cf2a(ecar.battery_voltage[22],tempp[22]),cf2a(ecar.battery_voltage[23],tempp[23]),ci2a(ecar.battery_temparature));
	// deneme();
	  if(prepare_data()){
 8001a36:	f000 fbeb 	bl	8002210 <prepare_data>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d0fa      	beq.n	8001a36 <start_rf+0xe>
		 HAL_UART_Transmit(&huart2, (uint8_t*)arr, strlen(arr), 1000);
 8001a40:	480d      	ldr	r0, [pc, #52]	; (8001a78 <start_rf+0x50>)
 8001a42:	f7fe fbc5 	bl	80001d0 <strlen>
 8001a46:	4603      	mov	r3, r0
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a4e:	490a      	ldr	r1, [pc, #40]	; (8001a78 <start_rf+0x50>)
 8001a50:	480a      	ldr	r0, [pc, #40]	; (8001a7c <start_rf+0x54>)
 8001a52:	f004 fb32 	bl	80060ba <HAL_UART_Transmit>
		 memset(arr, 0, 100 * sizeof(char));
 8001a56:	2264      	movs	r2, #100	; 0x64
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4807      	ldr	r0, [pc, #28]	; (8001a78 <start_rf+0x50>)
 8001a5c:	f007 fc6e 	bl	800933c <memset>
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001a60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a64:	4806      	ldr	r0, [pc, #24]	; (8001a80 <start_rf+0x58>)
 8001a66:	f002 fafc 	bl	8004062 <HAL_GPIO_TogglePin>
		 HAL_Delay(50);
 8001a6a:	2032      	movs	r0, #50	; 0x32
 8001a6c:	f000 ff6c 	bl	8002948 <HAL_Delay>
	  if(prepare_data()){
 8001a70:	e7e1      	b.n	8001a36 <start_rf+0xe>
 8001a72:	bf00      	nop
 8001a74:	200001f8 	.word	0x200001f8
 8001a78:	200000fc 	.word	0x200000fc
 8001a7c:	200003b8 	.word	0x200003b8
 8001a80:	40020c00 	.word	0x40020c00

08001a84 <start_can>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_start_can */
void start_can(void *argument)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN start_can */
	int flag_can=0;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	  if(!(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, RxData))){
 8001a90:	4bbd      	ldr	r3, [pc, #756]	; (8001d88 <start_can+0x304>)
 8001a92:	4abe      	ldr	r2, [pc, #760]	; (8001d8c <start_can+0x308>)
 8001a94:	2100      	movs	r1, #0
 8001a96:	48be      	ldr	r0, [pc, #760]	; (8001d90 <start_can+0x30c>)
 8001a98:	f001 fa75 	bl	8002f86 <HAL_CAN_GetRxMessage>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f6      	bne.n	8001a90 <start_can+0xc>
	  switch (pRxHeader.StdId) {
 8001aa2:	4bba      	ldr	r3, [pc, #744]	; (8001d8c <start_can+0x308>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	3b25      	subs	r3, #37	; 0x25
 8001aa8:	2b05      	cmp	r3, #5
 8001aaa:	f200 81bd 	bhi.w	8001e28 <start_can+0x3a4>
 8001aae:	a201      	add	r2, pc, #4	; (adr r2, 8001ab4 <start_can+0x30>)
 8001ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab4:	08001acd 	.word	0x08001acd
 8001ab8:	08001b59 	.word	0x08001b59
 8001abc:	08001be5 	.word	0x08001be5
 8001ac0:	08001c71 	.word	0x08001c71
 8001ac4:	08001cfd 	.word	0x08001cfd
 8001ac8:	08001d9d 	.word	0x08001d9d
		case 37:
			ecar.battery_voltage[0]=RxData[0]*100+RxData[1];
 8001acc:	4bae      	ldr	r3, [pc, #696]	; (8001d88 <start_can+0x304>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	2364      	movs	r3, #100	; 0x64
 8001ad4:	fb02 f303 	mul.w	r3, r2, r3
 8001ad8:	4aab      	ldr	r2, [pc, #684]	; (8001d88 <start_can+0x304>)
 8001ada:	7852      	ldrb	r2, [r2, #1]
 8001adc:	4413      	add	r3, r2
 8001ade:	ee07 3a90 	vmov	s15, r3
 8001ae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae6:	4bab      	ldr	r3, [pc, #684]	; (8001d94 <start_can+0x310>)
 8001ae8:	edc3 7a02 	vstr	s15, [r3, #8]
			ecar.battery_voltage[1]=RxData[2]*100+RxData[3];
 8001aec:	4ba6      	ldr	r3, [pc, #664]	; (8001d88 <start_can+0x304>)
 8001aee:	789b      	ldrb	r3, [r3, #2]
 8001af0:	461a      	mov	r2, r3
 8001af2:	2364      	movs	r3, #100	; 0x64
 8001af4:	fb02 f303 	mul.w	r3, r2, r3
 8001af8:	4aa3      	ldr	r2, [pc, #652]	; (8001d88 <start_can+0x304>)
 8001afa:	78d2      	ldrb	r2, [r2, #3]
 8001afc:	4413      	add	r3, r2
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b06:	4ba3      	ldr	r3, [pc, #652]	; (8001d94 <start_can+0x310>)
 8001b08:	edc3 7a03 	vstr	s15, [r3, #12]
			ecar.battery_voltage[2]=RxData[4]*100+RxData[5];
 8001b0c:	4b9e      	ldr	r3, [pc, #632]	; (8001d88 <start_can+0x304>)
 8001b0e:	791b      	ldrb	r3, [r3, #4]
 8001b10:	461a      	mov	r2, r3
 8001b12:	2364      	movs	r3, #100	; 0x64
 8001b14:	fb02 f303 	mul.w	r3, r2, r3
 8001b18:	4a9b      	ldr	r2, [pc, #620]	; (8001d88 <start_can+0x304>)
 8001b1a:	7952      	ldrb	r2, [r2, #5]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	ee07 3a90 	vmov	s15, r3
 8001b22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b26:	4b9b      	ldr	r3, [pc, #620]	; (8001d94 <start_can+0x310>)
 8001b28:	edc3 7a04 	vstr	s15, [r3, #16]
			ecar.battery_voltage[3]=RxData[6]*100+RxData[7];
 8001b2c:	4b96      	ldr	r3, [pc, #600]	; (8001d88 <start_can+0x304>)
 8001b2e:	799b      	ldrb	r3, [r3, #6]
 8001b30:	461a      	mov	r2, r3
 8001b32:	2364      	movs	r3, #100	; 0x64
 8001b34:	fb02 f303 	mul.w	r3, r2, r3
 8001b38:	4a93      	ldr	r2, [pc, #588]	; (8001d88 <start_can+0x304>)
 8001b3a:	79d2      	ldrb	r2, [r2, #7]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	ee07 3a90 	vmov	s15, r3
 8001b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b46:	4b93      	ldr	r3, [pc, #588]	; (8001d94 <start_can+0x310>)
 8001b48:	edc3 7a05 	vstr	s15, [r3, #20]
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001b4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b50:	4891      	ldr	r0, [pc, #580]	; (8001d98 <start_can+0x314>)
 8001b52:	f002 fa86 	bl	8004062 <HAL_GPIO_TogglePin>
			break;
 8001b56:	e167      	b.n	8001e28 <start_can+0x3a4>
		case 38:
			ecar.battery_voltage[4]=RxData[0]*100+RxData[1];
 8001b58:	4b8b      	ldr	r3, [pc, #556]	; (8001d88 <start_can+0x304>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	2364      	movs	r3, #100	; 0x64
 8001b60:	fb02 f303 	mul.w	r3, r2, r3
 8001b64:	4a88      	ldr	r2, [pc, #544]	; (8001d88 <start_can+0x304>)
 8001b66:	7852      	ldrb	r2, [r2, #1]
 8001b68:	4413      	add	r3, r2
 8001b6a:	ee07 3a90 	vmov	s15, r3
 8001b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b72:	4b88      	ldr	r3, [pc, #544]	; (8001d94 <start_can+0x310>)
 8001b74:	edc3 7a06 	vstr	s15, [r3, #24]
			ecar.battery_voltage[5]=RxData[2]*100+RxData[3];
 8001b78:	4b83      	ldr	r3, [pc, #524]	; (8001d88 <start_can+0x304>)
 8001b7a:	789b      	ldrb	r3, [r3, #2]
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	2364      	movs	r3, #100	; 0x64
 8001b80:	fb02 f303 	mul.w	r3, r2, r3
 8001b84:	4a80      	ldr	r2, [pc, #512]	; (8001d88 <start_can+0x304>)
 8001b86:	78d2      	ldrb	r2, [r2, #3]
 8001b88:	4413      	add	r3, r2
 8001b8a:	ee07 3a90 	vmov	s15, r3
 8001b8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b92:	4b80      	ldr	r3, [pc, #512]	; (8001d94 <start_can+0x310>)
 8001b94:	edc3 7a07 	vstr	s15, [r3, #28]
			ecar.battery_voltage[6]=RxData[4]*100+RxData[5];
 8001b98:	4b7b      	ldr	r3, [pc, #492]	; (8001d88 <start_can+0x304>)
 8001b9a:	791b      	ldrb	r3, [r3, #4]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	2364      	movs	r3, #100	; 0x64
 8001ba0:	fb02 f303 	mul.w	r3, r2, r3
 8001ba4:	4a78      	ldr	r2, [pc, #480]	; (8001d88 <start_can+0x304>)
 8001ba6:	7952      	ldrb	r2, [r2, #5]
 8001ba8:	4413      	add	r3, r2
 8001baa:	ee07 3a90 	vmov	s15, r3
 8001bae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb2:	4b78      	ldr	r3, [pc, #480]	; (8001d94 <start_can+0x310>)
 8001bb4:	edc3 7a08 	vstr	s15, [r3, #32]
			ecar.battery_voltage[7]=RxData[6]*100+RxData[7];
 8001bb8:	4b73      	ldr	r3, [pc, #460]	; (8001d88 <start_can+0x304>)
 8001bba:	799b      	ldrb	r3, [r3, #6]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2364      	movs	r3, #100	; 0x64
 8001bc0:	fb02 f303 	mul.w	r3, r2, r3
 8001bc4:	4a70      	ldr	r2, [pc, #448]	; (8001d88 <start_can+0x304>)
 8001bc6:	79d2      	ldrb	r2, [r2, #7]
 8001bc8:	4413      	add	r3, r2
 8001bca:	ee07 3a90 	vmov	s15, r3
 8001bce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bd2:	4b70      	ldr	r3, [pc, #448]	; (8001d94 <start_can+0x310>)
 8001bd4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bdc:	486e      	ldr	r0, [pc, #440]	; (8001d98 <start_can+0x314>)
 8001bde:	f002 fa40 	bl	8004062 <HAL_GPIO_TogglePin>
			break;
 8001be2:	e121      	b.n	8001e28 <start_can+0x3a4>
		case 39:
			ecar.battery_voltage[8]=RxData[0]*100+RxData[1];
 8001be4:	4b68      	ldr	r3, [pc, #416]	; (8001d88 <start_can+0x304>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	2364      	movs	r3, #100	; 0x64
 8001bec:	fb02 f303 	mul.w	r3, r2, r3
 8001bf0:	4a65      	ldr	r2, [pc, #404]	; (8001d88 <start_can+0x304>)
 8001bf2:	7852      	ldrb	r2, [r2, #1]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	ee07 3a90 	vmov	s15, r3
 8001bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bfe:	4b65      	ldr	r3, [pc, #404]	; (8001d94 <start_can+0x310>)
 8001c00:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			ecar.battery_voltage[9]=RxData[2]*100+RxData[3];
 8001c04:	4b60      	ldr	r3, [pc, #384]	; (8001d88 <start_can+0x304>)
 8001c06:	789b      	ldrb	r3, [r3, #2]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	2364      	movs	r3, #100	; 0x64
 8001c0c:	fb02 f303 	mul.w	r3, r2, r3
 8001c10:	4a5d      	ldr	r2, [pc, #372]	; (8001d88 <start_can+0x304>)
 8001c12:	78d2      	ldrb	r2, [r2, #3]
 8001c14:	4413      	add	r3, r2
 8001c16:	ee07 3a90 	vmov	s15, r3
 8001c1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c1e:	4b5d      	ldr	r3, [pc, #372]	; (8001d94 <start_can+0x310>)
 8001c20:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			ecar.battery_voltage[10]=RxData[4]*100+RxData[5];
 8001c24:	4b58      	ldr	r3, [pc, #352]	; (8001d88 <start_can+0x304>)
 8001c26:	791b      	ldrb	r3, [r3, #4]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	2364      	movs	r3, #100	; 0x64
 8001c2c:	fb02 f303 	mul.w	r3, r2, r3
 8001c30:	4a55      	ldr	r2, [pc, #340]	; (8001d88 <start_can+0x304>)
 8001c32:	7952      	ldrb	r2, [r2, #5]
 8001c34:	4413      	add	r3, r2
 8001c36:	ee07 3a90 	vmov	s15, r3
 8001c3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c3e:	4b55      	ldr	r3, [pc, #340]	; (8001d94 <start_can+0x310>)
 8001c40:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			ecar.battery_voltage[11]=RxData[6]*100+RxData[7];
 8001c44:	4b50      	ldr	r3, [pc, #320]	; (8001d88 <start_can+0x304>)
 8001c46:	799b      	ldrb	r3, [r3, #6]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2364      	movs	r3, #100	; 0x64
 8001c4c:	fb02 f303 	mul.w	r3, r2, r3
 8001c50:	4a4d      	ldr	r2, [pc, #308]	; (8001d88 <start_can+0x304>)
 8001c52:	79d2      	ldrb	r2, [r2, #7]
 8001c54:	4413      	add	r3, r2
 8001c56:	ee07 3a90 	vmov	s15, r3
 8001c5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c5e:	4b4d      	ldr	r3, [pc, #308]	; (8001d94 <start_can+0x310>)
 8001c60:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001c64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c68:	484b      	ldr	r0, [pc, #300]	; (8001d98 <start_can+0x314>)
 8001c6a:	f002 f9fa 	bl	8004062 <HAL_GPIO_TogglePin>
			break;
 8001c6e:	e0db      	b.n	8001e28 <start_can+0x3a4>
		case 40:
			ecar.battery_voltage[12]=RxData[0]*100+RxData[1];
 8001c70:	4b45      	ldr	r3, [pc, #276]	; (8001d88 <start_can+0x304>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	2364      	movs	r3, #100	; 0x64
 8001c78:	fb02 f303 	mul.w	r3, r2, r3
 8001c7c:	4a42      	ldr	r2, [pc, #264]	; (8001d88 <start_can+0x304>)
 8001c7e:	7852      	ldrb	r2, [r2, #1]
 8001c80:	4413      	add	r3, r2
 8001c82:	ee07 3a90 	vmov	s15, r3
 8001c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c8a:	4b42      	ldr	r3, [pc, #264]	; (8001d94 <start_can+0x310>)
 8001c8c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			ecar.battery_voltage[13]=RxData[2]*100+RxData[3];
 8001c90:	4b3d      	ldr	r3, [pc, #244]	; (8001d88 <start_can+0x304>)
 8001c92:	789b      	ldrb	r3, [r3, #2]
 8001c94:	461a      	mov	r2, r3
 8001c96:	2364      	movs	r3, #100	; 0x64
 8001c98:	fb02 f303 	mul.w	r3, r2, r3
 8001c9c:	4a3a      	ldr	r2, [pc, #232]	; (8001d88 <start_can+0x304>)
 8001c9e:	78d2      	ldrb	r2, [r2, #3]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	ee07 3a90 	vmov	s15, r3
 8001ca6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001caa:	4b3a      	ldr	r3, [pc, #232]	; (8001d94 <start_can+0x310>)
 8001cac:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			ecar.battery_voltage[14]=RxData[4]*100+RxData[5];
 8001cb0:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <start_can+0x304>)
 8001cb2:	791b      	ldrb	r3, [r3, #4]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2364      	movs	r3, #100	; 0x64
 8001cb8:	fb02 f303 	mul.w	r3, r2, r3
 8001cbc:	4a32      	ldr	r2, [pc, #200]	; (8001d88 <start_can+0x304>)
 8001cbe:	7952      	ldrb	r2, [r2, #5]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	ee07 3a90 	vmov	s15, r3
 8001cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cca:	4b32      	ldr	r3, [pc, #200]	; (8001d94 <start_can+0x310>)
 8001ccc:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			ecar.battery_voltage[15]=RxData[6]*100+RxData[7];
 8001cd0:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <start_can+0x304>)
 8001cd2:	799b      	ldrb	r3, [r3, #6]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	2364      	movs	r3, #100	; 0x64
 8001cd8:	fb02 f303 	mul.w	r3, r2, r3
 8001cdc:	4a2a      	ldr	r2, [pc, #168]	; (8001d88 <start_can+0x304>)
 8001cde:	79d2      	ldrb	r2, [r2, #7]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	ee07 3a90 	vmov	s15, r3
 8001ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cea:	4b2a      	ldr	r3, [pc, #168]	; (8001d94 <start_can+0x310>)
 8001cec:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001cf0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cf4:	4828      	ldr	r0, [pc, #160]	; (8001d98 <start_can+0x314>)
 8001cf6:	f002 f9b4 	bl	8004062 <HAL_GPIO_TogglePin>
			break;
 8001cfa:	e095      	b.n	8001e28 <start_can+0x3a4>
		case 41:
			ecar.battery_voltage[16]=RxData[0]*100+RxData[1];
 8001cfc:	4b22      	ldr	r3, [pc, #136]	; (8001d88 <start_can+0x304>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	2364      	movs	r3, #100	; 0x64
 8001d04:	fb02 f303 	mul.w	r3, r2, r3
 8001d08:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <start_can+0x304>)
 8001d0a:	7852      	ldrb	r2, [r2, #1]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d16:	4b1f      	ldr	r3, [pc, #124]	; (8001d94 <start_can+0x310>)
 8001d18:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			ecar.battery_voltage[17]=RxData[2]*100+RxData[3];
 8001d1c:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <start_can+0x304>)
 8001d1e:	789b      	ldrb	r3, [r3, #2]
 8001d20:	461a      	mov	r2, r3
 8001d22:	2364      	movs	r3, #100	; 0x64
 8001d24:	fb02 f303 	mul.w	r3, r2, r3
 8001d28:	4a17      	ldr	r2, [pc, #92]	; (8001d88 <start_can+0x304>)
 8001d2a:	78d2      	ldrb	r2, [r2, #3]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	ee07 3a90 	vmov	s15, r3
 8001d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d36:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <start_can+0x310>)
 8001d38:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			ecar.battery_voltage[18]=RxData[4]*100+RxData[5];
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <start_can+0x304>)
 8001d3e:	791b      	ldrb	r3, [r3, #4]
 8001d40:	461a      	mov	r2, r3
 8001d42:	2364      	movs	r3, #100	; 0x64
 8001d44:	fb02 f303 	mul.w	r3, r2, r3
 8001d48:	4a0f      	ldr	r2, [pc, #60]	; (8001d88 <start_can+0x304>)
 8001d4a:	7952      	ldrb	r2, [r2, #5]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	ee07 3a90 	vmov	s15, r3
 8001d52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d56:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <start_can+0x310>)
 8001d58:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			ecar.battery_voltage[19]=RxData[6]*100+RxData[7];
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <start_can+0x304>)
 8001d5e:	799b      	ldrb	r3, [r3, #6]
 8001d60:	461a      	mov	r2, r3
 8001d62:	2364      	movs	r3, #100	; 0x64
 8001d64:	fb02 f303 	mul.w	r3, r2, r3
 8001d68:	4a07      	ldr	r2, [pc, #28]	; (8001d88 <start_can+0x304>)
 8001d6a:	79d2      	ldrb	r2, [r2, #7]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <start_can+0x310>)
 8001d78:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001d7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d80:	4805      	ldr	r0, [pc, #20]	; (8001d98 <start_can+0x314>)
 8001d82:	f002 f96e 	bl	8004062 <HAL_GPIO_TogglePin>
			break;
 8001d86:	e04f      	b.n	8001e28 <start_can+0x3a4>
 8001d88:	200000f4 	.word	0x200000f4
 8001d8c:	200000ac 	.word	0x200000ac
 8001d90:	2000028c 	.word	0x2000028c
 8001d94:	200001f8 	.word	0x200001f8
 8001d98:	40020c00 	.word	0x40020c00
		case 42:
			ecar.battery_voltage[20]=RxData[0]*100+RxData[1];
 8001d9c:	4b2d      	ldr	r3, [pc, #180]	; (8001e54 <start_can+0x3d0>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	2364      	movs	r3, #100	; 0x64
 8001da4:	fb02 f303 	mul.w	r3, r2, r3
 8001da8:	4a2a      	ldr	r2, [pc, #168]	; (8001e54 <start_can+0x3d0>)
 8001daa:	7852      	ldrb	r2, [r2, #1]
 8001dac:	4413      	add	r3, r2
 8001dae:	ee07 3a90 	vmov	s15, r3
 8001db2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001db6:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <start_can+0x3d4>)
 8001db8:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			ecar.battery_voltage[21]=RxData[2]*100+RxData[3];
 8001dbc:	4b25      	ldr	r3, [pc, #148]	; (8001e54 <start_can+0x3d0>)
 8001dbe:	789b      	ldrb	r3, [r3, #2]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2364      	movs	r3, #100	; 0x64
 8001dc4:	fb02 f303 	mul.w	r3, r2, r3
 8001dc8:	4a22      	ldr	r2, [pc, #136]	; (8001e54 <start_can+0x3d0>)
 8001dca:	78d2      	ldrb	r2, [r2, #3]
 8001dcc:	4413      	add	r3, r2
 8001dce:	ee07 3a90 	vmov	s15, r3
 8001dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dd6:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <start_can+0x3d4>)
 8001dd8:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			ecar.battery_voltage[22]=RxData[4]*100+RxData[5];
 8001ddc:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <start_can+0x3d0>)
 8001dde:	791b      	ldrb	r3, [r3, #4]
 8001de0:	461a      	mov	r2, r3
 8001de2:	2364      	movs	r3, #100	; 0x64
 8001de4:	fb02 f303 	mul.w	r3, r2, r3
 8001de8:	4a1a      	ldr	r2, [pc, #104]	; (8001e54 <start_can+0x3d0>)
 8001dea:	7952      	ldrb	r2, [r2, #5]
 8001dec:	4413      	add	r3, r2
 8001dee:	ee07 3a90 	vmov	s15, r3
 8001df2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <start_can+0x3d4>)
 8001df8:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			ecar.battery_voltage[23]=RxData[6]*100+RxData[7];
 8001dfc:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <start_can+0x3d0>)
 8001dfe:	799b      	ldrb	r3, [r3, #6]
 8001e00:	461a      	mov	r2, r3
 8001e02:	2364      	movs	r3, #100	; 0x64
 8001e04:	fb02 f303 	mul.w	r3, r2, r3
 8001e08:	4a12      	ldr	r2, [pc, #72]	; (8001e54 <start_can+0x3d0>)
 8001e0a:	79d2      	ldrb	r2, [r2, #7]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	ee07 3a90 	vmov	s15, r3
 8001e12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <start_can+0x3d4>)
 8001e18:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001e1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e20:	480e      	ldr	r0, [pc, #56]	; (8001e5c <start_can+0x3d8>)
 8001e22:	f002 f91e 	bl	8004062 <HAL_GPIO_TogglePin>
			break;
 8001e26:	bf00      	nop
	  }
	  uint8_t can_feedback[1];can_feedback[0]=pRxHeader.StdId;
 8001e28:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <start_can+0x3dc>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	723b      	strb	r3, [r7, #8]
	  if(!(HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, can_feedback, &pTxMailbox))){
 8001e30:	f107 0208 	add.w	r2, r7, #8
 8001e34:	4b0b      	ldr	r3, [pc, #44]	; (8001e64 <start_can+0x3e0>)
 8001e36:	490c      	ldr	r1, [pc, #48]	; (8001e68 <start_can+0x3e4>)
 8001e38:	480c      	ldr	r0, [pc, #48]	; (8001e6c <start_can+0x3e8>)
 8001e3a:	f000 ffc9 	bl	8002dd0 <HAL_CAN_AddTxMessage>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f47f ae25 	bne.w	8001a90 <start_can+0xc>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001e46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e4a:	4804      	ldr	r0, [pc, #16]	; (8001e5c <start_can+0x3d8>)
 8001e4c:	f002 f909 	bl	8004062 <HAL_GPIO_TogglePin>
	  if(!(HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, RxData))){
 8001e50:	e61e      	b.n	8001a90 <start_can+0xc>
 8001e52:	bf00      	nop
 8001e54:	200000f4 	.word	0x200000f4
 8001e58:	200001f8 	.word	0x200001f8
 8001e5c:	40020c00 	.word	0x40020c00
 8001e60:	200000ac 	.word	0x200000ac
 8001e64:	200000f0 	.word	0x200000f0
 8001e68:	20000094 	.word	0x20000094
 8001e6c:	2000028c 	.word	0x2000028c

08001e70 <right_signal_start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_right_signal_start */
void right_signal_start(void *argument)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN right_signal_start */
  /* Infinite loop */
  for(;;)
  {
	 while(ecar.RIGHT_SIGNAL_FLAG){
 8001e78:	e008      	b.n	8001e8c <right_signal_start+0x1c>
	    ecar.RIGHT_SIGNAL_FLAG=0;
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <right_signal_start+0x28>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		right_signal();
 8001e82:	f000 f91f 	bl	80020c4 <right_signal>
		osDelay(100);
 8001e86:	2064      	movs	r0, #100	; 0x64
 8001e88:	f004 fdac 	bl	80069e4 <osDelay>
	 while(ecar.RIGHT_SIGNAL_FLAG){
 8001e8c:	4b02      	ldr	r3, [pc, #8]	; (8001e98 <right_signal_start+0x28>)
 8001e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f1      	bne.n	8001e7a <right_signal_start+0xa>
 8001e96:	e7f9      	b.n	8001e8c <right_signal_start+0x1c>
 8001e98:	200001f8 	.word	0x200001f8

08001e9c <left_signal_signal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_left_signal_signal */
void left_signal_signal(void *argument)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN left_signal_signal */
  /* Infinite loop */
  for(;;)
  {
	  while(ecar.LEFT_SIGNAL_FLAG){
 8001ea4:	e008      	b.n	8001eb8 <left_signal_signal+0x1c>
	  	 ecar.LEFT_SIGNAL_FLAG=0;
 8001ea6:	4b07      	ldr	r3, [pc, #28]	; (8001ec4 <left_signal_signal+0x28>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	  	 left_signal();
 8001eae:	f000 f976 	bl	800219e <left_signal>
	  	 osDelay(100);
 8001eb2:	2064      	movs	r0, #100	; 0x64
 8001eb4:	f004 fd96 	bl	80069e4 <osDelay>
	  while(ecar.LEFT_SIGNAL_FLAG){
 8001eb8:	4b02      	ldr	r3, [pc, #8]	; (8001ec4 <left_signal_signal+0x28>)
 8001eba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f1      	bne.n	8001ea6 <left_signal_signal+0xa>
 8001ec2:	e7f9      	b.n	8001eb8 <left_signal_signal+0x1c>
 8001ec4:	200001f8 	.word	0x200001f8

08001ec8 <stop_signal_start>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_stop_signal_start */
void stop_signal_start(void *argument)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN stop_signal_start */
  /* Infinite loop */
  for(;;)
  {
	  while(ecar.STOP_SIGNAL_FLAG){
 8001ed0:	e008      	b.n	8001ee4 <stop_signal_start+0x1c>
	  	 ecar.STOP_SIGNAL_FLAG=0;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <stop_signal_start+0x28>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  	 stop_signal();
 8001eda:	f000 f932 	bl	8002142 <stop_signal>
	  	 osDelay(100);
 8001ede:	2064      	movs	r0, #100	; 0x64
 8001ee0:	f004 fd80 	bl	80069e4 <osDelay>
	  while(ecar.STOP_SIGNAL_FLAG){
 8001ee4:	4b02      	ldr	r3, [pc, #8]	; (8001ef0 <stop_signal_start+0x28>)
 8001ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f1      	bne.n	8001ed2 <stop_signal_start+0xa>
 8001eee:	e7f9      	b.n	8001ee4 <stop_signal_start+0x1c>
 8001ef0:	200001f8 	.word	0x200001f8

08001ef4 <HAL_TIM_PWM_PulseFinishedCallback>:
  }
  /* USER CODE END stop_signal_start */
}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim1, TIM_CHANNEL_1);
 8001efc:	2100      	movs	r1, #0
 8001efe:	4805      	ldr	r0, [pc, #20]	; (8001f14 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001f00:	f003 f836 	bl	8004f70 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8001f04:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	601a      	str	r2, [r3, #0]
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200002c8 	.word	0x200002c8
 8001f18:	2000050c 	.word	0x2000050c

08001f1c <Set_LED>:

void Set_LED (int LEDnum, int Red, int Green, int Blue)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
 8001f28:	603b      	str	r3, [r7, #0]
	LED_Data[LEDnum][0] = LEDnum;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	b2d9      	uxtb	r1, r3
 8001f2e:	4a11      	ldr	r2, [pc, #68]	; (8001f74 <Set_LED+0x58>)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
	LED_Data[LEDnum][1] = Green;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	b2d9      	uxtb	r1, r3
 8001f3a:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <Set_LED+0x58>)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	460a      	mov	r2, r1
 8001f44:	705a      	strb	r2, [r3, #1]
	LED_Data[LEDnum][2] = Red;
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	b2d9      	uxtb	r1, r3
 8001f4a:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <Set_LED+0x58>)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	460a      	mov	r2, r1
 8001f54:	709a      	strb	r2, [r3, #2]
	LED_Data[LEDnum][3] = Blue;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	b2d9      	uxtb	r1, r3
 8001f5a:	4a06      	ldr	r2, [pc, #24]	; (8001f74 <Set_LED+0x58>)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	460a      	mov	r2, r1
 8001f64:	70da      	strb	r2, [r3, #3]
}
 8001f66:	bf00      	nop
 8001f68:	3714      	adds	r7, #20
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	20000458 	.word	0x20000458

08001f78 <Set_Brightness>:



void Set_Brightness (int brightness)  // 0-45
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
		}
	}

#endif

}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <WS2812_Send>:

uint16_t pwmData[(24*MAX_LED)+50];

void WS2812_Send (void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b086      	sub	sp, #24
 8001f90:	af00      	add	r7, sp, #0
	uint32_t indx=0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
	uint32_t color;


	for (int i= 0; i<MAX_LED; i++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	e036      	b.n	800200a <WS2812_Send+0x7e>
	{
#if USE_BRIGHTNESS
		color = ((LED_Mod[i][1]<<16) | (LED_Mod[i][2]<<8) | (LED_Mod[i][3]));
#else
		color = ((LED_Data[i][1]<<16) | (LED_Data[i][2]<<8) | (LED_Data[i][3]));
 8001f9c:	4a2e      	ldr	r2, [pc, #184]	; (8002058 <WS2812_Send+0xcc>)
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	785b      	ldrb	r3, [r3, #1]
 8001fa6:	041a      	lsls	r2, r3, #16
 8001fa8:	492b      	ldr	r1, [pc, #172]	; (8002058 <WS2812_Send+0xcc>)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	789b      	ldrb	r3, [r3, #2]
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	4928      	ldr	r1, [pc, #160]	; (8002058 <WS2812_Send+0xcc>)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	78db      	ldrb	r3, [r3, #3]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	607b      	str	r3, [r7, #4]
#endif

		for (int i=23; i>=0; i--)
 8001fc4:	2317      	movs	r3, #23
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	e019      	b.n	8001ffe <WS2812_Send+0x72>
		{
			if (color&(1<<i))
 8001fca:	2201      	movs	r2, #1
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <WS2812_Send+0x5c>
			{
				pwmData[indx] = 70;  // 2/3 of 105
 8001fdc:	4a1f      	ldr	r2, [pc, #124]	; (800205c <WS2812_Send+0xd0>)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2146      	movs	r1, #70	; 0x46
 8001fe2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001fe6:	e004      	b.n	8001ff2 <WS2812_Send+0x66>
			}

			else pwmData[indx] = 35;  // 1/3 of 105
 8001fe8:	4a1c      	ldr	r2, [pc, #112]	; (800205c <WS2812_Send+0xd0>)
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	2123      	movs	r1, #35	; 0x23
 8001fee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			indx++;
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	617b      	str	r3, [r7, #20]
		for (int i=23; i>=0; i--)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	60fb      	str	r3, [r7, #12]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	dae2      	bge.n	8001fca <WS2812_Send+0x3e>
	for (int i= 0; i<MAX_LED; i++)
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	3301      	adds	r3, #1
 8002008:	613b      	str	r3, [r7, #16]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	2b2c      	cmp	r3, #44	; 0x2c
 800200e:	ddc5      	ble.n	8001f9c <WS2812_Send+0x10>
		}

	}

	for (int i=0; i<50; i++)
 8002010:	2300      	movs	r3, #0
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	e00a      	b.n	800202c <WS2812_Send+0xa0>
	{
		pwmData[indx] = 0;
 8002016:	4a11      	ldr	r2, [pc, #68]	; (800205c <WS2812_Send+0xd0>)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2100      	movs	r1, #0
 800201c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		indx++;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	3301      	adds	r3, #1
 8002024:	617b      	str	r3, [r7, #20]
	for (int i=0; i<50; i++)
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	3301      	adds	r3, #1
 800202a:	60bb      	str	r3, [r7, #8]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	2b31      	cmp	r3, #49	; 0x31
 8002030:	ddf1      	ble.n	8002016 <WS2812_Send+0x8a>
	}

	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)pwmData, indx);
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	b29b      	uxth	r3, r3
 8002036:	4a09      	ldr	r2, [pc, #36]	; (800205c <WS2812_Send+0xd0>)
 8002038:	2100      	movs	r1, #0
 800203a:	4809      	ldr	r0, [pc, #36]	; (8002060 <WS2812_Send+0xd4>)
 800203c:	f002 fdd0 	bl	8004be0 <HAL_TIM_PWM_Start_DMA>
	while (!datasentflag){};
 8002040:	bf00      	nop
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <WS2812_Send+0xd8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0fb      	beq.n	8002042 <WS2812_Send+0xb6>
	datasentflag = 0;
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <WS2812_Send+0xd8>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
}
 8002050:	bf00      	nop
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000458 	.word	0x20000458
 800205c:	20000510 	.word	0x20000510
 8002060:	200002c8 	.word	0x200002c8
 8002064:	2000050c 	.word	0x2000050c

08002068 <Reset_LED>:

void Reset_LED (void)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
	for (int i=0; i<MAX_LED; i++)
 800206e:	2300      	movs	r3, #0
 8002070:	607b      	str	r3, [r7, #4]
 8002072:	e01a      	b.n	80020aa <Reset_LED+0x42>
	{
		LED_Data[i][0] = i;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	b2d9      	uxtb	r1, r3
 8002078:	4a11      	ldr	r2, [pc, #68]	; (80020c0 <Reset_LED+0x58>)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
		LED_Data[i][1] = 0;
 8002080:	4a0f      	ldr	r2, [pc, #60]	; (80020c0 <Reset_LED+0x58>)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	2200      	movs	r2, #0
 800208a:	705a      	strb	r2, [r3, #1]
		LED_Data[i][2] = 0;
 800208c:	4a0c      	ldr	r2, [pc, #48]	; (80020c0 <Reset_LED+0x58>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	2200      	movs	r2, #0
 8002096:	709a      	strb	r2, [r3, #2]
		LED_Data[i][3] = 0;
 8002098:	4a09      	ldr	r2, [pc, #36]	; (80020c0 <Reset_LED+0x58>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	2200      	movs	r2, #0
 80020a2:	70da      	strb	r2, [r3, #3]
	for (int i=0; i<MAX_LED; i++)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	3301      	adds	r3, #1
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b2c      	cmp	r3, #44	; 0x2c
 80020ae:	dde1      	ble.n	8002074 <Reset_LED+0xc>
	}
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	20000458 	.word	0x20000458

080020c4 <right_signal>:

void right_signal(){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
	for(int i=RIGHT_SIGNAL;i<MAX_LED;i++){
 80020ca:	231e      	movs	r3, #30
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	e030      	b.n	8002132 <right_signal+0x6e>
			  Set_LED(((i-1)<RIGHT_SIGNAL?RIGHT_SIGNAL:MAX_LED-1), 255, 0, 0);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2b1e      	cmp	r3, #30
 80020d4:	dc01      	bgt.n	80020da <right_signal+0x16>
 80020d6:	201e      	movs	r0, #30
 80020d8:	e000      	b.n	80020dc <right_signal+0x18>
 80020da:	202c      	movs	r0, #44	; 0x2c
 80020dc:	2300      	movs	r3, #0
 80020de:	2200      	movs	r2, #0
 80020e0:	21ff      	movs	r1, #255	; 0xff
 80020e2:	f7ff ff1b 	bl	8001f1c <Set_LED>
			  Set_LED(i, 255, 0, 0);
 80020e6:	2300      	movs	r3, #0
 80020e8:	2200      	movs	r2, #0
 80020ea:	21ff      	movs	r1, #255	; 0xff
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f7ff ff15 	bl	8001f1c <Set_LED>
			  for(int j=RIGHT_SIGNAL;j<MAX_LED;j++){
 80020f2:	231e      	movs	r3, #30
 80020f4:	603b      	str	r3, [r7, #0]
 80020f6:	e011      	b.n	800211c <right_signal+0x58>
				  if(j==i||j==i-1){
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d00a      	beq.n	8002116 <right_signal+0x52>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	429a      	cmp	r2, r3
 8002108:	d005      	beq.n	8002116 <right_signal+0x52>
				  }else{
					  Set_LED(j, 0, 0, 0);
 800210a:	2300      	movs	r3, #0
 800210c:	2200      	movs	r2, #0
 800210e:	2100      	movs	r1, #0
 8002110:	6838      	ldr	r0, [r7, #0]
 8002112:	f7ff ff03 	bl	8001f1c <Set_LED>
			  for(int j=RIGHT_SIGNAL;j<MAX_LED;j++){
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2b2c      	cmp	r3, #44	; 0x2c
 8002120:	ddea      	ble.n	80020f8 <right_signal+0x34>
				  }
			  }
			  WS2812_Send();
 8002122:	f7ff ff33 	bl	8001f8c <WS2812_Send>
			  HAL_Delay(45);
 8002126:	202d      	movs	r0, #45	; 0x2d
 8002128:	f000 fc0e 	bl	8002948 <HAL_Delay>
	for(int i=RIGHT_SIGNAL;i<MAX_LED;i++){
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3301      	adds	r3, #1
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2b2c      	cmp	r3, #44	; 0x2c
 8002136:	ddcb      	ble.n	80020d0 <right_signal+0xc>
		  }
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <stop_signal>:

void stop_signal(){
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
	const int zer0=0;
 8002148:	2300      	movs	r3, #0
 800214a:	607b      	str	r3, [r7, #4]
	for(int i=STOP_SIGNAL;i<MAX_LED-l;i++){
 800214c:	230f      	movs	r3, #15
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e008      	b.n	8002164 <stop_signal+0x22>
		Set_LED(i, 0, 0, 255);
 8002152:	23ff      	movs	r3, #255	; 0xff
 8002154:	2200      	movs	r2, #0
 8002156:	2100      	movs	r1, #0
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	f7ff fedf 	bl	8001f1c <Set_LED>
	for(int i=STOP_SIGNAL;i<MAX_LED-l;i++){
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3301      	adds	r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b1d      	cmp	r3, #29
 8002168:	ddf3      	ble.n	8002152 <stop_signal+0x10>
	}
	WS2812_Send();
 800216a:	f7ff ff0f 	bl	8001f8c <WS2812_Send>
	HAL_Delay(300);
 800216e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002172:	f000 fbe9 	bl	8002948 <HAL_Delay>
	for(int i=STOP_SIGNAL;i<MAX_LED-l;i++){
 8002176:	230f      	movs	r3, #15
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	e008      	b.n	800218e <stop_signal+0x4c>
			Set_LED(i, 0, 0, 0);
 800217c:	2300      	movs	r3, #0
 800217e:	2200      	movs	r2, #0
 8002180:	2100      	movs	r1, #0
 8002182:	68b8      	ldr	r0, [r7, #8]
 8002184:	f7ff feca 	bl	8001f1c <Set_LED>
	for(int i=STOP_SIGNAL;i<MAX_LED-l;i++){
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	3301      	adds	r3, #1
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	2b1d      	cmp	r3, #29
 8002192:	ddf3      	ble.n	800217c <stop_signal+0x3a>
	}

}
 8002194:	bf00      	nop
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <left_signal>:

void left_signal(){
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
	for(int i=MAX_LED-l-l;i>LEFT_SIGNAL;i--){
 80021a4:	230f      	movs	r3, #15
 80021a6:	607b      	str	r3, [r7, #4]
 80021a8:	e02a      	b.n	8002200 <left_signal+0x62>
		Set_LED(((i-1)>LEFT_SIGNAL?LEFT_SIGNAL:i-1), 0, 0, 255);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	bfa8      	it	ge
 80021b0:	2301      	movge	r3, #1
 80021b2:	1e58      	subs	r0, r3, #1
 80021b4:	23ff      	movs	r3, #255	; 0xff
 80021b6:	2200      	movs	r2, #0
 80021b8:	2100      	movs	r1, #0
 80021ba:	f7ff feaf 	bl	8001f1c <Set_LED>
		Set_LED(i, 255, 0, 0);
 80021be:	2300      	movs	r3, #0
 80021c0:	2200      	movs	r2, #0
 80021c2:	21ff      	movs	r1, #255	; 0xff
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f7ff fea9 	bl	8001f1c <Set_LED>
		for(int j=MAX_LED-l-l;j>LEFT_SIGNAL;j--){
 80021ca:	230f      	movs	r3, #15
 80021cc:	603b      	str	r3, [r7, #0]
 80021ce:	e00c      	b.n	80021ea <left_signal+0x4c>
		if(j==i){
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d005      	beq.n	80021e4 <left_signal+0x46>
		}else{
		    Set_LED(j, 0, 0, 0);
 80021d8:	2300      	movs	r3, #0
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	6838      	ldr	r0, [r7, #0]
 80021e0:	f7ff fe9c 	bl	8001f1c <Set_LED>
		for(int j=MAX_LED-l-l;j>LEFT_SIGNAL;j--){
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	3b01      	subs	r3, #1
 80021e8:	603b      	str	r3, [r7, #0]
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	dcef      	bgt.n	80021d0 <left_signal+0x32>
		}
		}
		WS2812_Send();
 80021f0:	f7ff fecc 	bl	8001f8c <WS2812_Send>
		HAL_Delay(100);
 80021f4:	2064      	movs	r0, #100	; 0x64
 80021f6:	f000 fba7 	bl	8002948 <HAL_Delay>
	for(int i=MAX_LED-l-l;i>LEFT_SIGNAL;i--){
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	dcd1      	bgt.n	80021aa <left_signal+0xc>
	}
}
 8002206:	bf00      	nop
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <prepare_data>:
		togg_flag=0;
	}
	port->ODR &= ~(1<<pin);
}

int prepare_data(){
 8002210:	b590      	push	{r4, r7, lr}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
	sprintf(arr,"%c%c",ecar.direction,ci2a(ecar.speed_for_rf));
 8002216:	4b23      	ldr	r3, [pc, #140]	; (80022a4 <prepare_data+0x94>)
 8002218:	681c      	ldr	r4, [r3, #0]
 800221a:	4b22      	ldr	r3, [pc, #136]	; (80022a4 <prepare_data+0x94>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fe50 	bl	8000ec4 <ci2a>
 8002224:	4603      	mov	r3, r0
 8002226:	4622      	mov	r2, r4
 8002228:	491f      	ldr	r1, [pc, #124]	; (80022a8 <prepare_data+0x98>)
 800222a:	4820      	ldr	r0, [pc, #128]	; (80022ac <prepare_data+0x9c>)
 800222c:	f007 f88e 	bl	800934c <siprintf>
	for(int j=0;j<24;j++){
 8002230:	2300      	movs	r3, #0
 8002232:	607b      	str	r3, [r7, #4]
 8002234:	e017      	b.n	8002266 <prepare_data+0x56>
		strcat(arr,cf2a(ecar.battery_voltage[j],tempp[j]));
 8002236:	4a1b      	ldr	r2, [pc, #108]	; (80022a4 <prepare_data+0x94>)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3302      	adds	r3, #2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	edd3 7a00 	vldr	s15, [r3]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4a19      	ldr	r2, [pc, #100]	; (80022b0 <prepare_data+0xa0>)
 800224a:	4413      	add	r3, r2
 800224c:	4618      	mov	r0, r3
 800224e:	eeb0 0a67 	vmov.f32	s0, s15
 8002252:	f7fe fddd 	bl	8000e10 <cf2a>
 8002256:	4603      	mov	r3, r0
 8002258:	4619      	mov	r1, r3
 800225a:	4814      	ldr	r0, [pc, #80]	; (80022ac <prepare_data+0x9c>)
 800225c:	f007 f896 	bl	800938c <strcat>
	for(int j=0;j<24;j++){
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3301      	adds	r3, #1
 8002264:	607b      	str	r3, [r7, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b17      	cmp	r3, #23
 800226a:	dde4      	ble.n	8002236 <prepare_data+0x26>
	}
	strcat(arr,ci2a(ecar.battery_temparature));
 800226c:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <prepare_data+0x94>)
 800226e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe fe27 	bl	8000ec4 <ci2a>
 8002276:	4603      	mov	r3, r0
 8002278:	4619      	mov	r1, r3
 800227a:	480c      	ldr	r0, [pc, #48]	; (80022ac <prepare_data+0x9c>)
 800227c:	f007 f886 	bl	800938c <strcat>
	strcat(arr,"1\n");
 8002280:	480a      	ldr	r0, [pc, #40]	; (80022ac <prepare_data+0x9c>)
 8002282:	f7fd ffa5 	bl	80001d0 <strlen>
 8002286:	4603      	mov	r3, r0
 8002288:	461a      	mov	r2, r3
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <prepare_data+0x9c>)
 800228c:	4413      	add	r3, r2
 800228e:	4a09      	ldr	r2, [pc, #36]	; (80022b4 <prepare_data+0xa4>)
 8002290:	8811      	ldrh	r1, [r2, #0]
 8002292:	7892      	ldrb	r2, [r2, #2]
 8002294:	8019      	strh	r1, [r3, #0]
 8002296:	709a      	strb	r2, [r3, #2]
	return 1;
 8002298:	2301      	movs	r3, #1
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd90      	pop	{r4, r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200001f8 	.word	0x200001f8
 80022a8:	08009d20 	.word	0x08009d20
 80022ac:	200000fc 	.word	0x200000fc
 80022b0:	20000164 	.word	0x20000164
 80022b4:	08009d28 	.word	0x08009d28

080022b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a04      	ldr	r2, [pc, #16]	; (80022d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d101      	bne.n	80022ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022ca:	f000 fb1d 	bl	8002908 <HAL_IncTick>
   }*/
  /* USER CODE BEGIN Callback 1 */
 /* HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
  HAL_Delay(200);*/
  /* USER CODE END Callback 1 */
}
 80022ce:	bf00      	nop
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40001400 	.word	0x40001400

080022dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e0:	b672      	cpsid	i
}
 80022e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022e4:	e7fe      	b.n	80022e4 <Error_Handler+0x8>
	...

080022e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
 80022f2:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_MspInit+0x54>)
 80022f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f6:	4a11      	ldr	r2, [pc, #68]	; (800233c <HAL_MspInit+0x54>)
 80022f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022fc:	6453      	str	r3, [r2, #68]	; 0x44
 80022fe:	4b0f      	ldr	r3, [pc, #60]	; (800233c <HAL_MspInit+0x54>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	603b      	str	r3, [r7, #0]
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_MspInit+0x54>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <HAL_MspInit+0x54>)
 8002314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002318:	6413      	str	r3, [r2, #64]	; 0x40
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <HAL_MspInit+0x54>)
 800231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002322:	603b      	str	r3, [r7, #0]
 8002324:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	210f      	movs	r1, #15
 800232a:	f06f 0001 	mvn.w	r0, #1
 800232e:	f000 fff5 	bl	800331c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40023800 	.word	0x40023800

08002340 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a19      	ldr	r2, [pc, #100]	; (80023c4 <HAL_CAN_MspInit+0x84>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d12b      	bne.n	80023ba <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	4b18      	ldr	r3, [pc, #96]	; (80023c8 <HAL_CAN_MspInit+0x88>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	4a17      	ldr	r2, [pc, #92]	; (80023c8 <HAL_CAN_MspInit+0x88>)
 800236c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002370:	6413      	str	r3, [r2, #64]	; 0x40
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <HAL_CAN_MspInit+0x88>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <HAL_CAN_MspInit+0x88>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a10      	ldr	r2, [pc, #64]	; (80023c8 <HAL_CAN_MspInit+0x88>)
 8002388:	f043 0308 	orr.w	r3, r3, #8
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <HAL_CAN_MspInit+0x88>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800239a:	2303      	movs	r3, #3
 800239c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800239e:	2302      	movs	r3, #2
 80023a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a6:	2303      	movs	r3, #3
 80023a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80023aa:	2309      	movs	r3, #9
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023ae:	f107 0314 	add.w	r3, r7, #20
 80023b2:	4619      	mov	r1, r3
 80023b4:	4805      	ldr	r0, [pc, #20]	; (80023cc <HAL_CAN_MspInit+0x8c>)
 80023b6:	f001 fc9f 	bl	8003cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80023ba:	bf00      	nop
 80023bc:	3728      	adds	r7, #40	; 0x28
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40006400 	.word	0x40006400
 80023c8:	40023800 	.word	0x40023800
 80023cc:	40020c00 	.word	0x40020c00

080023d0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b08a      	sub	sp, #40	; 0x28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	2200      	movs	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	605a      	str	r2, [r3, #4]
 80023e2:	609a      	str	r2, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a1b      	ldr	r2, [pc, #108]	; (800245c <HAL_DAC_MspInit+0x8c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d12f      	bne.n	8002452 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <HAL_DAC_MspInit+0x90>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	4a19      	ldr	r2, [pc, #100]	; (8002460 <HAL_DAC_MspInit+0x90>)
 80023fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002400:	6413      	str	r3, [r2, #64]	; 0x40
 8002402:	4b17      	ldr	r3, [pc, #92]	; (8002460 <HAL_DAC_MspInit+0x90>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b13      	ldr	r3, [pc, #76]	; (8002460 <HAL_DAC_MspInit+0x90>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002416:	4a12      	ldr	r2, [pc, #72]	; (8002460 <HAL_DAC_MspInit+0x90>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6313      	str	r3, [r2, #48]	; 0x30
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <HAL_DAC_MspInit+0x90>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800242a:	2310      	movs	r3, #16
 800242c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800242e:	2303      	movs	r3, #3
 8002430:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002436:	f107 0314 	add.w	r3, r7, #20
 800243a:	4619      	mov	r1, r3
 800243c:	4809      	ldr	r0, [pc, #36]	; (8002464 <HAL_DAC_MspInit+0x94>)
 800243e:	f001 fc5b 	bl	8003cf8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002442:	2200      	movs	r2, #0
 8002444:	2105      	movs	r1, #5
 8002446:	2036      	movs	r0, #54	; 0x36
 8002448:	f000 ff68 	bl	800331c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800244c:	2036      	movs	r0, #54	; 0x36
 800244e:	f000 ff81 	bl	8003354 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002452:	bf00      	nop
 8002454:	3728      	adds	r7, #40	; 0x28
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40007400 	.word	0x40007400
 8002460:	40023800 	.word	0x40023800
 8002464:	40020000 	.word	0x40020000

08002468 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a30      	ldr	r2, [pc, #192]	; (8002538 <HAL_TIM_Base_MspInit+0xd0>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d13e      	bne.n	80024f8 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	4b2f      	ldr	r3, [pc, #188]	; (800253c <HAL_TIM_Base_MspInit+0xd4>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4a2e      	ldr	r2, [pc, #184]	; (800253c <HAL_TIM_Base_MspInit+0xd4>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	6453      	str	r3, [r2, #68]	; 0x44
 800248a:	4b2c      	ldr	r3, [pc, #176]	; (800253c <HAL_TIM_Base_MspInit+0xd4>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	60fb      	str	r3, [r7, #12]
 8002494:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8002496:	4b2a      	ldr	r3, [pc, #168]	; (8002540 <HAL_TIM_Base_MspInit+0xd8>)
 8002498:	4a2a      	ldr	r2, [pc, #168]	; (8002544 <HAL_TIM_Base_MspInit+0xdc>)
 800249a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800249c:	4b28      	ldr	r3, [pc, #160]	; (8002540 <HAL_TIM_Base_MspInit+0xd8>)
 800249e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80024a2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024a4:	4b26      	ldr	r3, [pc, #152]	; (8002540 <HAL_TIM_Base_MspInit+0xd8>)
 80024a6:	2240      	movs	r2, #64	; 0x40
 80024a8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80024aa:	4b25      	ldr	r3, [pc, #148]	; (8002540 <HAL_TIM_Base_MspInit+0xd8>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80024b0:	4b23      	ldr	r3, [pc, #140]	; (8002540 <HAL_TIM_Base_MspInit+0xd8>)
 80024b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024b6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024b8:	4b21      	ldr	r3, [pc, #132]	; (8002540 <HAL_TIM_Base_MspInit+0xd8>)
 80024ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024be:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024c0:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <HAL_TIM_Base_MspInit+0xd8>)
 80024c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80024c6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80024c8:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <HAL_TIM_Base_MspInit+0xd8>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80024ce:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <HAL_TIM_Base_MspInit+0xd8>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024d4:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <HAL_TIM_Base_MspInit+0xd8>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80024da:	4819      	ldr	r0, [pc, #100]	; (8002540 <HAL_TIM_Base_MspInit+0xd8>)
 80024dc:	f001 f87a 	bl	80035d4 <HAL_DMA_Init>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80024e6:	f7ff fef9 	bl	80022dc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a14      	ldr	r2, [pc, #80]	; (8002540 <HAL_TIM_Base_MspInit+0xd8>)
 80024ee:	625a      	str	r2, [r3, #36]	; 0x24
 80024f0:	4a13      	ldr	r2, [pc, #76]	; (8002540 <HAL_TIM_Base_MspInit+0xd8>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80024f6:	e01a      	b.n	800252e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a12      	ldr	r2, [pc, #72]	; (8002548 <HAL_TIM_Base_MspInit+0xe0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d115      	bne.n	800252e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	4b0d      	ldr	r3, [pc, #52]	; (800253c <HAL_TIM_Base_MspInit+0xd4>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250a:	4a0c      	ldr	r2, [pc, #48]	; (800253c <HAL_TIM_Base_MspInit+0xd4>)
 800250c:	f043 0310 	orr.w	r3, r3, #16
 8002510:	6413      	str	r3, [r2, #64]	; 0x40
 8002512:	4b0a      	ldr	r3, [pc, #40]	; (800253c <HAL_TIM_Base_MspInit+0xd4>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 0310 	and.w	r3, r3, #16
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2105      	movs	r1, #5
 8002522:	2036      	movs	r0, #54	; 0x36
 8002524:	f000 fefa 	bl	800331c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002528:	2036      	movs	r0, #54	; 0x36
 800252a:	f000 ff13 	bl	8003354 <HAL_NVIC_EnableIRQ>
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40010000 	.word	0x40010000
 800253c:	40023800 	.word	0x40023800
 8002540:	20000358 	.word	0x20000358
 8002544:	40026428 	.word	0x40026428
 8002548:	40001000 	.word	0x40001000

0800254c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 030c 	add.w	r3, r7, #12
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <HAL_TIM_MspPostInit+0x68>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d11e      	bne.n	80025ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60bb      	str	r3, [r7, #8]
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <HAL_TIM_MspPostInit+0x6c>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a10      	ldr	r2, [pc, #64]	; (80025b8 <HAL_TIM_MspPostInit+0x6c>)
 8002578:	f043 0310 	orr.w	r3, r3, #16
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <HAL_TIM_MspPostInit+0x6c>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	60bb      	str	r3, [r7, #8]
 8002588:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800258a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800258e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002590:	2302      	movs	r3, #2
 8002592:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002598:	2300      	movs	r3, #0
 800259a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800259c:	2301      	movs	r3, #1
 800259e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025a0:	f107 030c 	add.w	r3, r7, #12
 80025a4:	4619      	mov	r1, r3
 80025a6:	4805      	ldr	r0, [pc, #20]	; (80025bc <HAL_TIM_MspPostInit+0x70>)
 80025a8:	f001 fba6 	bl	8003cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80025ac:	bf00      	nop
 80025ae:	3720      	adds	r7, #32
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40010000 	.word	0x40010000
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40021000 	.word	0x40021000

080025c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08c      	sub	sp, #48	; 0x30
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 031c 	add.w	r3, r7, #28
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a32      	ldr	r2, [pc, #200]	; (80026a8 <HAL_UART_MspInit+0xe8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d12c      	bne.n	800263c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	61bb      	str	r3, [r7, #24]
 80025e6:	4b31      	ldr	r3, [pc, #196]	; (80026ac <HAL_UART_MspInit+0xec>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	4a30      	ldr	r2, [pc, #192]	; (80026ac <HAL_UART_MspInit+0xec>)
 80025ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f0:	6413      	str	r3, [r2, #64]	; 0x40
 80025f2:	4b2e      	ldr	r3, [pc, #184]	; (80026ac <HAL_UART_MspInit+0xec>)
 80025f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025fa:	61bb      	str	r3, [r7, #24]
 80025fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	4b2a      	ldr	r3, [pc, #168]	; (80026ac <HAL_UART_MspInit+0xec>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	4a29      	ldr	r2, [pc, #164]	; (80026ac <HAL_UART_MspInit+0xec>)
 8002608:	f043 0308 	orr.w	r3, r3, #8
 800260c:	6313      	str	r3, [r2, #48]	; 0x30
 800260e:	4b27      	ldr	r3, [pc, #156]	; (80026ac <HAL_UART_MspInit+0xec>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800261a:	2360      	movs	r3, #96	; 0x60
 800261c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	2302      	movs	r3, #2
 8002620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002626:	2303      	movs	r3, #3
 8002628:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800262a:	2307      	movs	r3, #7
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800262e:	f107 031c 	add.w	r3, r7, #28
 8002632:	4619      	mov	r1, r3
 8002634:	481e      	ldr	r0, [pc, #120]	; (80026b0 <HAL_UART_MspInit+0xf0>)
 8002636:	f001 fb5f 	bl	8003cf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800263a:	e030      	b.n	800269e <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a1c      	ldr	r2, [pc, #112]	; (80026b4 <HAL_UART_MspInit+0xf4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d12b      	bne.n	800269e <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	4b18      	ldr	r3, [pc, #96]	; (80026ac <HAL_UART_MspInit+0xec>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	4a17      	ldr	r2, [pc, #92]	; (80026ac <HAL_UART_MspInit+0xec>)
 8002650:	f043 0320 	orr.w	r3, r3, #32
 8002654:	6453      	str	r3, [r2, #68]	; 0x44
 8002656:	4b15      	ldr	r3, [pc, #84]	; (80026ac <HAL_UART_MspInit+0xec>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f003 0320 	and.w	r3, r3, #32
 800265e:	613b      	str	r3, [r7, #16]
 8002660:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	4b11      	ldr	r3, [pc, #68]	; (80026ac <HAL_UART_MspInit+0xec>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266a:	4a10      	ldr	r2, [pc, #64]	; (80026ac <HAL_UART_MspInit+0xec>)
 800266c:	f043 0304 	orr.w	r3, r3, #4
 8002670:	6313      	str	r3, [r2, #48]	; 0x30
 8002672:	4b0e      	ldr	r3, [pc, #56]	; (80026ac <HAL_UART_MspInit+0xec>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800267e:	23c0      	movs	r3, #192	; 0xc0
 8002680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268a:	2303      	movs	r3, #3
 800268c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800268e:	2308      	movs	r3, #8
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002692:	f107 031c 	add.w	r3, r7, #28
 8002696:	4619      	mov	r1, r3
 8002698:	4807      	ldr	r0, [pc, #28]	; (80026b8 <HAL_UART_MspInit+0xf8>)
 800269a:	f001 fb2d 	bl	8003cf8 <HAL_GPIO_Init>
}
 800269e:	bf00      	nop
 80026a0:	3730      	adds	r7, #48	; 0x30
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40004400 	.word	0x40004400
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40020c00 	.word	0x40020c00
 80026b4:	40011400 	.word	0x40011400
 80026b8:	40020800 	.word	0x40020800

080026bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08c      	sub	sp, #48	; 0x30
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80026cc:	2200      	movs	r2, #0
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	2037      	movs	r0, #55	; 0x37
 80026d2:	f000 fe23 	bl	800331c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80026d6:	2037      	movs	r0, #55	; 0x37
 80026d8:	f000 fe3c 	bl	8003354 <HAL_NVIC_EnableIRQ>

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <HAL_InitTick+0xa4>)
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	4a1e      	ldr	r2, [pc, #120]	; (8002760 <HAL_InitTick+0xa4>)
 80026e6:	f043 0320 	orr.w	r3, r3, #32
 80026ea:	6413      	str	r3, [r2, #64]	; 0x40
 80026ec:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <HAL_InitTick+0xa4>)
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026f8:	f107 0210 	add.w	r2, r7, #16
 80026fc:	f107 0314 	add.w	r3, r7, #20
 8002700:	4611      	mov	r1, r2
 8002702:	4618      	mov	r0, r3
 8002704:	f002 f920 	bl	8004948 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002708:	f002 f8f6 	bl	80048f8 <HAL_RCC_GetPCLK1Freq>
 800270c:	4603      	mov	r3, r0
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002714:	4a13      	ldr	r2, [pc, #76]	; (8002764 <HAL_InitTick+0xa8>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	0c9b      	lsrs	r3, r3, #18
 800271c:	3b01      	subs	r3, #1
 800271e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002720:	4b11      	ldr	r3, [pc, #68]	; (8002768 <HAL_InitTick+0xac>)
 8002722:	4a12      	ldr	r2, [pc, #72]	; (800276c <HAL_InitTick+0xb0>)
 8002724:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <HAL_InitTick+0xac>)
 8002728:	f240 32e7 	movw	r2, #999	; 0x3e7
 800272c:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800272e:	4a0e      	ldr	r2, [pc, #56]	; (8002768 <HAL_InitTick+0xac>)
 8002730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002732:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <HAL_InitTick+0xac>)
 8002736:	2200      	movs	r2, #0
 8002738:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800273a:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_InitTick+0xac>)
 800273c:	2200      	movs	r2, #0
 800273e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002740:	4809      	ldr	r0, [pc, #36]	; (8002768 <HAL_InitTick+0xac>)
 8002742:	f002 f933 	bl	80049ac <HAL_TIM_Base_Init>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d104      	bne.n	8002756 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 800274c:	4806      	ldr	r0, [pc, #24]	; (8002768 <HAL_InitTick+0xac>)
 800274e:	f002 f97d 	bl	8004a4c <HAL_TIM_Base_Start_IT>
 8002752:	4603      	mov	r3, r0
 8002754:	e000      	b.n	8002758 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
}
 8002758:	4618      	mov	r0, r3
 800275a:	3730      	adds	r7, #48	; 0x30
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40023800 	.word	0x40023800
 8002764:	431bde83 	.word	0x431bde83
 8002768:	20000de4 	.word	0x20000de4
 800276c:	40001400 	.word	0x40001400

08002770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002774:	e7fe      	b.n	8002774 <NMI_Handler+0x4>

08002776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800277a:	e7fe      	b.n	800277a <HardFault_Handler+0x4>

0800277c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002780:	e7fe      	b.n	8002780 <MemManage_Handler+0x4>

08002782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002786:	e7fe      	b.n	8002786 <BusFault_Handler+0x4>

08002788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800278c:	e7fe      	b.n	800278c <UsageFault_Handler+0x4>

0800278e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80027a0:	4803      	ldr	r0, [pc, #12]	; (80027b0 <TIM6_DAC_IRQHandler+0x14>)
 80027a2:	f000 fe59 	bl	8003458 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80027a6:	4803      	ldr	r0, [pc, #12]	; (80027b4 <TIM6_DAC_IRQHandler+0x18>)
 80027a8:	f002 fcb4 	bl	8005114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80027ac:	bf00      	nop
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	200002b4 	.word	0x200002b4
 80027b4:	20000310 	.word	0x20000310

080027b8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80027bc:	4802      	ldr	r0, [pc, #8]	; (80027c8 <TIM7_IRQHandler+0x10>)
 80027be:	f002 fca9 	bl	8005114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000de4 	.word	0x20000de4

080027cc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80027d0:	4802      	ldr	r0, [pc, #8]	; (80027dc <DMA2_Stream1_IRQHandler+0x10>)
 80027d2:	f001 f827 	bl	8003824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000358 	.word	0x20000358

080027e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027e8:	4a14      	ldr	r2, [pc, #80]	; (800283c <_sbrk+0x5c>)
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <_sbrk+0x60>)
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <_sbrk+0x64>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d102      	bne.n	8002802 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027fc:	4b11      	ldr	r3, [pc, #68]	; (8002844 <_sbrk+0x64>)
 80027fe:	4a12      	ldr	r2, [pc, #72]	; (8002848 <_sbrk+0x68>)
 8002800:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002802:	4b10      	ldr	r3, [pc, #64]	; (8002844 <_sbrk+0x64>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4413      	add	r3, r2
 800280a:	693a      	ldr	r2, [r7, #16]
 800280c:	429a      	cmp	r2, r3
 800280e:	d207      	bcs.n	8002820 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002810:	f006 fd5c 	bl	80092cc <__errno>
 8002814:	4603      	mov	r3, r0
 8002816:	220c      	movs	r2, #12
 8002818:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
 800281e:	e009      	b.n	8002834 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002820:	4b08      	ldr	r3, [pc, #32]	; (8002844 <_sbrk+0x64>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002826:	4b07      	ldr	r3, [pc, #28]	; (8002844 <_sbrk+0x64>)
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4413      	add	r3, r2
 800282e:	4a05      	ldr	r2, [pc, #20]	; (8002844 <_sbrk+0x64>)
 8002830:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002832:	68fb      	ldr	r3, [r7, #12]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20020000 	.word	0x20020000
 8002840:	00000400 	.word	0x00000400
 8002844:	20000e2c 	.word	0x20000e2c
 8002848:	20005798 	.word	0x20005798

0800284c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <SystemInit+0x20>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002856:	4a05      	ldr	r2, [pc, #20]	; (800286c <SystemInit+0x20>)
 8002858:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800285c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002860:	bf00      	nop
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002870:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002874:	480d      	ldr	r0, [pc, #52]	; (80028ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002876:	490e      	ldr	r1, [pc, #56]	; (80028b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002878:	4a0e      	ldr	r2, [pc, #56]	; (80028b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800287a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800287c:	e002      	b.n	8002884 <LoopCopyDataInit>

0800287e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800287e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002880:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002882:	3304      	adds	r3, #4

08002884 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002884:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002886:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002888:	d3f9      	bcc.n	800287e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800288a:	4a0b      	ldr	r2, [pc, #44]	; (80028b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800288c:	4c0b      	ldr	r4, [pc, #44]	; (80028bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800288e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002890:	e001      	b.n	8002896 <LoopFillZerobss>

08002892 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002892:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002894:	3204      	adds	r2, #4

08002896 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002896:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002898:	d3fb      	bcc.n	8002892 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800289a:	f7ff ffd7 	bl	800284c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800289e:	f006 fd1b 	bl	80092d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028a2:	f7fe fb93 	bl	8000fcc <main>
  bx  lr    
 80028a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028b0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80028b4:	08009ee0 	.word	0x08009ee0
  ldr r2, =_sbss
 80028b8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80028bc:	20005794 	.word	0x20005794

080028c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028c0:	e7fe      	b.n	80028c0 <ADC_IRQHandler>
	...

080028c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028c8:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <HAL_Init+0x40>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a0d      	ldr	r2, [pc, #52]	; (8002904 <HAL_Init+0x40>)
 80028ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_Init+0x40>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <HAL_Init+0x40>)
 80028da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028e0:	4b08      	ldr	r3, [pc, #32]	; (8002904 <HAL_Init+0x40>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a07      	ldr	r2, [pc, #28]	; (8002904 <HAL_Init+0x40>)
 80028e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028ec:	2003      	movs	r0, #3
 80028ee:	f000 fd0a 	bl	8003306 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028f2:	200f      	movs	r0, #15
 80028f4:	f7ff fee2 	bl	80026bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028f8:	f7ff fcf6 	bl	80022e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40023c00 	.word	0x40023c00

08002908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_IncTick+0x20>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	461a      	mov	r2, r3
 8002912:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_IncTick+0x24>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4413      	add	r3, r2
 8002918:	4a04      	ldr	r2, [pc, #16]	; (800292c <HAL_IncTick+0x24>)
 800291a:	6013      	str	r3, [r2, #0]
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	2000000c 	.word	0x2000000c
 800292c:	20000e30 	.word	0x20000e30

08002930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return uwTick;
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <HAL_GetTick+0x14>)
 8002936:	681b      	ldr	r3, [r3, #0]
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20000e30 	.word	0x20000e30

08002948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002950:	f7ff ffee 	bl	8002930 <HAL_GetTick>
 8002954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002960:	d005      	beq.n	800296e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002962:	4b0a      	ldr	r3, [pc, #40]	; (800298c <HAL_Delay+0x44>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4413      	add	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800296e:	bf00      	nop
 8002970:	f7ff ffde 	bl	8002930 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	429a      	cmp	r2, r3
 800297e:	d8f7      	bhi.n	8002970 <HAL_Delay+0x28>
  {
  }
}
 8002980:	bf00      	nop
 8002982:	bf00      	nop
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	2000000c 	.word	0x2000000c

08002990 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e0ed      	b.n	8002b7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d102      	bne.n	80029b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff fcc6 	bl	8002340 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0201 	orr.w	r2, r2, #1
 80029c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029c4:	f7ff ffb4 	bl	8002930 <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029ca:	e012      	b.n	80029f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029cc:	f7ff ffb0 	bl	8002930 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b0a      	cmp	r3, #10
 80029d8:	d90b      	bls.n	80029f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2205      	movs	r2, #5
 80029ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e0c5      	b.n	8002b7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 0301 	and.w	r3, r3, #1
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0e5      	beq.n	80029cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0202 	bic.w	r2, r2, #2
 8002a0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a10:	f7ff ff8e 	bl	8002930 <HAL_GetTick>
 8002a14:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a16:	e012      	b.n	8002a3e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a18:	f7ff ff8a 	bl	8002930 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b0a      	cmp	r3, #10
 8002a24:	d90b      	bls.n	8002a3e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2205      	movs	r2, #5
 8002a36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e09f      	b.n	8002b7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 0302 	and.w	r3, r3, #2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d1e5      	bne.n	8002a18 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	7e1b      	ldrb	r3, [r3, #24]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d108      	bne.n	8002a66 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	e007      	b.n	8002a76 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	7e5b      	ldrb	r3, [r3, #25]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d108      	bne.n	8002a90 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	e007      	b.n	8002aa0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	7e9b      	ldrb	r3, [r3, #26]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d108      	bne.n	8002aba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0220 	orr.w	r2, r2, #32
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	e007      	b.n	8002aca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0220 	bic.w	r2, r2, #32
 8002ac8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	7edb      	ldrb	r3, [r3, #27]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d108      	bne.n	8002ae4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0210 	bic.w	r2, r2, #16
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	e007      	b.n	8002af4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0210 	orr.w	r2, r2, #16
 8002af2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	7f1b      	ldrb	r3, [r3, #28]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d108      	bne.n	8002b0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0208 	orr.w	r2, r2, #8
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	e007      	b.n	8002b1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0208 	bic.w	r2, r2, #8
 8002b1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	7f5b      	ldrb	r3, [r3, #29]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d108      	bne.n	8002b38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0204 	orr.w	r2, r2, #4
 8002b34:	601a      	str	r2, [r3, #0]
 8002b36:	e007      	b.n	8002b48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0204 	bic.w	r2, r2, #4
 8002b46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	431a      	orrs	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	ea42 0103 	orr.w	r1, r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	1e5a      	subs	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b9e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ba0:	7cfb      	ldrb	r3, [r7, #19]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d003      	beq.n	8002bae <HAL_CAN_ConfigFilter+0x26>
 8002ba6:	7cfb      	ldrb	r3, [r7, #19]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	f040 80be 	bne.w	8002d2a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002bae:	4b65      	ldr	r3, [pc, #404]	; (8002d44 <HAL_CAN_ConfigFilter+0x1bc>)
 8002bb0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bb8:	f043 0201 	orr.w	r2, r3, #1
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bc8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	021b      	lsls	r3, r3, #8
 8002bde:	431a      	orrs	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	f003 031f 	and.w	r3, r3, #31
 8002bee:	2201      	movs	r2, #1
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	43db      	mvns	r3, r3
 8002c00:	401a      	ands	r2, r3
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d123      	bne.n	8002c58 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002c32:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	3248      	adds	r2, #72	; 0x48
 8002c38:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c4c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c4e:	6979      	ldr	r1, [r7, #20]
 8002c50:	3348      	adds	r3, #72	; 0x48
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	440b      	add	r3, r1
 8002c56:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d122      	bne.n	8002ca6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	431a      	orrs	r2, r3
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	3248      	adds	r2, #72	; 0x48
 8002c86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c9c:	6979      	ldr	r1, [r7, #20]
 8002c9e:	3348      	adds	r3, #72	; 0x48
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	440b      	add	r3, r1
 8002ca4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	699b      	ldr	r3, [r3, #24]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	401a      	ands	r2, r3
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002cc0:	e007      	b.n	8002cd2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d109      	bne.n	8002cee <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	43db      	mvns	r3, r3
 8002ce4:	401a      	ands	r2, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002cec:	e007      	b.n	8002cfe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d107      	bne.n	8002d16 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d1c:	f023 0201 	bic.w	r2, r3, #1
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002d26:	2300      	movs	r3, #0
 8002d28:	e006      	b.n	8002d38 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
  }
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	371c      	adds	r7, #28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	40006400 	.word	0x40006400

08002d48 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d12e      	bne.n	8002dba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0201 	bic.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d74:	f7ff fddc 	bl	8002930 <HAL_GetTick>
 8002d78:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d7a:	e012      	b.n	8002da2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d7c:	f7ff fdd8 	bl	8002930 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b0a      	cmp	r3, #10
 8002d88:	d90b      	bls.n	8002da2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2205      	movs	r2, #5
 8002d9a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e012      	b.n	8002dc8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1e5      	bne.n	8002d7c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e006      	b.n	8002dc8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
  }
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}

08002dd0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	; 0x24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
 8002ddc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002de4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002dee:	7ffb      	ldrb	r3, [r7, #31]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d003      	beq.n	8002dfc <HAL_CAN_AddTxMessage+0x2c>
 8002df4:	7ffb      	ldrb	r3, [r7, #31]
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	f040 80b8 	bne.w	8002f6c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d10a      	bne.n	8002e1c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d105      	bne.n	8002e1c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 80a0 	beq.w	8002f5c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	0e1b      	lsrs	r3, r3, #24
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d907      	bls.n	8002e3c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e30:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e09e      	b.n	8002f7a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	409a      	lsls	r2, r3
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10d      	bne.n	8002e6a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002e58:	68f9      	ldr	r1, [r7, #12]
 8002e5a:	6809      	ldr	r1, [r1, #0]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	3318      	adds	r3, #24
 8002e62:	011b      	lsls	r3, r3, #4
 8002e64:	440b      	add	r3, r1
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	e00f      	b.n	8002e8a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e74:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e7a:	68f9      	ldr	r1, [r7, #12]
 8002e7c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002e7e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	3318      	adds	r3, #24
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	440b      	add	r3, r1
 8002e88:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6819      	ldr	r1, [r3, #0]
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	691a      	ldr	r2, [r3, #16]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	3318      	adds	r3, #24
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	440b      	add	r3, r1
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	7d1b      	ldrb	r3, [r3, #20]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d111      	bne.n	8002eca <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	3318      	adds	r3, #24
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	4413      	add	r3, r2
 8002eb2:	3304      	adds	r3, #4
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	6811      	ldr	r1, [r2, #0]
 8002eba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	3318      	adds	r3, #24
 8002ec2:	011b      	lsls	r3, r3, #4
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3307      	adds	r3, #7
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	061a      	lsls	r2, r3, #24
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3306      	adds	r3, #6
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	041b      	lsls	r3, r3, #16
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	3305      	adds	r3, #5
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	021b      	lsls	r3, r3, #8
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	3204      	adds	r2, #4
 8002eea:	7812      	ldrb	r2, [r2, #0]
 8002eec:	4610      	mov	r0, r2
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	6811      	ldr	r1, [r2, #0]
 8002ef2:	ea43 0200 	orr.w	r2, r3, r0
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	440b      	add	r3, r1
 8002efc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002f00:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	3303      	adds	r3, #3
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	061a      	lsls	r2, r3, #24
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	041b      	lsls	r3, r3, #16
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3301      	adds	r3, #1
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	021b      	lsls	r3, r3, #8
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	7812      	ldrb	r2, [r2, #0]
 8002f22:	4610      	mov	r0, r2
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	6811      	ldr	r1, [r2, #0]
 8002f28:	ea43 0200 	orr.w	r2, r3, r0
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	440b      	add	r3, r1
 8002f32:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002f36:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	3318      	adds	r3, #24
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	4413      	add	r3, r2
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	6811      	ldr	r1, [r2, #0]
 8002f4a:	f043 0201 	orr.w	r2, r3, #1
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	3318      	adds	r3, #24
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	440b      	add	r3, r1
 8002f56:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e00e      	b.n	8002f7a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e006      	b.n	8002f7a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f70:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
  }
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3724      	adds	r7, #36	; 0x24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002f86:	b480      	push	{r7}
 8002f88:	b087      	sub	sp, #28
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	60f8      	str	r0, [r7, #12]
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	607a      	str	r2, [r7, #4]
 8002f92:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f9a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f9c:	7dfb      	ldrb	r3, [r7, #23]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d003      	beq.n	8002faa <HAL_CAN_GetRxMessage+0x24>
 8002fa2:	7dfb      	ldrb	r3, [r7, #23]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	f040 80f3 	bne.w	8003190 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10e      	bne.n	8002fce <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d116      	bne.n	8002fec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e0e7      	b.n	800319e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d107      	bne.n	8002fec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0d8      	b.n	800319e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	331b      	adds	r3, #27
 8002ff4:	011b      	lsls	r3, r3, #4
 8002ff6:	4413      	add	r3, r2
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0204 	and.w	r2, r3, #4
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10c      	bne.n	8003024 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	331b      	adds	r3, #27
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	4413      	add	r3, r2
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	0d5b      	lsrs	r3, r3, #21
 800301a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	e00b      	b.n	800303c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	331b      	adds	r3, #27
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	4413      	add	r3, r2
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	08db      	lsrs	r3, r3, #3
 8003034:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	331b      	adds	r3, #27
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	4413      	add	r3, r2
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0202 	and.w	r2, r3, #2
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	331b      	adds	r3, #27
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	4413      	add	r3, r2
 800305e:	3304      	adds	r3, #4
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 020f 	and.w	r2, r3, #15
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	331b      	adds	r3, #27
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	4413      	add	r3, r2
 8003076:	3304      	adds	r3, #4
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	b2da      	uxtb	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	331b      	adds	r3, #27
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	4413      	add	r3, r2
 800308e:	3304      	adds	r3, #4
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	0c1b      	lsrs	r3, r3, #16
 8003094:	b29a      	uxth	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	0a1a      	lsrs	r2, r3, #8
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	3301      	adds	r3, #1
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	0c1a      	lsrs	r2, r3, #16
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	3302      	adds	r3, #2
 80030e0:	b2d2      	uxtb	r2, r2
 80030e2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	0e1a      	lsrs	r2, r3, #24
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	3303      	adds	r3, #3
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	4413      	add	r3, r2
 8003108:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	3304      	adds	r3, #4
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	4413      	add	r3, r2
 8003120:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	0a1a      	lsrs	r2, r3, #8
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	3305      	adds	r3, #5
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	4413      	add	r3, r2
 800313a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	0c1a      	lsrs	r2, r3, #16
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	3306      	adds	r3, #6
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	4413      	add	r3, r2
 8003154:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	0e1a      	lsrs	r2, r3, #24
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	3307      	adds	r3, #7
 8003160:	b2d2      	uxtb	r2, r2
 8003162:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d108      	bne.n	800317c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	68da      	ldr	r2, [r3, #12]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0220 	orr.w	r2, r2, #32
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	e007      	b.n	800318c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0220 	orr.w	r2, r2, #32
 800318a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800318c:	2300      	movs	r3, #0
 800318e:	e006      	b.n	800319e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
  }
}
 800319e:	4618      	mov	r0, r3
 80031a0:	371c      	adds	r7, #28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
	...

080031ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031bc:	4b0c      	ldr	r3, [pc, #48]	; (80031f0 <__NVIC_SetPriorityGrouping+0x44>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031c8:	4013      	ands	r3, r2
 80031ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031de:	4a04      	ldr	r2, [pc, #16]	; (80031f0 <__NVIC_SetPriorityGrouping+0x44>)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	60d3      	str	r3, [r2, #12]
}
 80031e4:	bf00      	nop
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <__NVIC_GetPriorityGrouping+0x18>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	0a1b      	lsrs	r3, r3, #8
 80031fe:	f003 0307 	and.w	r3, r3, #7
}
 8003202:	4618      	mov	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321e:	2b00      	cmp	r3, #0
 8003220:	db0b      	blt.n	800323a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	f003 021f 	and.w	r2, r3, #31
 8003228:	4907      	ldr	r1, [pc, #28]	; (8003248 <__NVIC_EnableIRQ+0x38>)
 800322a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2001      	movs	r0, #1
 8003232:	fa00 f202 	lsl.w	r2, r0, r2
 8003236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	e000e100 	.word	0xe000e100

0800324c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	6039      	str	r1, [r7, #0]
 8003256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325c:	2b00      	cmp	r3, #0
 800325e:	db0a      	blt.n	8003276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	b2da      	uxtb	r2, r3
 8003264:	490c      	ldr	r1, [pc, #48]	; (8003298 <__NVIC_SetPriority+0x4c>)
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	0112      	lsls	r2, r2, #4
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	440b      	add	r3, r1
 8003270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003274:	e00a      	b.n	800328c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	b2da      	uxtb	r2, r3
 800327a:	4908      	ldr	r1, [pc, #32]	; (800329c <__NVIC_SetPriority+0x50>)
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	3b04      	subs	r3, #4
 8003284:	0112      	lsls	r2, r2, #4
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	440b      	add	r3, r1
 800328a:	761a      	strb	r2, [r3, #24]
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	e000e100 	.word	0xe000e100
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	; 0x24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f1c3 0307 	rsb	r3, r3, #7
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	bf28      	it	cs
 80032be:	2304      	movcs	r3, #4
 80032c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3304      	adds	r3, #4
 80032c6:	2b06      	cmp	r3, #6
 80032c8:	d902      	bls.n	80032d0 <NVIC_EncodePriority+0x30>
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3b03      	subs	r3, #3
 80032ce:	e000      	b.n	80032d2 <NVIC_EncodePriority+0x32>
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d4:	f04f 32ff 	mov.w	r2, #4294967295
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43da      	mvns	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	401a      	ands	r2, r3
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e8:	f04f 31ff 	mov.w	r1, #4294967295
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	fa01 f303 	lsl.w	r3, r1, r3
 80032f2:	43d9      	mvns	r1, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f8:	4313      	orrs	r3, r2
         );
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3724      	adds	r7, #36	; 0x24
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ff4c 	bl	80031ac <__NVIC_SetPriorityGrouping>
}
 8003314:	bf00      	nop
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
 8003328:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800332e:	f7ff ff61 	bl	80031f4 <__NVIC_GetPriorityGrouping>
 8003332:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	6978      	ldr	r0, [r7, #20]
 800333a:	f7ff ffb1 	bl	80032a0 <NVIC_EncodePriority>
 800333e:	4602      	mov	r2, r0
 8003340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003344:	4611      	mov	r1, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff ff80 	bl	800324c <__NVIC_SetPriority>
}
 800334c:	bf00      	nop
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff ff54 	bl	8003210 <__NVIC_EnableIRQ>
}
 8003368:	bf00      	nop
 800336a:	3708      	adds	r7, #8
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e014      	b.n	80033ac <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	791b      	ldrb	r3, [r3, #4]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d105      	bne.n	8003398 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7ff f81c 	bl	80023d0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	795b      	ldrb	r3, [r3, #5]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d101      	bne.n	80033ca <HAL_DAC_Start+0x16>
 80033c6:	2302      	movs	r3, #2
 80033c8:	e040      	b.n	800344c <HAL_DAC_Start+0x98>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6819      	ldr	r1, [r3, #0]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2201      	movs	r2, #1
 80033e4:	409a      	lsls	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10f      	bne.n	8003414 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80033fe:	2b3c      	cmp	r3, #60	; 0x3c
 8003400:	d11d      	bne.n	800343e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0201 	orr.w	r2, r2, #1
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	e014      	b.n	800343e <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	f003 0310 	and.w	r3, r3, #16
 8003424:	213c      	movs	r1, #60	; 0x3c
 8003426:	fa01 f303 	lsl.w	r3, r1, r3
 800342a:	429a      	cmp	r2, r3
 800342c:	d107      	bne.n	800343e <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 0202 	orr.w	r2, r2, #2
 800343c:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800346a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800346e:	d120      	bne.n	80034b2 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003476:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800347a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800347e:	d118      	bne.n	80034b2 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2204      	movs	r2, #4
 8003484:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f043 0201 	orr.w	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800349a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034aa:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 f82d 	bl	800350c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034c0:	d120      	bne.n	8003504 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034d0:	d118      	bne.n	8003504 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2204      	movs	r2, #4
 80034d6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	f043 0202 	orr.w	r2, r3, #2
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80034ec:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80034fc:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f85d 	bl	80035be <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003520:	b480      	push	{r7}
 8003522:	b087      	sub	sp, #28
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	795b      	ldrb	r3, [r3, #5]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_DAC_ConfigChannel+0x18>
 8003534:	2302      	movs	r3, #2
 8003536:	e03c      	b.n	80035b2 <HAL_DAC_ConfigChannel+0x92>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2202      	movs	r2, #2
 8003542:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f003 0310 	and.w	r3, r3, #16
 8003552:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4013      	ands	r3, r2
 8003560:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	4313      	orrs	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6819      	ldr	r1, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	22c0      	movs	r2, #192	; 0xc0
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43da      	mvns	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	400a      	ands	r2, r1
 80035a2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	371c      	adds	r7, #28
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr

080035be <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
	...

080035d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035e0:	f7ff f9a6 	bl	8002930 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e099      	b.n	8003724 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 0201 	bic.w	r2, r2, #1
 800360e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003610:	e00f      	b.n	8003632 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003612:	f7ff f98d 	bl	8002930 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b05      	cmp	r3, #5
 800361e:	d908      	bls.n	8003632 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2220      	movs	r2, #32
 8003624:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2203      	movs	r2, #3
 800362a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e078      	b.n	8003724 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1e8      	bne.n	8003612 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4b38      	ldr	r3, [pc, #224]	; (800372c <HAL_DMA_Init+0x158>)
 800364c:	4013      	ands	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800365e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800366a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003676:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4313      	orrs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003688:	2b04      	cmp	r3, #4
 800368a:	d107      	bne.n	800369c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	4313      	orrs	r3, r2
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f023 0307 	bic.w	r3, r3, #7
 80036b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d117      	bne.n	80036f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00e      	beq.n	80036f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fa91 	bl	8003c00 <DMA_CheckFifoParam>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2240      	movs	r2, #64	; 0x40
 80036e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036f2:	2301      	movs	r3, #1
 80036f4:	e016      	b.n	8003724 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 fa48 	bl	8003b94 <DMA_CalcBaseAndBitshift>
 8003704:	4603      	mov	r3, r0
 8003706:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370c:	223f      	movs	r2, #63	; 0x3f
 800370e:	409a      	lsls	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	f010803f 	.word	0xf010803f

08003730 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b086      	sub	sp, #24
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003746:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_DMA_Start_IT+0x26>
 8003752:	2302      	movs	r3, #2
 8003754:	e040      	b.n	80037d8 <HAL_DMA_Start_IT+0xa8>
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b01      	cmp	r3, #1
 8003768:	d12f      	bne.n	80037ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2202      	movs	r2, #2
 800376e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f9da 	bl	8003b38 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003788:	223f      	movs	r2, #63	; 0x3f
 800378a:	409a      	lsls	r2, r3
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0216 	orr.w	r2, r2, #22
 800379e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0208 	orr.w	r2, r2, #8
 80037b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	e005      	b.n	80037d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037d2:	2302      	movs	r3, #2
 80037d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d004      	beq.n	80037fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2280      	movs	r2, #128	; 0x80
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e00c      	b.n	8003818 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2205      	movs	r2, #5
 8003802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0201 	bic.w	r2, r2, #1
 8003814:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800382c:	2300      	movs	r3, #0
 800382e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003830:	4b8e      	ldr	r3, [pc, #568]	; (8003a6c <HAL_DMA_IRQHandler+0x248>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a8e      	ldr	r2, [pc, #568]	; (8003a70 <HAL_DMA_IRQHandler+0x24c>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	0a9b      	lsrs	r3, r3, #10
 800383c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003842:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384e:	2208      	movs	r2, #8
 8003850:	409a      	lsls	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4013      	ands	r3, r2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d01a      	beq.n	8003890 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0304 	and.w	r3, r3, #4
 8003864:	2b00      	cmp	r3, #0
 8003866:	d013      	beq.n	8003890 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 0204 	bic.w	r2, r2, #4
 8003876:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387c:	2208      	movs	r2, #8
 800387e:	409a      	lsls	r2, r3
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003888:	f043 0201 	orr.w	r2, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003894:	2201      	movs	r2, #1
 8003896:	409a      	lsls	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4013      	ands	r3, r2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d012      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00b      	beq.n	80038c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b2:	2201      	movs	r2, #1
 80038b4:	409a      	lsls	r2, r3
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038be:	f043 0202 	orr.w	r2, r3, #2
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ca:	2204      	movs	r2, #4
 80038cc:	409a      	lsls	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d012      	beq.n	80038fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00b      	beq.n	80038fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e8:	2204      	movs	r2, #4
 80038ea:	409a      	lsls	r2, r3
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f4:	f043 0204 	orr.w	r2, r3, #4
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003900:	2210      	movs	r2, #16
 8003902:	409a      	lsls	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	4013      	ands	r3, r2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d043      	beq.n	8003994 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d03c      	beq.n	8003994 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391e:	2210      	movs	r2, #16
 8003920:	409a      	lsls	r2, r3
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d018      	beq.n	8003966 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d108      	bne.n	8003954 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003946:	2b00      	cmp	r3, #0
 8003948:	d024      	beq.n	8003994 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	4798      	blx	r3
 8003952:	e01f      	b.n	8003994 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003958:	2b00      	cmp	r3, #0
 800395a:	d01b      	beq.n	8003994 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	4798      	blx	r3
 8003964:	e016      	b.n	8003994 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003970:	2b00      	cmp	r3, #0
 8003972:	d107      	bne.n	8003984 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0208 	bic.w	r2, r2, #8
 8003982:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003998:	2220      	movs	r2, #32
 800399a:	409a      	lsls	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4013      	ands	r3, r2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f000 808f 	beq.w	8003ac4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0310 	and.w	r3, r3, #16
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 8087 	beq.w	8003ac4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ba:	2220      	movs	r2, #32
 80039bc:	409a      	lsls	r2, r3
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b05      	cmp	r3, #5
 80039cc:	d136      	bne.n	8003a3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0216 	bic.w	r2, r2, #22
 80039dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695a      	ldr	r2, [r3, #20]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d103      	bne.n	80039fe <HAL_DMA_IRQHandler+0x1da>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d007      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0208 	bic.w	r2, r2, #8
 8003a0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a12:	223f      	movs	r2, #63	; 0x3f
 8003a14:	409a      	lsls	r2, r3
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d07e      	beq.n	8003b30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	4798      	blx	r3
        }
        return;
 8003a3a:	e079      	b.n	8003b30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d01d      	beq.n	8003a86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10d      	bne.n	8003a74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d031      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	4798      	blx	r3
 8003a68:	e02c      	b.n	8003ac4 <HAL_DMA_IRQHandler+0x2a0>
 8003a6a:	bf00      	nop
 8003a6c:	20000004 	.word	0x20000004
 8003a70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d023      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	4798      	blx	r3
 8003a84:	e01e      	b.n	8003ac4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10f      	bne.n	8003ab4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f022 0210 	bic.w	r2, r2, #16
 8003aa2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d003      	beq.n	8003ac4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d032      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d022      	beq.n	8003b1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2205      	movs	r2, #5
 8003adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0201 	bic.w	r2, r2, #1
 8003aee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	3301      	adds	r3, #1
 8003af4:	60bb      	str	r3, [r7, #8]
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d307      	bcc.n	8003b0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1f2      	bne.n	8003af0 <HAL_DMA_IRQHandler+0x2cc>
 8003b0a:	e000      	b.n	8003b0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2201      	movs	r2, #1
 8003b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	4798      	blx	r3
 8003b2e:	e000      	b.n	8003b32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b30:	bf00      	nop
    }
  }
}
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b54:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	2b40      	cmp	r3, #64	; 0x40
 8003b64:	d108      	bne.n	8003b78 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b76:	e007      	b.n	8003b88 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	60da      	str	r2, [r3, #12]
}
 8003b88:	bf00      	nop
 8003b8a:	3714      	adds	r7, #20
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	3b10      	subs	r3, #16
 8003ba4:	4a14      	ldr	r2, [pc, #80]	; (8003bf8 <DMA_CalcBaseAndBitshift+0x64>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	091b      	lsrs	r3, r3, #4
 8003bac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bae:	4a13      	ldr	r2, [pc, #76]	; (8003bfc <DMA_CalcBaseAndBitshift+0x68>)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d909      	bls.n	8003bd6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bca:	f023 0303 	bic.w	r3, r3, #3
 8003bce:	1d1a      	adds	r2, r3, #4
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	659a      	str	r2, [r3, #88]	; 0x58
 8003bd4:	e007      	b.n	8003be6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003bde:	f023 0303 	bic.w	r3, r3, #3
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	aaaaaaab 	.word	0xaaaaaaab
 8003bfc:	08009e34 	.word	0x08009e34

08003c00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d11f      	bne.n	8003c5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d856      	bhi.n	8003cce <DMA_CheckFifoParam+0xce>
 8003c20:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <DMA_CheckFifoParam+0x28>)
 8003c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c26:	bf00      	nop
 8003c28:	08003c39 	.word	0x08003c39
 8003c2c:	08003c4b 	.word	0x08003c4b
 8003c30:	08003c39 	.word	0x08003c39
 8003c34:	08003ccf 	.word	0x08003ccf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d046      	beq.n	8003cd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c48:	e043      	b.n	8003cd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c52:	d140      	bne.n	8003cd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c58:	e03d      	b.n	8003cd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	699b      	ldr	r3, [r3, #24]
 8003c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c62:	d121      	bne.n	8003ca8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d837      	bhi.n	8003cda <DMA_CheckFifoParam+0xda>
 8003c6a:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <DMA_CheckFifoParam+0x70>)
 8003c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c70:	08003c81 	.word	0x08003c81
 8003c74:	08003c87 	.word	0x08003c87
 8003c78:	08003c81 	.word	0x08003c81
 8003c7c:	08003c99 	.word	0x08003c99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
      break;
 8003c84:	e030      	b.n	8003ce8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d025      	beq.n	8003cde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c96:	e022      	b.n	8003cde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ca0:	d11f      	bne.n	8003ce2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ca6:	e01c      	b.n	8003ce2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2b02      	cmp	r3, #2
 8003cac:	d903      	bls.n	8003cb6 <DMA_CheckFifoParam+0xb6>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	2b03      	cmp	r3, #3
 8003cb2:	d003      	beq.n	8003cbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003cb4:	e018      	b.n	8003ce8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	73fb      	strb	r3, [r7, #15]
      break;
 8003cba:	e015      	b.n	8003ce8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00e      	beq.n	8003ce6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	73fb      	strb	r3, [r7, #15]
      break;
 8003ccc:	e00b      	b.n	8003ce6 <DMA_CheckFifoParam+0xe6>
      break;
 8003cce:	bf00      	nop
 8003cd0:	e00a      	b.n	8003ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cd2:	bf00      	nop
 8003cd4:	e008      	b.n	8003ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cd6:	bf00      	nop
 8003cd8:	e006      	b.n	8003ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cda:	bf00      	nop
 8003cdc:	e004      	b.n	8003ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8003cde:	bf00      	nop
 8003ce0:	e002      	b.n	8003ce8 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ce2:	bf00      	nop
 8003ce4:	e000      	b.n	8003ce8 <DMA_CheckFifoParam+0xe8>
      break;
 8003ce6:	bf00      	nop
    }
  } 
  
  return status; 
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop

08003cf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b089      	sub	sp, #36	; 0x24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d06:	2300      	movs	r3, #0
 8003d08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
 8003d12:	e16b      	b.n	8003fec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d14:	2201      	movs	r2, #1
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	4013      	ands	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	f040 815a 	bne.w	8003fe6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d005      	beq.n	8003d4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d130      	bne.n	8003dac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	2203      	movs	r2, #3
 8003d56:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d80:	2201      	movs	r2, #1
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	091b      	lsrs	r3, r3, #4
 8003d96:	f003 0201 	and.w	r2, r3, #1
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d017      	beq.n	8003de8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 0303 	and.w	r3, r3, #3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d123      	bne.n	8003e3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	08da      	lsrs	r2, r3, #3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	3208      	adds	r2, #8
 8003dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	220f      	movs	r2, #15
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	43db      	mvns	r3, r3
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4013      	ands	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	691a      	ldr	r2, [r3, #16]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	08da      	lsrs	r2, r3, #3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3208      	adds	r2, #8
 8003e36:	69b9      	ldr	r1, [r7, #24]
 8003e38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	2203      	movs	r2, #3
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4013      	ands	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f003 0203 	and.w	r2, r3, #3
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	fa02 f303 	lsl.w	r3, r2, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	f000 80b4 	beq.w	8003fe6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	4b60      	ldr	r3, [pc, #384]	; (8004004 <HAL_GPIO_Init+0x30c>)
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	4a5f      	ldr	r2, [pc, #380]	; (8004004 <HAL_GPIO_Init+0x30c>)
 8003e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e8e:	4b5d      	ldr	r3, [pc, #372]	; (8004004 <HAL_GPIO_Init+0x30c>)
 8003e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e9a:	4a5b      	ldr	r2, [pc, #364]	; (8004008 <HAL_GPIO_Init+0x310>)
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	089b      	lsrs	r3, r3, #2
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f003 0303 	and.w	r3, r3, #3
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	220f      	movs	r2, #15
 8003eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a52      	ldr	r2, [pc, #328]	; (800400c <HAL_GPIO_Init+0x314>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d02b      	beq.n	8003f1e <HAL_GPIO_Init+0x226>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a51      	ldr	r2, [pc, #324]	; (8004010 <HAL_GPIO_Init+0x318>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d025      	beq.n	8003f1a <HAL_GPIO_Init+0x222>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a50      	ldr	r2, [pc, #320]	; (8004014 <HAL_GPIO_Init+0x31c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d01f      	beq.n	8003f16 <HAL_GPIO_Init+0x21e>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a4f      	ldr	r2, [pc, #316]	; (8004018 <HAL_GPIO_Init+0x320>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d019      	beq.n	8003f12 <HAL_GPIO_Init+0x21a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a4e      	ldr	r2, [pc, #312]	; (800401c <HAL_GPIO_Init+0x324>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d013      	beq.n	8003f0e <HAL_GPIO_Init+0x216>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a4d      	ldr	r2, [pc, #308]	; (8004020 <HAL_GPIO_Init+0x328>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d00d      	beq.n	8003f0a <HAL_GPIO_Init+0x212>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a4c      	ldr	r2, [pc, #304]	; (8004024 <HAL_GPIO_Init+0x32c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d007      	beq.n	8003f06 <HAL_GPIO_Init+0x20e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a4b      	ldr	r2, [pc, #300]	; (8004028 <HAL_GPIO_Init+0x330>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d101      	bne.n	8003f02 <HAL_GPIO_Init+0x20a>
 8003efe:	2307      	movs	r3, #7
 8003f00:	e00e      	b.n	8003f20 <HAL_GPIO_Init+0x228>
 8003f02:	2308      	movs	r3, #8
 8003f04:	e00c      	b.n	8003f20 <HAL_GPIO_Init+0x228>
 8003f06:	2306      	movs	r3, #6
 8003f08:	e00a      	b.n	8003f20 <HAL_GPIO_Init+0x228>
 8003f0a:	2305      	movs	r3, #5
 8003f0c:	e008      	b.n	8003f20 <HAL_GPIO_Init+0x228>
 8003f0e:	2304      	movs	r3, #4
 8003f10:	e006      	b.n	8003f20 <HAL_GPIO_Init+0x228>
 8003f12:	2303      	movs	r3, #3
 8003f14:	e004      	b.n	8003f20 <HAL_GPIO_Init+0x228>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e002      	b.n	8003f20 <HAL_GPIO_Init+0x228>
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e000      	b.n	8003f20 <HAL_GPIO_Init+0x228>
 8003f1e:	2300      	movs	r3, #0
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	f002 0203 	and.w	r2, r2, #3
 8003f26:	0092      	lsls	r2, r2, #2
 8003f28:	4093      	lsls	r3, r2
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f30:	4935      	ldr	r1, [pc, #212]	; (8004008 <HAL_GPIO_Init+0x310>)
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	089b      	lsrs	r3, r3, #2
 8003f36:	3302      	adds	r3, #2
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f3e:	4b3b      	ldr	r3, [pc, #236]	; (800402c <HAL_GPIO_Init+0x334>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	43db      	mvns	r3, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d003      	beq.n	8003f62 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f62:	4a32      	ldr	r2, [pc, #200]	; (800402c <HAL_GPIO_Init+0x334>)
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f68:	4b30      	ldr	r3, [pc, #192]	; (800402c <HAL_GPIO_Init+0x334>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	43db      	mvns	r3, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4013      	ands	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d003      	beq.n	8003f8c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f8c:	4a27      	ldr	r2, [pc, #156]	; (800402c <HAL_GPIO_Init+0x334>)
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f92:	4b26      	ldr	r3, [pc, #152]	; (800402c <HAL_GPIO_Init+0x334>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	43db      	mvns	r3, r3
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fb6:	4a1d      	ldr	r2, [pc, #116]	; (800402c <HAL_GPIO_Init+0x334>)
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fbc:	4b1b      	ldr	r3, [pc, #108]	; (800402c <HAL_GPIO_Init+0x334>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fe0:	4a12      	ldr	r2, [pc, #72]	; (800402c <HAL_GPIO_Init+0x334>)
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	61fb      	str	r3, [r7, #28]
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2b0f      	cmp	r3, #15
 8003ff0:	f67f ae90 	bls.w	8003d14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	3724      	adds	r7, #36	; 0x24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40023800 	.word	0x40023800
 8004008:	40013800 	.word	0x40013800
 800400c:	40020000 	.word	0x40020000
 8004010:	40020400 	.word	0x40020400
 8004014:	40020800 	.word	0x40020800
 8004018:	40020c00 	.word	0x40020c00
 800401c:	40021000 	.word	0x40021000
 8004020:	40021400 	.word	0x40021400
 8004024:	40021800 	.word	0x40021800
 8004028:	40021c00 	.word	0x40021c00
 800402c:	40013c00 	.word	0x40013c00

08004030 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	807b      	strh	r3, [r7, #2]
 800403c:	4613      	mov	r3, r2
 800403e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004040:	787b      	ldrb	r3, [r7, #1]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004046:	887a      	ldrh	r2, [r7, #2]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800404c:	e003      	b.n	8004056 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800404e:	887b      	ldrh	r3, [r7, #2]
 8004050:	041a      	lsls	r2, r3, #16
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	619a      	str	r2, [r3, #24]
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004062:	b480      	push	{r7}
 8004064:	b085      	sub	sp, #20
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
 800406a:	460b      	mov	r3, r1
 800406c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004074:	887a      	ldrh	r2, [r7, #2]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4013      	ands	r3, r2
 800407a:	041a      	lsls	r2, r3, #16
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	43d9      	mvns	r1, r3
 8004080:	887b      	ldrh	r3, [r7, #2]
 8004082:	400b      	ands	r3, r1
 8004084:	431a      	orrs	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	619a      	str	r2, [r3, #24]
}
 800408a:	bf00      	nop
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
	...

08004098 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e267      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d075      	beq.n	80041a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040b6:	4b88      	ldr	r3, [pc, #544]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 030c 	and.w	r3, r3, #12
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d00c      	beq.n	80040dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040c2:	4b85      	ldr	r3, [pc, #532]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d112      	bne.n	80040f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ce:	4b82      	ldr	r3, [pc, #520]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040da:	d10b      	bne.n	80040f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040dc:	4b7e      	ldr	r3, [pc, #504]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d05b      	beq.n	80041a0 <HAL_RCC_OscConfig+0x108>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d157      	bne.n	80041a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e242      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040fc:	d106      	bne.n	800410c <HAL_RCC_OscConfig+0x74>
 80040fe:	4b76      	ldr	r3, [pc, #472]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a75      	ldr	r2, [pc, #468]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	e01d      	b.n	8004148 <HAL_RCC_OscConfig+0xb0>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004114:	d10c      	bne.n	8004130 <HAL_RCC_OscConfig+0x98>
 8004116:	4b70      	ldr	r3, [pc, #448]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a6f      	ldr	r2, [pc, #444]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 800411c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004120:	6013      	str	r3, [r2, #0]
 8004122:	4b6d      	ldr	r3, [pc, #436]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a6c      	ldr	r2, [pc, #432]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004128:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	e00b      	b.n	8004148 <HAL_RCC_OscConfig+0xb0>
 8004130:	4b69      	ldr	r3, [pc, #420]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a68      	ldr	r2, [pc, #416]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800413a:	6013      	str	r3, [r2, #0]
 800413c:	4b66      	ldr	r3, [pc, #408]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a65      	ldr	r2, [pc, #404]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004142:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d013      	beq.n	8004178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004150:	f7fe fbee 	bl	8002930 <HAL_GetTick>
 8004154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004156:	e008      	b.n	800416a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004158:	f7fe fbea 	bl	8002930 <HAL_GetTick>
 800415c:	4602      	mov	r2, r0
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	2b64      	cmp	r3, #100	; 0x64
 8004164:	d901      	bls.n	800416a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e207      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800416a:	4b5b      	ldr	r3, [pc, #364]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d0f0      	beq.n	8004158 <HAL_RCC_OscConfig+0xc0>
 8004176:	e014      	b.n	80041a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7fe fbda 	bl	8002930 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004180:	f7fe fbd6 	bl	8002930 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b64      	cmp	r3, #100	; 0x64
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e1f3      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004192:	4b51      	ldr	r3, [pc, #324]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0xe8>
 800419e:	e000      	b.n	80041a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d063      	beq.n	8004276 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ae:	4b4a      	ldr	r3, [pc, #296]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	f003 030c 	and.w	r3, r3, #12
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00b      	beq.n	80041d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ba:	4b47      	ldr	r3, [pc, #284]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d11c      	bne.n	8004200 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c6:	4b44      	ldr	r3, [pc, #272]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d116      	bne.n	8004200 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041d2:	4b41      	ldr	r3, [pc, #260]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d005      	beq.n	80041ea <HAL_RCC_OscConfig+0x152>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d001      	beq.n	80041ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e1c7      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ea:	4b3b      	ldr	r3, [pc, #236]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	4937      	ldr	r1, [pc, #220]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041fe:	e03a      	b.n	8004276 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d020      	beq.n	800424a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004208:	4b34      	ldr	r3, [pc, #208]	; (80042dc <HAL_RCC_OscConfig+0x244>)
 800420a:	2201      	movs	r2, #1
 800420c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420e:	f7fe fb8f 	bl	8002930 <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004214:	e008      	b.n	8004228 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004216:	f7fe fb8b 	bl	8002930 <HAL_GetTick>
 800421a:	4602      	mov	r2, r0
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	2b02      	cmp	r3, #2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e1a8      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004228:	4b2b      	ldr	r3, [pc, #172]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0f0      	beq.n	8004216 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004234:	4b28      	ldr	r3, [pc, #160]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	4925      	ldr	r1, [pc, #148]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 8004244:	4313      	orrs	r3, r2
 8004246:	600b      	str	r3, [r1, #0]
 8004248:	e015      	b.n	8004276 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800424a:	4b24      	ldr	r3, [pc, #144]	; (80042dc <HAL_RCC_OscConfig+0x244>)
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004250:	f7fe fb6e 	bl	8002930 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004258:	f7fe fb6a 	bl	8002930 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e187      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800426a:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f0      	bne.n	8004258 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b00      	cmp	r3, #0
 8004280:	d036      	beq.n	80042f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d016      	beq.n	80042b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800428a:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <HAL_RCC_OscConfig+0x248>)
 800428c:	2201      	movs	r2, #1
 800428e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004290:	f7fe fb4e 	bl	8002930 <HAL_GetTick>
 8004294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004296:	e008      	b.n	80042aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004298:	f7fe fb4a 	bl	8002930 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e167      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042aa:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <HAL_RCC_OscConfig+0x240>)
 80042ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0f0      	beq.n	8004298 <HAL_RCC_OscConfig+0x200>
 80042b6:	e01b      	b.n	80042f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042b8:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <HAL_RCC_OscConfig+0x248>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042be:	f7fe fb37 	bl	8002930 <HAL_GetTick>
 80042c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042c4:	e00e      	b.n	80042e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042c6:	f7fe fb33 	bl	8002930 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d907      	bls.n	80042e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e150      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
 80042d8:	40023800 	.word	0x40023800
 80042dc:	42470000 	.word	0x42470000
 80042e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e4:	4b88      	ldr	r3, [pc, #544]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 80042e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1ea      	bne.n	80042c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f000 8097 	beq.w	800442c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042fe:	2300      	movs	r3, #0
 8004300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004302:	4b81      	ldr	r3, [pc, #516]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10f      	bne.n	800432e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800430e:	2300      	movs	r3, #0
 8004310:	60bb      	str	r3, [r7, #8]
 8004312:	4b7d      	ldr	r3, [pc, #500]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 8004314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004316:	4a7c      	ldr	r2, [pc, #496]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 8004318:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800431c:	6413      	str	r3, [r2, #64]	; 0x40
 800431e:	4b7a      	ldr	r3, [pc, #488]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004326:	60bb      	str	r3, [r7, #8]
 8004328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800432a:	2301      	movs	r3, #1
 800432c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432e:	4b77      	ldr	r3, [pc, #476]	; (800450c <HAL_RCC_OscConfig+0x474>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004336:	2b00      	cmp	r3, #0
 8004338:	d118      	bne.n	800436c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800433a:	4b74      	ldr	r3, [pc, #464]	; (800450c <HAL_RCC_OscConfig+0x474>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a73      	ldr	r2, [pc, #460]	; (800450c <HAL_RCC_OscConfig+0x474>)
 8004340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004346:	f7fe faf3 	bl	8002930 <HAL_GetTick>
 800434a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434c:	e008      	b.n	8004360 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800434e:	f7fe faef 	bl	8002930 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b02      	cmp	r3, #2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e10c      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004360:	4b6a      	ldr	r3, [pc, #424]	; (800450c <HAL_RCC_OscConfig+0x474>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0f0      	beq.n	800434e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d106      	bne.n	8004382 <HAL_RCC_OscConfig+0x2ea>
 8004374:	4b64      	ldr	r3, [pc, #400]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 8004376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004378:	4a63      	ldr	r2, [pc, #396]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 800437a:	f043 0301 	orr.w	r3, r3, #1
 800437e:	6713      	str	r3, [r2, #112]	; 0x70
 8004380:	e01c      	b.n	80043bc <HAL_RCC_OscConfig+0x324>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2b05      	cmp	r3, #5
 8004388:	d10c      	bne.n	80043a4 <HAL_RCC_OscConfig+0x30c>
 800438a:	4b5f      	ldr	r3, [pc, #380]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438e:	4a5e      	ldr	r2, [pc, #376]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 8004390:	f043 0304 	orr.w	r3, r3, #4
 8004394:	6713      	str	r3, [r2, #112]	; 0x70
 8004396:	4b5c      	ldr	r3, [pc, #368]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439a:	4a5b      	ldr	r2, [pc, #364]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	6713      	str	r3, [r2, #112]	; 0x70
 80043a2:	e00b      	b.n	80043bc <HAL_RCC_OscConfig+0x324>
 80043a4:	4b58      	ldr	r3, [pc, #352]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 80043a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a8:	4a57      	ldr	r2, [pc, #348]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 80043aa:	f023 0301 	bic.w	r3, r3, #1
 80043ae:	6713      	str	r3, [r2, #112]	; 0x70
 80043b0:	4b55      	ldr	r3, [pc, #340]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 80043b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b4:	4a54      	ldr	r2, [pc, #336]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 80043b6:	f023 0304 	bic.w	r3, r3, #4
 80043ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d015      	beq.n	80043f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c4:	f7fe fab4 	bl	8002930 <HAL_GetTick>
 80043c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ca:	e00a      	b.n	80043e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043cc:	f7fe fab0 	bl	8002930 <HAL_GetTick>
 80043d0:	4602      	mov	r2, r0
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043da:	4293      	cmp	r3, r2
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e0cb      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043e2:	4b49      	ldr	r3, [pc, #292]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 80043e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0ee      	beq.n	80043cc <HAL_RCC_OscConfig+0x334>
 80043ee:	e014      	b.n	800441a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f0:	f7fe fa9e 	bl	8002930 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f6:	e00a      	b.n	800440e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043f8:	f7fe fa9a 	bl	8002930 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	f241 3288 	movw	r2, #5000	; 0x1388
 8004406:	4293      	cmp	r3, r2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e0b5      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800440e:	4b3e      	ldr	r3, [pc, #248]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 8004410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1ee      	bne.n	80043f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800441a:	7dfb      	ldrb	r3, [r7, #23]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d105      	bne.n	800442c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004420:	4b39      	ldr	r3, [pc, #228]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	4a38      	ldr	r2, [pc, #224]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 8004426:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800442a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 80a1 	beq.w	8004578 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004436:	4b34      	ldr	r3, [pc, #208]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b08      	cmp	r3, #8
 8004440:	d05c      	beq.n	80044fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	2b02      	cmp	r3, #2
 8004448:	d141      	bne.n	80044ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444a:	4b31      	ldr	r3, [pc, #196]	; (8004510 <HAL_RCC_OscConfig+0x478>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7fe fa6e 	bl	8002930 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004458:	f7fe fa6a 	bl	8002930 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e087      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446a:	4b27      	ldr	r3, [pc, #156]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69da      	ldr	r2, [r3, #28]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6a1b      	ldr	r3, [r3, #32]
 800447e:	431a      	orrs	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	019b      	lsls	r3, r3, #6
 8004486:	431a      	orrs	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448c:	085b      	lsrs	r3, r3, #1
 800448e:	3b01      	subs	r3, #1
 8004490:	041b      	lsls	r3, r3, #16
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	061b      	lsls	r3, r3, #24
 800449a:	491b      	ldr	r1, [pc, #108]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 800449c:	4313      	orrs	r3, r2
 800449e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044a0:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <HAL_RCC_OscConfig+0x478>)
 80044a2:	2201      	movs	r2, #1
 80044a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a6:	f7fe fa43 	bl	8002930 <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ac:	e008      	b.n	80044c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ae:	f7fe fa3f 	bl	8002930 <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d901      	bls.n	80044c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e05c      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044c0:	4b11      	ldr	r3, [pc, #68]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d0f0      	beq.n	80044ae <HAL_RCC_OscConfig+0x416>
 80044cc:	e054      	b.n	8004578 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ce:	4b10      	ldr	r3, [pc, #64]	; (8004510 <HAL_RCC_OscConfig+0x478>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d4:	f7fe fa2c 	bl	8002930 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044da:	e008      	b.n	80044ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044dc:	f7fe fa28 	bl	8002930 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d901      	bls.n	80044ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	e045      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <HAL_RCC_OscConfig+0x470>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d1f0      	bne.n	80044dc <HAL_RCC_OscConfig+0x444>
 80044fa:	e03d      	b.n	8004578 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d107      	bne.n	8004514 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e038      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
 8004508:	40023800 	.word	0x40023800
 800450c:	40007000 	.word	0x40007000
 8004510:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004514:	4b1b      	ldr	r3, [pc, #108]	; (8004584 <HAL_RCC_OscConfig+0x4ec>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d028      	beq.n	8004574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800452c:	429a      	cmp	r2, r3
 800452e:	d121      	bne.n	8004574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453a:	429a      	cmp	r2, r3
 800453c:	d11a      	bne.n	8004574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004544:	4013      	ands	r3, r2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800454a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800454c:	4293      	cmp	r3, r2
 800454e:	d111      	bne.n	8004574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800455a:	085b      	lsrs	r3, r3, #1
 800455c:	3b01      	subs	r3, #1
 800455e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004560:	429a      	cmp	r2, r3
 8004562:	d107      	bne.n	8004574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004570:	429a      	cmp	r2, r3
 8004572:	d001      	beq.n	8004578 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3718      	adds	r7, #24
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	40023800 	.word	0x40023800

08004588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0cc      	b.n	8004736 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800459c:	4b68      	ldr	r3, [pc, #416]	; (8004740 <HAL_RCC_ClockConfig+0x1b8>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	683a      	ldr	r2, [r7, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d90c      	bls.n	80045c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045aa:	4b65      	ldr	r3, [pc, #404]	; (8004740 <HAL_RCC_ClockConfig+0x1b8>)
 80045ac:	683a      	ldr	r2, [r7, #0]
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045b2:	4b63      	ldr	r3, [pc, #396]	; (8004740 <HAL_RCC_ClockConfig+0x1b8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0307 	and.w	r3, r3, #7
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d001      	beq.n	80045c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e0b8      	b.n	8004736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d020      	beq.n	8004612 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045dc:	4b59      	ldr	r3, [pc, #356]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	4a58      	ldr	r2, [pc, #352]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d005      	beq.n	8004600 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045f4:	4b53      	ldr	r3, [pc, #332]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	4a52      	ldr	r2, [pc, #328]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 80045fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004600:	4b50      	ldr	r3, [pc, #320]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	494d      	ldr	r1, [pc, #308]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	d044      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d107      	bne.n	8004636 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004626:	4b47      	ldr	r3, [pc, #284]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d119      	bne.n	8004666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e07f      	b.n	8004736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d003      	beq.n	8004646 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004642:	2b03      	cmp	r3, #3
 8004644:	d107      	bne.n	8004656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004646:	4b3f      	ldr	r3, [pc, #252]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d109      	bne.n	8004666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e06f      	b.n	8004736 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004656:	4b3b      	ldr	r3, [pc, #236]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d101      	bne.n	8004666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e067      	b.n	8004736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004666:	4b37      	ldr	r3, [pc, #220]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f023 0203 	bic.w	r2, r3, #3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	4934      	ldr	r1, [pc, #208]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004674:	4313      	orrs	r3, r2
 8004676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004678:	f7fe f95a 	bl	8002930 <HAL_GetTick>
 800467c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467e:	e00a      	b.n	8004696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004680:	f7fe f956 	bl	8002930 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	f241 3288 	movw	r2, #5000	; 0x1388
 800468e:	4293      	cmp	r3, r2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e04f      	b.n	8004736 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004696:	4b2b      	ldr	r3, [pc, #172]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 020c 	and.w	r2, r3, #12
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d1eb      	bne.n	8004680 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046a8:	4b25      	ldr	r3, [pc, #148]	; (8004740 <HAL_RCC_ClockConfig+0x1b8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0307 	and.w	r3, r3, #7
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d20c      	bcs.n	80046d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b6:	4b22      	ldr	r3, [pc, #136]	; (8004740 <HAL_RCC_ClockConfig+0x1b8>)
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046be:	4b20      	ldr	r3, [pc, #128]	; (8004740 <HAL_RCC_ClockConfig+0x1b8>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d001      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e032      	b.n	8004736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d008      	beq.n	80046ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046dc:	4b19      	ldr	r3, [pc, #100]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	4916      	ldr	r1, [pc, #88]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0308 	and.w	r3, r3, #8
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d009      	beq.n	800470e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046fa:	4b12      	ldr	r3, [pc, #72]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	490e      	ldr	r1, [pc, #56]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	4313      	orrs	r3, r2
 800470c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800470e:	f000 f821 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8004712:	4602      	mov	r2, r0
 8004714:	4b0b      	ldr	r3, [pc, #44]	; (8004744 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	091b      	lsrs	r3, r3, #4
 800471a:	f003 030f 	and.w	r3, r3, #15
 800471e:	490a      	ldr	r1, [pc, #40]	; (8004748 <HAL_RCC_ClockConfig+0x1c0>)
 8004720:	5ccb      	ldrb	r3, [r1, r3]
 8004722:	fa22 f303 	lsr.w	r3, r2, r3
 8004726:	4a09      	ldr	r2, [pc, #36]	; (800474c <HAL_RCC_ClockConfig+0x1c4>)
 8004728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800472a:	4b09      	ldr	r3, [pc, #36]	; (8004750 <HAL_RCC_ClockConfig+0x1c8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4618      	mov	r0, r3
 8004730:	f7fd ffc4 	bl	80026bc <HAL_InitTick>

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	40023c00 	.word	0x40023c00
 8004744:	40023800 	.word	0x40023800
 8004748:	08009e1c 	.word	0x08009e1c
 800474c:	20000004 	.word	0x20000004
 8004750:	20000008 	.word	0x20000008

08004754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004758:	b090      	sub	sp, #64	; 0x40
 800475a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	637b      	str	r3, [r7, #52]	; 0x34
 8004760:	2300      	movs	r3, #0
 8004762:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004764:	2300      	movs	r3, #0
 8004766:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800476c:	4b59      	ldr	r3, [pc, #356]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x180>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 030c 	and.w	r3, r3, #12
 8004774:	2b08      	cmp	r3, #8
 8004776:	d00d      	beq.n	8004794 <HAL_RCC_GetSysClockFreq+0x40>
 8004778:	2b08      	cmp	r3, #8
 800477a:	f200 80a1 	bhi.w	80048c0 <HAL_RCC_GetSysClockFreq+0x16c>
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <HAL_RCC_GetSysClockFreq+0x34>
 8004782:	2b04      	cmp	r3, #4
 8004784:	d003      	beq.n	800478e <HAL_RCC_GetSysClockFreq+0x3a>
 8004786:	e09b      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004788:	4b53      	ldr	r3, [pc, #332]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x184>)
 800478a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800478c:	e09b      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800478e:	4b53      	ldr	r3, [pc, #332]	; (80048dc <HAL_RCC_GetSysClockFreq+0x188>)
 8004790:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004792:	e098      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004794:	4b4f      	ldr	r3, [pc, #316]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800479c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800479e:	4b4d      	ldr	r3, [pc, #308]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d028      	beq.n	80047fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047aa:	4b4a      	ldr	r3, [pc, #296]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	099b      	lsrs	r3, r3, #6
 80047b0:	2200      	movs	r2, #0
 80047b2:	623b      	str	r3, [r7, #32]
 80047b4:	627a      	str	r2, [r7, #36]	; 0x24
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80047bc:	2100      	movs	r1, #0
 80047be:	4b47      	ldr	r3, [pc, #284]	; (80048dc <HAL_RCC_GetSysClockFreq+0x188>)
 80047c0:	fb03 f201 	mul.w	r2, r3, r1
 80047c4:	2300      	movs	r3, #0
 80047c6:	fb00 f303 	mul.w	r3, r0, r3
 80047ca:	4413      	add	r3, r2
 80047cc:	4a43      	ldr	r2, [pc, #268]	; (80048dc <HAL_RCC_GetSysClockFreq+0x188>)
 80047ce:	fba0 1202 	umull	r1, r2, r0, r2
 80047d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047d4:	460a      	mov	r2, r1
 80047d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80047d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047da:	4413      	add	r3, r2
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e0:	2200      	movs	r2, #0
 80047e2:	61bb      	str	r3, [r7, #24]
 80047e4:	61fa      	str	r2, [r7, #28]
 80047e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80047ee:	f7fc f98d 	bl	8000b0c <__aeabi_uldivmod>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4613      	mov	r3, r2
 80047f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047fa:	e053      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047fc:	4b35      	ldr	r3, [pc, #212]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	099b      	lsrs	r3, r3, #6
 8004802:	2200      	movs	r2, #0
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	617a      	str	r2, [r7, #20]
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800480e:	f04f 0b00 	mov.w	fp, #0
 8004812:	4652      	mov	r2, sl
 8004814:	465b      	mov	r3, fp
 8004816:	f04f 0000 	mov.w	r0, #0
 800481a:	f04f 0100 	mov.w	r1, #0
 800481e:	0159      	lsls	r1, r3, #5
 8004820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004824:	0150      	lsls	r0, r2, #5
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	ebb2 080a 	subs.w	r8, r2, sl
 800482e:	eb63 090b 	sbc.w	r9, r3, fp
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800483e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004842:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004846:	ebb2 0408 	subs.w	r4, r2, r8
 800484a:	eb63 0509 	sbc.w	r5, r3, r9
 800484e:	f04f 0200 	mov.w	r2, #0
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	00eb      	lsls	r3, r5, #3
 8004858:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800485c:	00e2      	lsls	r2, r4, #3
 800485e:	4614      	mov	r4, r2
 8004860:	461d      	mov	r5, r3
 8004862:	eb14 030a 	adds.w	r3, r4, sl
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	eb45 030b 	adc.w	r3, r5, fp
 800486c:	607b      	str	r3, [r7, #4]
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	e9d7 4500 	ldrd	r4, r5, [r7]
 800487a:	4629      	mov	r1, r5
 800487c:	028b      	lsls	r3, r1, #10
 800487e:	4621      	mov	r1, r4
 8004880:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004884:	4621      	mov	r1, r4
 8004886:	028a      	lsls	r2, r1, #10
 8004888:	4610      	mov	r0, r2
 800488a:	4619      	mov	r1, r3
 800488c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488e:	2200      	movs	r2, #0
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	60fa      	str	r2, [r7, #12]
 8004894:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004898:	f7fc f938 	bl	8000b0c <__aeabi_uldivmod>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4613      	mov	r3, r2
 80048a2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048a4:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x180>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	0c1b      	lsrs	r3, r3, #16
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	3301      	adds	r3, #1
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80048b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048be:	e002      	b.n	80048c6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048c0:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x184>)
 80048c2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80048c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3740      	adds	r7, #64	; 0x40
 80048cc:	46bd      	mov	sp, r7
 80048ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048d2:	bf00      	nop
 80048d4:	40023800 	.word	0x40023800
 80048d8:	00f42400 	.word	0x00f42400
 80048dc:	017d7840 	.word	0x017d7840

080048e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048e0:	b480      	push	{r7}
 80048e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048e4:	4b03      	ldr	r3, [pc, #12]	; (80048f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048e6:	681b      	ldr	r3, [r3, #0]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	20000004 	.word	0x20000004

080048f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048fc:	f7ff fff0 	bl	80048e0 <HAL_RCC_GetHCLKFreq>
 8004900:	4602      	mov	r2, r0
 8004902:	4b05      	ldr	r3, [pc, #20]	; (8004918 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	0a9b      	lsrs	r3, r3, #10
 8004908:	f003 0307 	and.w	r3, r3, #7
 800490c:	4903      	ldr	r1, [pc, #12]	; (800491c <HAL_RCC_GetPCLK1Freq+0x24>)
 800490e:	5ccb      	ldrb	r3, [r1, r3]
 8004910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004914:	4618      	mov	r0, r3
 8004916:	bd80      	pop	{r7, pc}
 8004918:	40023800 	.word	0x40023800
 800491c:	08009e2c 	.word	0x08009e2c

08004920 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004924:	f7ff ffdc 	bl	80048e0 <HAL_RCC_GetHCLKFreq>
 8004928:	4602      	mov	r2, r0
 800492a:	4b05      	ldr	r3, [pc, #20]	; (8004940 <HAL_RCC_GetPCLK2Freq+0x20>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	0b5b      	lsrs	r3, r3, #13
 8004930:	f003 0307 	and.w	r3, r3, #7
 8004934:	4903      	ldr	r1, [pc, #12]	; (8004944 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004936:	5ccb      	ldrb	r3, [r1, r3]
 8004938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800493c:	4618      	mov	r0, r3
 800493e:	bd80      	pop	{r7, pc}
 8004940:	40023800 	.word	0x40023800
 8004944:	08009e2c 	.word	0x08009e2c

08004948 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	220f      	movs	r2, #15
 8004956:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004958:	4b12      	ldr	r3, [pc, #72]	; (80049a4 <HAL_RCC_GetClockConfig+0x5c>)
 800495a:	689b      	ldr	r3, [r3, #8]
 800495c:	f003 0203 	and.w	r2, r3, #3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004964:	4b0f      	ldr	r3, [pc, #60]	; (80049a4 <HAL_RCC_GetClockConfig+0x5c>)
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004970:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <HAL_RCC_GetClockConfig+0x5c>)
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800497c:	4b09      	ldr	r3, [pc, #36]	; (80049a4 <HAL_RCC_GetClockConfig+0x5c>)
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	08db      	lsrs	r3, r3, #3
 8004982:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800498a:	4b07      	ldr	r3, [pc, #28]	; (80049a8 <HAL_RCC_GetClockConfig+0x60>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0207 	and.w	r2, r3, #7
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	601a      	str	r2, [r3, #0]
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	40023800 	.word	0x40023800
 80049a8:	40023c00 	.word	0x40023c00

080049ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e041      	b.n	8004a42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d106      	bne.n	80049d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7fd fd48 	bl	8002468 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	3304      	adds	r3, #4
 80049e8:	4619      	mov	r1, r3
 80049ea:	4610      	mov	r0, r2
 80049ec:	f000 ff26 	bl	800583c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3708      	adds	r7, #8
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
	...

08004a4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d001      	beq.n	8004a64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e04e      	b.n	8004b02 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0201 	orr.w	r2, r2, #1
 8004a7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a23      	ldr	r2, [pc, #140]	; (8004b10 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d022      	beq.n	8004acc <HAL_TIM_Base_Start_IT+0x80>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a8e:	d01d      	beq.n	8004acc <HAL_TIM_Base_Start_IT+0x80>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a1f      	ldr	r2, [pc, #124]	; (8004b14 <HAL_TIM_Base_Start_IT+0xc8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d018      	beq.n	8004acc <HAL_TIM_Base_Start_IT+0x80>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a1e      	ldr	r2, [pc, #120]	; (8004b18 <HAL_TIM_Base_Start_IT+0xcc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d013      	beq.n	8004acc <HAL_TIM_Base_Start_IT+0x80>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1c      	ldr	r2, [pc, #112]	; (8004b1c <HAL_TIM_Base_Start_IT+0xd0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d00e      	beq.n	8004acc <HAL_TIM_Base_Start_IT+0x80>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a1b      	ldr	r2, [pc, #108]	; (8004b20 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d009      	beq.n	8004acc <HAL_TIM_Base_Start_IT+0x80>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a19      	ldr	r2, [pc, #100]	; (8004b24 <HAL_TIM_Base_Start_IT+0xd8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d004      	beq.n	8004acc <HAL_TIM_Base_Start_IT+0x80>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a18      	ldr	r2, [pc, #96]	; (8004b28 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d111      	bne.n	8004af0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b06      	cmp	r3, #6
 8004adc:	d010      	beq.n	8004b00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f042 0201 	orr.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aee:	e007      	b.n	8004b00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0201 	orr.w	r2, r2, #1
 8004afe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	40010000 	.word	0x40010000
 8004b14:	40000400 	.word	0x40000400
 8004b18:	40000800 	.word	0x40000800
 8004b1c:	40000c00 	.word	0x40000c00
 8004b20:	40010400 	.word	0x40010400
 8004b24:	40014000 	.word	0x40014000
 8004b28:	40001800 	.word	0x40001800

08004b2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e041      	b.n	8004bc2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d106      	bne.n	8004b58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f839 	bl	8004bca <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3304      	adds	r3, #4
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4610      	mov	r0, r2
 8004b6c:	f000 fe66 	bl	800583c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
	...

08004be0 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d109      	bne.n	8004c0c <HAL_TIM_PWM_Start_DMA+0x2c>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	bf0c      	ite	eq
 8004c04:	2301      	moveq	r3, #1
 8004c06:	2300      	movne	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	e022      	b.n	8004c52 <HAL_TIM_PWM_Start_DMA+0x72>
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d109      	bne.n	8004c26 <HAL_TIM_PWM_Start_DMA+0x46>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	bf0c      	ite	eq
 8004c1e:	2301      	moveq	r3, #1
 8004c20:	2300      	movne	r3, #0
 8004c22:	b2db      	uxtb	r3, r3
 8004c24:	e015      	b.n	8004c52 <HAL_TIM_PWM_Start_DMA+0x72>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d109      	bne.n	8004c40 <HAL_TIM_PWM_Start_DMA+0x60>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	bf0c      	ite	eq
 8004c38:	2301      	moveq	r3, #1
 8004c3a:	2300      	movne	r3, #0
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	e008      	b.n	8004c52 <HAL_TIM_PWM_Start_DMA+0x72>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	bf0c      	ite	eq
 8004c4c:	2301      	moveq	r3, #1
 8004c4e:	2300      	movne	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004c56:	2302      	movs	r3, #2
 8004c58:	e171      	b.n	8004f3e <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d109      	bne.n	8004c74 <HAL_TIM_PWM_Start_DMA+0x94>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	bf0c      	ite	eq
 8004c6c:	2301      	moveq	r3, #1
 8004c6e:	2300      	movne	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	e022      	b.n	8004cba <HAL_TIM_PWM_Start_DMA+0xda>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d109      	bne.n	8004c8e <HAL_TIM_PWM_Start_DMA+0xae>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	bf0c      	ite	eq
 8004c86:	2301      	moveq	r3, #1
 8004c88:	2300      	movne	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	e015      	b.n	8004cba <HAL_TIM_PWM_Start_DMA+0xda>
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d109      	bne.n	8004ca8 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	bf0c      	ite	eq
 8004ca0:	2301      	moveq	r3, #1
 8004ca2:	2300      	movne	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	e008      	b.n	8004cba <HAL_TIM_PWM_Start_DMA+0xda>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	bf0c      	ite	eq
 8004cb4:	2301      	moveq	r3, #1
 8004cb6:	2300      	movne	r3, #0
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d024      	beq.n	8004d08 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d104      	bne.n	8004cce <HAL_TIM_PWM_Start_DMA+0xee>
 8004cc4:	887b      	ldrh	r3, [r7, #2]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e137      	b.n	8004f3e <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d104      	bne.n	8004cde <HAL_TIM_PWM_Start_DMA+0xfe>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cdc:	e016      	b.n	8004d0c <HAL_TIM_PWM_Start_DMA+0x12c>
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2b04      	cmp	r3, #4
 8004ce2:	d104      	bne.n	8004cee <HAL_TIM_PWM_Start_DMA+0x10e>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cec:	e00e      	b.n	8004d0c <HAL_TIM_PWM_Start_DMA+0x12c>
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d104      	bne.n	8004cfe <HAL_TIM_PWM_Start_DMA+0x11e>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cfc:	e006      	b.n	8004d0c <HAL_TIM_PWM_Start_DMA+0x12c>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2202      	movs	r2, #2
 8004d02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d06:	e001      	b.n	8004d0c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e118      	b.n	8004f3e <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b0c      	cmp	r3, #12
 8004d10:	f200 80ae 	bhi.w	8004e70 <HAL_TIM_PWM_Start_DMA+0x290>
 8004d14:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1a:	bf00      	nop
 8004d1c:	08004d51 	.word	0x08004d51
 8004d20:	08004e71 	.word	0x08004e71
 8004d24:	08004e71 	.word	0x08004e71
 8004d28:	08004e71 	.word	0x08004e71
 8004d2c:	08004d99 	.word	0x08004d99
 8004d30:	08004e71 	.word	0x08004e71
 8004d34:	08004e71 	.word	0x08004e71
 8004d38:	08004e71 	.word	0x08004e71
 8004d3c:	08004de1 	.word	0x08004de1
 8004d40:	08004e71 	.word	0x08004e71
 8004d44:	08004e71 	.word	0x08004e71
 8004d48:	08004e71 	.word	0x08004e71
 8004d4c:	08004e29 	.word	0x08004e29
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	4a7c      	ldr	r2, [pc, #496]	; (8004f48 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004d56:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	4a7b      	ldr	r2, [pc, #492]	; (8004f4c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004d5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d64:	4a7a      	ldr	r2, [pc, #488]	; (8004f50 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004d66:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004d6c:	6879      	ldr	r1, [r7, #4]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3334      	adds	r3, #52	; 0x34
 8004d74:	461a      	mov	r2, r3
 8004d76:	887b      	ldrh	r3, [r7, #2]
 8004d78:	f7fe fcda 	bl	8003730 <HAL_DMA_Start_IT>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e0db      	b.n	8004f3e <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d94:	60da      	str	r2, [r3, #12]
      break;
 8004d96:	e06e      	b.n	8004e76 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d9c:	4a6a      	ldr	r2, [pc, #424]	; (8004f48 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004d9e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da4:	4a69      	ldr	r2, [pc, #420]	; (8004f4c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004da6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	4a68      	ldr	r2, [pc, #416]	; (8004f50 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004dae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004db4:	6879      	ldr	r1, [r7, #4]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	3338      	adds	r3, #56	; 0x38
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	887b      	ldrh	r3, [r7, #2]
 8004dc0:	f7fe fcb6 	bl	8003730 <HAL_DMA_Start_IT>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e0b7      	b.n	8004f3e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ddc:	60da      	str	r2, [r3, #12]
      break;
 8004dde:	e04a      	b.n	8004e76 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	4a58      	ldr	r2, [pc, #352]	; (8004f48 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004de6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	4a57      	ldr	r2, [pc, #348]	; (8004f4c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	4a56      	ldr	r2, [pc, #344]	; (8004f50 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004df6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	333c      	adds	r3, #60	; 0x3c
 8004e04:	461a      	mov	r2, r3
 8004e06:	887b      	ldrh	r3, [r7, #2]
 8004e08:	f7fe fc92 	bl	8003730 <HAL_DMA_Start_IT>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e093      	b.n	8004f3e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68da      	ldr	r2, [r3, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e24:	60da      	str	r2, [r3, #12]
      break;
 8004e26:	e026      	b.n	8004e76 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2c:	4a46      	ldr	r2, [pc, #280]	; (8004f48 <HAL_TIM_PWM_Start_DMA+0x368>)
 8004e2e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e34:	4a45      	ldr	r2, [pc, #276]	; (8004f4c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8004e36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3c:	4a44      	ldr	r2, [pc, #272]	; (8004f50 <HAL_TIM_PWM_Start_DMA+0x370>)
 8004e3e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e44:	6879      	ldr	r1, [r7, #4]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3340      	adds	r3, #64	; 0x40
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	887b      	ldrh	r3, [r7, #2]
 8004e50:	f7fe fc6e 	bl	8003730 <HAL_DMA_Start_IT>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e06f      	b.n	8004f3e <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68da      	ldr	r2, [r3, #12]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e6c:	60da      	str	r2, [r3, #12]
      break;
 8004e6e:	e002      	b.n	8004e76 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	75fb      	strb	r3, [r7, #23]
      break;
 8004e74:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e76:	7dfb      	ldrb	r3, [r7, #23]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d15f      	bne.n	8004f3c <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2201      	movs	r2, #1
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f000 ffc3 	bl	8005e10 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a31      	ldr	r2, [pc, #196]	; (8004f54 <HAL_TIM_PWM_Start_DMA+0x374>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d004      	beq.n	8004e9e <HAL_TIM_PWM_Start_DMA+0x2be>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a2f      	ldr	r2, [pc, #188]	; (8004f58 <HAL_TIM_PWM_Start_DMA+0x378>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d101      	bne.n	8004ea2 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e000      	b.n	8004ea4 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d007      	beq.n	8004eb8 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004eb6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a25      	ldr	r2, [pc, #148]	; (8004f54 <HAL_TIM_PWM_Start_DMA+0x374>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d022      	beq.n	8004f08 <HAL_TIM_PWM_Start_DMA+0x328>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eca:	d01d      	beq.n	8004f08 <HAL_TIM_PWM_Start_DMA+0x328>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a22      	ldr	r2, [pc, #136]	; (8004f5c <HAL_TIM_PWM_Start_DMA+0x37c>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d018      	beq.n	8004f08 <HAL_TIM_PWM_Start_DMA+0x328>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a21      	ldr	r2, [pc, #132]	; (8004f60 <HAL_TIM_PWM_Start_DMA+0x380>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d013      	beq.n	8004f08 <HAL_TIM_PWM_Start_DMA+0x328>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a1f      	ldr	r2, [pc, #124]	; (8004f64 <HAL_TIM_PWM_Start_DMA+0x384>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00e      	beq.n	8004f08 <HAL_TIM_PWM_Start_DMA+0x328>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1a      	ldr	r2, [pc, #104]	; (8004f58 <HAL_TIM_PWM_Start_DMA+0x378>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d009      	beq.n	8004f08 <HAL_TIM_PWM_Start_DMA+0x328>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a1b      	ldr	r2, [pc, #108]	; (8004f68 <HAL_TIM_PWM_Start_DMA+0x388>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d004      	beq.n	8004f08 <HAL_TIM_PWM_Start_DMA+0x328>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a1a      	ldr	r2, [pc, #104]	; (8004f6c <HAL_TIM_PWM_Start_DMA+0x38c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d111      	bne.n	8004f2c <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	2b06      	cmp	r3, #6
 8004f18:	d010      	beq.n	8004f3c <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 0201 	orr.w	r2, r2, #1
 8004f28:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2a:	e007      	b.n	8004f3c <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3718      	adds	r7, #24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	0800572d 	.word	0x0800572d
 8004f4c:	080057d5 	.word	0x080057d5
 8004f50:	0800569b 	.word	0x0800569b
 8004f54:	40010000 	.word	0x40010000
 8004f58:	40010400 	.word	0x40010400
 8004f5c:	40000400 	.word	0x40000400
 8004f60:	40000800 	.word	0x40000800
 8004f64:	40000c00 	.word	0x40000c00
 8004f68:	40014000 	.word	0x40014000
 8004f6c:	40001800 	.word	0x40001800

08004f70 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	2b0c      	cmp	r3, #12
 8004f82:	d855      	bhi.n	8005030 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004f84:	a201      	add	r2, pc, #4	; (adr r2, 8004f8c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f8a:	bf00      	nop
 8004f8c:	08004fc1 	.word	0x08004fc1
 8004f90:	08005031 	.word	0x08005031
 8004f94:	08005031 	.word	0x08005031
 8004f98:	08005031 	.word	0x08005031
 8004f9c:	08004fdd 	.word	0x08004fdd
 8004fa0:	08005031 	.word	0x08005031
 8004fa4:	08005031 	.word	0x08005031
 8004fa8:	08005031 	.word	0x08005031
 8004fac:	08004ff9 	.word	0x08004ff9
 8004fb0:	08005031 	.word	0x08005031
 8004fb4:	08005031 	.word	0x08005031
 8004fb8:	08005031 	.word	0x08005031
 8004fbc:	08005015 	.word	0x08005015
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68da      	ldr	r2, [r3, #12]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004fce:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7fe fc03 	bl	80037e0 <HAL_DMA_Abort_IT>
      break;
 8004fda:	e02c      	b.n	8005036 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fe fbf5 	bl	80037e0 <HAL_DMA_Abort_IT>
      break;
 8004ff6:	e01e      	b.n	8005036 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68da      	ldr	r2, [r3, #12]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005006:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	4618      	mov	r0, r3
 800500e:	f7fe fbe7 	bl	80037e0 <HAL_DMA_Abort_IT>
      break;
 8005012:	e010      	b.n	8005036 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005022:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005028:	4618      	mov	r0, r3
 800502a:	f7fe fbd9 	bl	80037e0 <HAL_DMA_Abort_IT>
      break;
 800502e:	e002      	b.n	8005036 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	73fb      	strb	r3, [r7, #15]
      break;
 8005034:	bf00      	nop
  }

  if (status == HAL_OK)
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d161      	bne.n	8005100 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2200      	movs	r2, #0
 8005042:	6839      	ldr	r1, [r7, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f000 fee3 	bl	8005e10 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a2f      	ldr	r2, [pc, #188]	; (800510c <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d004      	beq.n	800505e <HAL_TIM_PWM_Stop_DMA+0xee>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a2d      	ldr	r2, [pc, #180]	; (8005110 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d101      	bne.n	8005062 <HAL_TIM_PWM_Stop_DMA+0xf2>
 800505e:	2301      	movs	r3, #1
 8005060:	e000      	b.n	8005064 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8005062:	2300      	movs	r3, #0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d017      	beq.n	8005098 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6a1a      	ldr	r2, [r3, #32]
 800506e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005072:	4013      	ands	r3, r2
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10f      	bne.n	8005098 <HAL_TIM_PWM_Stop_DMA+0x128>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6a1a      	ldr	r2, [r3, #32]
 800507e:	f240 4344 	movw	r3, #1092	; 0x444
 8005082:	4013      	ands	r3, r2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d107      	bne.n	8005098 <HAL_TIM_PWM_Stop_DMA+0x128>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005096:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	6a1a      	ldr	r2, [r3, #32]
 800509e:	f241 1311 	movw	r3, #4369	; 0x1111
 80050a2:	4013      	ands	r3, r2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10f      	bne.n	80050c8 <HAL_TIM_PWM_Stop_DMA+0x158>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6a1a      	ldr	r2, [r3, #32]
 80050ae:	f240 4344 	movw	r3, #1092	; 0x444
 80050b2:	4013      	ands	r3, r2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d107      	bne.n	80050c8 <HAL_TIM_PWM_Stop_DMA+0x158>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0201 	bic.w	r2, r2, #1
 80050c6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d104      	bne.n	80050d8 <HAL_TIM_PWM_Stop_DMA+0x168>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050d6:	e013      	b.n	8005100 <HAL_TIM_PWM_Stop_DMA+0x190>
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d104      	bne.n	80050e8 <HAL_TIM_PWM_Stop_DMA+0x178>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050e6:	e00b      	b.n	8005100 <HAL_TIM_PWM_Stop_DMA+0x190>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2b08      	cmp	r3, #8
 80050ec:	d104      	bne.n	80050f8 <HAL_TIM_PWM_Stop_DMA+0x188>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050f6:	e003      	b.n	8005100 <HAL_TIM_PWM_Stop_DMA+0x190>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8005100:	7bfb      	ldrb	r3, [r7, #15]
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40010000 	.word	0x40010000
 8005110:	40010400 	.word	0x40010400

08005114 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b02      	cmp	r3, #2
 8005128:	d122      	bne.n	8005170 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b02      	cmp	r3, #2
 8005136:	d11b      	bne.n	8005170 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f06f 0202 	mvn.w	r2, #2
 8005140:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f003 0303 	and.w	r3, r3, #3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 fa77 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 800515c:	e005      	b.n	800516a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fa69 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f7fc fec5 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f003 0304 	and.w	r3, r3, #4
 800517a:	2b04      	cmp	r3, #4
 800517c:	d122      	bne.n	80051c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b04      	cmp	r3, #4
 800518a:	d11b      	bne.n	80051c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0204 	mvn.w	r2, #4
 8005194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2202      	movs	r2, #2
 800519a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fa4d 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 80051b0:	e005      	b.n	80051be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fa3f 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f7fc fe9b 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d122      	bne.n	8005218 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f003 0308 	and.w	r3, r3, #8
 80051dc:	2b08      	cmp	r3, #8
 80051de:	d11b      	bne.n	8005218 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f06f 0208 	mvn.w	r2, #8
 80051e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2204      	movs	r2, #4
 80051ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d003      	beq.n	8005206 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fa23 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 8005204:	e005      	b.n	8005212 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 fa15 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7fc fe71 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f003 0310 	and.w	r3, r3, #16
 8005222:	2b10      	cmp	r3, #16
 8005224:	d122      	bne.n	800526c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f003 0310 	and.w	r3, r3, #16
 8005230:	2b10      	cmp	r3, #16
 8005232:	d11b      	bne.n	800526c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f06f 0210 	mvn.w	r2, #16
 800523c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2208      	movs	r2, #8
 8005242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f9f9 	bl	800564a <HAL_TIM_IC_CaptureCallback>
 8005258:	e005      	b.n	8005266 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f9eb 	bl	8005636 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f7fc fe47 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b01      	cmp	r3, #1
 8005278:	d10e      	bne.n	8005298 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b01      	cmp	r3, #1
 8005286:	d107      	bne.n	8005298 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f06f 0201 	mvn.w	r2, #1
 8005290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7fd f810 	bl	80022b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a2:	2b80      	cmp	r3, #128	; 0x80
 80052a4:	d10e      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b0:	2b80      	cmp	r3, #128	; 0x80
 80052b2:	d107      	bne.n	80052c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 fea4 	bl	800600c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ce:	2b40      	cmp	r3, #64	; 0x40
 80052d0:	d10e      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052dc:	2b40      	cmp	r3, #64	; 0x40
 80052de:	d107      	bne.n	80052f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f9c1 	bl	8005672 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	f003 0320 	and.w	r3, r3, #32
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	d10e      	bne.n	800531c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b20      	cmp	r3, #32
 800530a:	d107      	bne.n	800531c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f06f 0220 	mvn.w	r2, #32
 8005314:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 fe6e 	bl	8005ff8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800531c:	bf00      	nop
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800533a:	2b01      	cmp	r3, #1
 800533c:	d101      	bne.n	8005342 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800533e:	2302      	movs	r3, #2
 8005340:	e0ae      	b.n	80054a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2b0c      	cmp	r3, #12
 800534e:	f200 809f 	bhi.w	8005490 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005352:	a201      	add	r2, pc, #4	; (adr r2, 8005358 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005358:	0800538d 	.word	0x0800538d
 800535c:	08005491 	.word	0x08005491
 8005360:	08005491 	.word	0x08005491
 8005364:	08005491 	.word	0x08005491
 8005368:	080053cd 	.word	0x080053cd
 800536c:	08005491 	.word	0x08005491
 8005370:	08005491 	.word	0x08005491
 8005374:	08005491 	.word	0x08005491
 8005378:	0800540f 	.word	0x0800540f
 800537c:	08005491 	.word	0x08005491
 8005380:	08005491 	.word	0x08005491
 8005384:	08005491 	.word	0x08005491
 8005388:	0800544f 	.word	0x0800544f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	4618      	mov	r0, r3
 8005394:	f000 faf2 	bl	800597c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699a      	ldr	r2, [r3, #24]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f042 0208 	orr.w	r2, r2, #8
 80053a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699a      	ldr	r2, [r3, #24]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 0204 	bic.w	r2, r2, #4
 80053b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6999      	ldr	r1, [r3, #24]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	691a      	ldr	r2, [r3, #16]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	430a      	orrs	r2, r1
 80053c8:	619a      	str	r2, [r3, #24]
      break;
 80053ca:	e064      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68b9      	ldr	r1, [r7, #8]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fb42 	bl	8005a5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699a      	ldr	r2, [r3, #24]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6999      	ldr	r1, [r3, #24]
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	021a      	lsls	r2, r3, #8
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	430a      	orrs	r2, r1
 800540a:	619a      	str	r2, [r3, #24]
      break;
 800540c:	e043      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68b9      	ldr	r1, [r7, #8]
 8005414:	4618      	mov	r0, r3
 8005416:	f000 fb97 	bl	8005b48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	69da      	ldr	r2, [r3, #28]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f042 0208 	orr.w	r2, r2, #8
 8005428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69da      	ldr	r2, [r3, #28]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0204 	bic.w	r2, r2, #4
 8005438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69d9      	ldr	r1, [r3, #28]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	430a      	orrs	r2, r1
 800544a:	61da      	str	r2, [r3, #28]
      break;
 800544c:	e023      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68b9      	ldr	r1, [r7, #8]
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fbeb 	bl	8005c30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69da      	ldr	r2, [r3, #28]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69da      	ldr	r2, [r3, #28]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69d9      	ldr	r1, [r3, #28]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	021a      	lsls	r2, r3, #8
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	430a      	orrs	r2, r1
 800548c:	61da      	str	r2, [r3, #28]
      break;
 800548e:	e002      	b.n	8005496 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	75fb      	strb	r3, [r7, #23]
      break;
 8005494:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800549e:	7dfb      	ldrb	r3, [r7, #23]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054b2:	2300      	movs	r3, #0
 80054b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_TIM_ConfigClockSource+0x1c>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e0b4      	b.n	800562e <HAL_TIM_ConfigClockSource+0x186>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054fc:	d03e      	beq.n	800557c <HAL_TIM_ConfigClockSource+0xd4>
 80054fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005502:	f200 8087 	bhi.w	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 8005506:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800550a:	f000 8086 	beq.w	800561a <HAL_TIM_ConfigClockSource+0x172>
 800550e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005512:	d87f      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 8005514:	2b70      	cmp	r3, #112	; 0x70
 8005516:	d01a      	beq.n	800554e <HAL_TIM_ConfigClockSource+0xa6>
 8005518:	2b70      	cmp	r3, #112	; 0x70
 800551a:	d87b      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 800551c:	2b60      	cmp	r3, #96	; 0x60
 800551e:	d050      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x11a>
 8005520:	2b60      	cmp	r3, #96	; 0x60
 8005522:	d877      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 8005524:	2b50      	cmp	r3, #80	; 0x50
 8005526:	d03c      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0xfa>
 8005528:	2b50      	cmp	r3, #80	; 0x50
 800552a:	d873      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 800552c:	2b40      	cmp	r3, #64	; 0x40
 800552e:	d058      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x13a>
 8005530:	2b40      	cmp	r3, #64	; 0x40
 8005532:	d86f      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 8005534:	2b30      	cmp	r3, #48	; 0x30
 8005536:	d064      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0x15a>
 8005538:	2b30      	cmp	r3, #48	; 0x30
 800553a:	d86b      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 800553c:	2b20      	cmp	r3, #32
 800553e:	d060      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0x15a>
 8005540:	2b20      	cmp	r3, #32
 8005542:	d867      	bhi.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
 8005544:	2b00      	cmp	r3, #0
 8005546:	d05c      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0x15a>
 8005548:	2b10      	cmp	r3, #16
 800554a:	d05a      	beq.n	8005602 <HAL_TIM_ConfigClockSource+0x15a>
 800554c:	e062      	b.n	8005614 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6818      	ldr	r0, [r3, #0]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6899      	ldr	r1, [r3, #8]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f000 fc37 	bl	8005dd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005570:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	609a      	str	r2, [r3, #8]
      break;
 800557a:	e04f      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6818      	ldr	r0, [r3, #0]
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	6899      	ldr	r1, [r3, #8]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f000 fc20 	bl	8005dd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689a      	ldr	r2, [r3, #8]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800559e:	609a      	str	r2, [r3, #8]
      break;
 80055a0:	e03c      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6859      	ldr	r1, [r3, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f000 fb94 	bl	8005cdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2150      	movs	r1, #80	; 0x50
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 fbed 	bl	8005d9a <TIM_ITRx_SetConfig>
      break;
 80055c0:	e02c      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6859      	ldr	r1, [r3, #4]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	461a      	mov	r2, r3
 80055d0:	f000 fbb3 	bl	8005d3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2160      	movs	r1, #96	; 0x60
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fbdd 	bl	8005d9a <TIM_ITRx_SetConfig>
      break;
 80055e0:	e01c      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6818      	ldr	r0, [r3, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	6859      	ldr	r1, [r3, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	461a      	mov	r2, r3
 80055f0:	f000 fb74 	bl	8005cdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2140      	movs	r1, #64	; 0x40
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fbcd 	bl	8005d9a <TIM_ITRx_SetConfig>
      break;
 8005600:	e00c      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4619      	mov	r1, r3
 800560c:	4610      	mov	r0, r2
 800560e:	f000 fbc4 	bl	8005d9a <TIM_ITRx_SetConfig>
      break;
 8005612:	e003      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	73fb      	strb	r3, [r7, #15]
      break;
 8005618:	e000      	b.n	800561c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800561a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800562c:	7bfb      	ldrb	r3, [r7, #15]
}
 800562e:	4618      	mov	r0, r3
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d107      	bne.n	80056c2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2201      	movs	r2, #1
 80056b6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056c0:	e02a      	b.n	8005718 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d107      	bne.n	80056dc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2202      	movs	r2, #2
 80056d0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056da:	e01d      	b.n	8005718 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d107      	bne.n	80056f6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2204      	movs	r2, #4
 80056ea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056f4:	e010      	b.n	8005718 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d107      	bne.n	8005710 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2208      	movs	r2, #8
 8005704:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800570e:	e003      	b.n	8005718 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f7ff ffb4 	bl	8005686 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	771a      	strb	r2, [r3, #28]
}
 8005724:	bf00      	nop
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005738:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	429a      	cmp	r2, r3
 8005742:	d10b      	bne.n	800575c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2201      	movs	r2, #1
 8005748:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d136      	bne.n	80057c0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800575a:	e031      	b.n	80057c0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	429a      	cmp	r2, r3
 8005764:	d10b      	bne.n	800577e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2202      	movs	r2, #2
 800576a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d125      	bne.n	80057c0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800577c:	e020      	b.n	80057c0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	429a      	cmp	r2, r3
 8005786:	d10b      	bne.n	80057a0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2204      	movs	r2, #4
 800578c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d114      	bne.n	80057c0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800579e:	e00f      	b.n	80057c0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d10a      	bne.n	80057c0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2208      	movs	r2, #8
 80057ae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	69db      	ldr	r3, [r3, #28]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d103      	bne.n	80057c0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c0:	68f8      	ldr	r0, [r7, #12]
 80057c2:	f7fc fb97 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	771a      	strb	r2, [r3, #28]
}
 80057cc:	bf00      	nop
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d103      	bne.n	80057f4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2201      	movs	r2, #1
 80057f0:	771a      	strb	r2, [r3, #28]
 80057f2:	e019      	b.n	8005828 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d103      	bne.n	8005806 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2202      	movs	r2, #2
 8005802:	771a      	strb	r2, [r3, #28]
 8005804:	e010      	b.n	8005828 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	429a      	cmp	r2, r3
 800580e:	d103      	bne.n	8005818 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2204      	movs	r2, #4
 8005814:	771a      	strb	r2, [r3, #28]
 8005816:	e007      	b.n	8005828 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	429a      	cmp	r2, r3
 8005820:	d102      	bne.n	8005828 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2208      	movs	r2, #8
 8005826:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f7ff ff18 	bl	800565e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	771a      	strb	r2, [r3, #28]
}
 8005834:	bf00      	nop
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800583c:	b480      	push	{r7}
 800583e:	b085      	sub	sp, #20
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a40      	ldr	r2, [pc, #256]	; (8005950 <TIM_Base_SetConfig+0x114>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d013      	beq.n	800587c <TIM_Base_SetConfig+0x40>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800585a:	d00f      	beq.n	800587c <TIM_Base_SetConfig+0x40>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a3d      	ldr	r2, [pc, #244]	; (8005954 <TIM_Base_SetConfig+0x118>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d00b      	beq.n	800587c <TIM_Base_SetConfig+0x40>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a3c      	ldr	r2, [pc, #240]	; (8005958 <TIM_Base_SetConfig+0x11c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d007      	beq.n	800587c <TIM_Base_SetConfig+0x40>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a3b      	ldr	r2, [pc, #236]	; (800595c <TIM_Base_SetConfig+0x120>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d003      	beq.n	800587c <TIM_Base_SetConfig+0x40>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a3a      	ldr	r2, [pc, #232]	; (8005960 <TIM_Base_SetConfig+0x124>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d108      	bne.n	800588e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a2f      	ldr	r2, [pc, #188]	; (8005950 <TIM_Base_SetConfig+0x114>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d02b      	beq.n	80058ee <TIM_Base_SetConfig+0xb2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800589c:	d027      	beq.n	80058ee <TIM_Base_SetConfig+0xb2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a2c      	ldr	r2, [pc, #176]	; (8005954 <TIM_Base_SetConfig+0x118>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d023      	beq.n	80058ee <TIM_Base_SetConfig+0xb2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a2b      	ldr	r2, [pc, #172]	; (8005958 <TIM_Base_SetConfig+0x11c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d01f      	beq.n	80058ee <TIM_Base_SetConfig+0xb2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a2a      	ldr	r2, [pc, #168]	; (800595c <TIM_Base_SetConfig+0x120>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d01b      	beq.n	80058ee <TIM_Base_SetConfig+0xb2>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a29      	ldr	r2, [pc, #164]	; (8005960 <TIM_Base_SetConfig+0x124>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d017      	beq.n	80058ee <TIM_Base_SetConfig+0xb2>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	4a28      	ldr	r2, [pc, #160]	; (8005964 <TIM_Base_SetConfig+0x128>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d013      	beq.n	80058ee <TIM_Base_SetConfig+0xb2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a27      	ldr	r2, [pc, #156]	; (8005968 <TIM_Base_SetConfig+0x12c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d00f      	beq.n	80058ee <TIM_Base_SetConfig+0xb2>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a26      	ldr	r2, [pc, #152]	; (800596c <TIM_Base_SetConfig+0x130>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00b      	beq.n	80058ee <TIM_Base_SetConfig+0xb2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a25      	ldr	r2, [pc, #148]	; (8005970 <TIM_Base_SetConfig+0x134>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d007      	beq.n	80058ee <TIM_Base_SetConfig+0xb2>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a24      	ldr	r2, [pc, #144]	; (8005974 <TIM_Base_SetConfig+0x138>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d003      	beq.n	80058ee <TIM_Base_SetConfig+0xb2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a23      	ldr	r2, [pc, #140]	; (8005978 <TIM_Base_SetConfig+0x13c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d108      	bne.n	8005900 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	4313      	orrs	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68fa      	ldr	r2, [r7, #12]
 8005912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	689a      	ldr	r2, [r3, #8]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a0a      	ldr	r2, [pc, #40]	; (8005950 <TIM_Base_SetConfig+0x114>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d003      	beq.n	8005934 <TIM_Base_SetConfig+0xf8>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a0c      	ldr	r2, [pc, #48]	; (8005960 <TIM_Base_SetConfig+0x124>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d103      	bne.n	800593c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	691a      	ldr	r2, [r3, #16]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	615a      	str	r2, [r3, #20]
}
 8005942:	bf00      	nop
 8005944:	3714      	adds	r7, #20
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	40010000 	.word	0x40010000
 8005954:	40000400 	.word	0x40000400
 8005958:	40000800 	.word	0x40000800
 800595c:	40000c00 	.word	0x40000c00
 8005960:	40010400 	.word	0x40010400
 8005964:	40014000 	.word	0x40014000
 8005968:	40014400 	.word	0x40014400
 800596c:	40014800 	.word	0x40014800
 8005970:	40001800 	.word	0x40001800
 8005974:	40001c00 	.word	0x40001c00
 8005978:	40002000 	.word	0x40002000

0800597c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	f023 0201 	bic.w	r2, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 0303 	bic.w	r3, r3, #3
 80059b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f023 0302 	bic.w	r3, r3, #2
 80059c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	697a      	ldr	r2, [r7, #20]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4a20      	ldr	r2, [pc, #128]	; (8005a54 <TIM_OC1_SetConfig+0xd8>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d003      	beq.n	80059e0 <TIM_OC1_SetConfig+0x64>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	4a1f      	ldr	r2, [pc, #124]	; (8005a58 <TIM_OC1_SetConfig+0xdc>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d10c      	bne.n	80059fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	f023 0308 	bic.w	r3, r3, #8
 80059e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f023 0304 	bic.w	r3, r3, #4
 80059f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a15      	ldr	r2, [pc, #84]	; (8005a54 <TIM_OC1_SetConfig+0xd8>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d003      	beq.n	8005a0a <TIM_OC1_SetConfig+0x8e>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a14      	ldr	r2, [pc, #80]	; (8005a58 <TIM_OC1_SetConfig+0xdc>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d111      	bne.n	8005a2e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	621a      	str	r2, [r3, #32]
}
 8005a48:	bf00      	nop
 8005a4a:	371c      	adds	r7, #28
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	40010000 	.word	0x40010000
 8005a58:	40010400 	.word	0x40010400

08005a5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b087      	sub	sp, #28
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	f023 0210 	bic.w	r2, r3, #16
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	699b      	ldr	r3, [r3, #24]
 8005a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	021b      	lsls	r3, r3, #8
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	f023 0320 	bic.w	r3, r3, #32
 8005aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a22      	ldr	r2, [pc, #136]	; (8005b40 <TIM_OC2_SetConfig+0xe4>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d003      	beq.n	8005ac4 <TIM_OC2_SetConfig+0x68>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a21      	ldr	r2, [pc, #132]	; (8005b44 <TIM_OC2_SetConfig+0xe8>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d10d      	bne.n	8005ae0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ade:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a17      	ldr	r2, [pc, #92]	; (8005b40 <TIM_OC2_SetConfig+0xe4>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d003      	beq.n	8005af0 <TIM_OC2_SetConfig+0x94>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a16      	ldr	r2, [pc, #88]	; (8005b44 <TIM_OC2_SetConfig+0xe8>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d113      	bne.n	8005b18 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005af6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005afe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	621a      	str	r2, [r3, #32]
}
 8005b32:	bf00      	nop
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40010000 	.word	0x40010000
 8005b44:	40010400 	.word	0x40010400

08005b48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b087      	sub	sp, #28
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	69db      	ldr	r3, [r3, #28]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f023 0303 	bic.w	r3, r3, #3
 8005b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	021b      	lsls	r3, r3, #8
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a21      	ldr	r2, [pc, #132]	; (8005c28 <TIM_OC3_SetConfig+0xe0>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d003      	beq.n	8005bae <TIM_OC3_SetConfig+0x66>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a20      	ldr	r2, [pc, #128]	; (8005c2c <TIM_OC3_SetConfig+0xe4>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d10d      	bne.n	8005bca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	021b      	lsls	r3, r3, #8
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	4a16      	ldr	r2, [pc, #88]	; (8005c28 <TIM_OC3_SetConfig+0xe0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d003      	beq.n	8005bda <TIM_OC3_SetConfig+0x92>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a15      	ldr	r2, [pc, #84]	; (8005c2c <TIM_OC3_SetConfig+0xe4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d113      	bne.n	8005c02 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005be0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005be8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	685a      	ldr	r2, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	621a      	str	r2, [r3, #32]
}
 8005c1c:	bf00      	nop
 8005c1e:	371c      	adds	r7, #28
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	40010000 	.word	0x40010000
 8005c2c:	40010400 	.word	0x40010400

08005c30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	021b      	lsls	r3, r3, #8
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	031b      	lsls	r3, r3, #12
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a12      	ldr	r2, [pc, #72]	; (8005cd4 <TIM_OC4_SetConfig+0xa4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d003      	beq.n	8005c98 <TIM_OC4_SetConfig+0x68>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a11      	ldr	r2, [pc, #68]	; (8005cd8 <TIM_OC4_SetConfig+0xa8>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d109      	bne.n	8005cac <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c9e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	019b      	lsls	r3, r3, #6
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68fa      	ldr	r2, [r7, #12]
 8005cb6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685a      	ldr	r2, [r3, #4]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	621a      	str	r2, [r3, #32]
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40010000 	.word	0x40010000
 8005cd8:	40010400 	.word	0x40010400

08005cdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f023 0201 	bic.w	r2, r3, #1
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	011b      	lsls	r3, r3, #4
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f023 030a 	bic.w	r3, r3, #10
 8005d18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	621a      	str	r2, [r3, #32]
}
 8005d2e:	bf00      	nop
 8005d30:	371c      	adds	r7, #28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b087      	sub	sp, #28
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6a1b      	ldr	r3, [r3, #32]
 8005d4a:	f023 0210 	bic.w	r2, r3, #16
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	699b      	ldr	r3, [r3, #24]
 8005d56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6a1b      	ldr	r3, [r3, #32]
 8005d5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	031b      	lsls	r3, r3, #12
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	011b      	lsls	r3, r3, #4
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	697a      	ldr	r2, [r7, #20]
 8005d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	621a      	str	r2, [r3, #32]
}
 8005d8e:	bf00      	nop
 8005d90:	371c      	adds	r7, #28
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b085      	sub	sp, #20
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	f043 0307 	orr.w	r3, r3, #7
 8005dbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	609a      	str	r2, [r3, #8]
}
 8005dc4:	bf00      	nop
 8005dc6:	3714      	adds	r7, #20
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	021a      	lsls	r2, r3, #8
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	431a      	orrs	r2, r3
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	4313      	orrs	r3, r2
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	609a      	str	r2, [r3, #8]
}
 8005e04:	bf00      	nop
 8005e06:	371c      	adds	r7, #28
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f003 031f 	and.w	r3, r3, #31
 8005e22:	2201      	movs	r2, #1
 8005e24:	fa02 f303 	lsl.w	r3, r2, r3
 8005e28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a1a      	ldr	r2, [r3, #32]
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	43db      	mvns	r3, r3
 8005e32:	401a      	ands	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6a1a      	ldr	r2, [r3, #32]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	f003 031f 	and.w	r3, r3, #31
 8005e42:	6879      	ldr	r1, [r7, #4]
 8005e44:	fa01 f303 	lsl.w	r3, r1, r3
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	621a      	str	r2, [r3, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
	...

08005e5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d101      	bne.n	8005e74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e70:	2302      	movs	r3, #2
 8005e72:	e05a      	b.n	8005f2a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a21      	ldr	r2, [pc, #132]	; (8005f38 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d022      	beq.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ec0:	d01d      	beq.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1d      	ldr	r2, [pc, #116]	; (8005f3c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d018      	beq.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a1b      	ldr	r2, [pc, #108]	; (8005f40 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d013      	beq.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1a      	ldr	r2, [pc, #104]	; (8005f44 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d00e      	beq.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a18      	ldr	r2, [pc, #96]	; (8005f48 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d009      	beq.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a17      	ldr	r2, [pc, #92]	; (8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d004      	beq.n	8005efe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d10c      	bne.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40000400 	.word	0x40000400
 8005f40:	40000800 	.word	0x40000800
 8005f44:	40000c00 	.word	0x40000c00
 8005f48:	40010400 	.word	0x40010400
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40001800 	.word	0x40001800

08005f54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b085      	sub	sp, #20
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d101      	bne.n	8005f70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e03d      	b.n	8005fec <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	695b      	ldr	r3, [r3, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e03f      	b.n	80060b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d106      	bne.n	800604c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fc faba 	bl	80025c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2224      	movs	r2, #36	; 0x24
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68da      	ldr	r2, [r3, #12]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006062:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f929 	bl	80062bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	691a      	ldr	r2, [r3, #16]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006078:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695a      	ldr	r2, [r3, #20]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006088:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68da      	ldr	r2, [r3, #12]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006098:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2220      	movs	r2, #32
 80060a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2220      	movs	r2, #32
 80060ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b08a      	sub	sp, #40	; 0x28
 80060be:	af02      	add	r7, sp, #8
 80060c0:	60f8      	str	r0, [r7, #12]
 80060c2:	60b9      	str	r1, [r7, #8]
 80060c4:	603b      	str	r3, [r7, #0]
 80060c6:	4613      	mov	r3, r2
 80060c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80060ca:	2300      	movs	r3, #0
 80060cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b20      	cmp	r3, #32
 80060d8:	d17c      	bne.n	80061d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <HAL_UART_Transmit+0x2c>
 80060e0:	88fb      	ldrh	r3, [r7, #6]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d101      	bne.n	80060ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e075      	b.n	80061d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <HAL_UART_Transmit+0x3e>
 80060f4:	2302      	movs	r3, #2
 80060f6:	e06e      	b.n	80061d6 <HAL_UART_Transmit+0x11c>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2221      	movs	r2, #33	; 0x21
 800610a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800610e:	f7fc fc0f 	bl	8002930 <HAL_GetTick>
 8006112:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	88fa      	ldrh	r2, [r7, #6]
 8006118:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	88fa      	ldrh	r2, [r7, #6]
 800611e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006128:	d108      	bne.n	800613c <HAL_UART_Transmit+0x82>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d104      	bne.n	800613c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006132:	2300      	movs	r3, #0
 8006134:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	61bb      	str	r3, [r7, #24]
 800613a:	e003      	b.n	8006144 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006140:	2300      	movs	r3, #0
 8006142:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800614c:	e02a      	b.n	80061a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2200      	movs	r2, #0
 8006156:	2180      	movs	r1, #128	; 0x80
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 f840 	bl	80061de <UART_WaitOnFlagUntilTimeout>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006164:	2303      	movs	r3, #3
 8006166:	e036      	b.n	80061d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d10b      	bne.n	8006186 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	881b      	ldrh	r3, [r3, #0]
 8006172:	461a      	mov	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800617c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	3302      	adds	r3, #2
 8006182:	61bb      	str	r3, [r7, #24]
 8006184:	e007      	b.n	8006196 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	781a      	ldrb	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	3301      	adds	r3, #1
 8006194:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800619a:	b29b      	uxth	r3, r3
 800619c:	3b01      	subs	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1cf      	bne.n	800614e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	9300      	str	r3, [sp, #0]
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2200      	movs	r2, #0
 80061b6:	2140      	movs	r1, #64	; 0x40
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f000 f810 	bl	80061de <UART_WaitOnFlagUntilTimeout>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d001      	beq.n	80061c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e006      	b.n	80061d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2220      	movs	r2, #32
 80061cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80061d0:	2300      	movs	r3, #0
 80061d2:	e000      	b.n	80061d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80061d4:	2302      	movs	r3, #2
  }
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3720      	adds	r7, #32
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b090      	sub	sp, #64	; 0x40
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	60f8      	str	r0, [r7, #12]
 80061e6:	60b9      	str	r1, [r7, #8]
 80061e8:	603b      	str	r3, [r7, #0]
 80061ea:	4613      	mov	r3, r2
 80061ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ee:	e050      	b.n	8006292 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f6:	d04c      	beq.n	8006292 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80061f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d007      	beq.n	800620e <UART_WaitOnFlagUntilTimeout+0x30>
 80061fe:	f7fc fb97 	bl	8002930 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800620a:	429a      	cmp	r2, r3
 800620c:	d241      	bcs.n	8006292 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	330c      	adds	r3, #12
 8006214:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006218:	e853 3f00 	ldrex	r3, [r3]
 800621c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006224:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	330c      	adds	r3, #12
 800622c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800622e:	637a      	str	r2, [r7, #52]	; 0x34
 8006230:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1e5      	bne.n	800620e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3314      	adds	r3, #20
 8006248:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	613b      	str	r3, [r7, #16]
   return(result);
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f023 0301 	bic.w	r3, r3, #1
 8006258:	63bb      	str	r3, [r7, #56]	; 0x38
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3314      	adds	r3, #20
 8006260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006262:	623a      	str	r2, [r7, #32]
 8006264:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006266:	69f9      	ldr	r1, [r7, #28]
 8006268:	6a3a      	ldr	r2, [r7, #32]
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e5      	bne.n	8006242 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2220      	movs	r2, #32
 800627a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2220      	movs	r2, #32
 8006282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2200      	movs	r2, #0
 800628a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e00f      	b.n	80062b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	4013      	ands	r3, r2
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	429a      	cmp	r2, r3
 80062a0:	bf0c      	ite	eq
 80062a2:	2301      	moveq	r3, #1
 80062a4:	2300      	movne	r3, #0
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	461a      	mov	r2, r3
 80062aa:	79fb      	ldrb	r3, [r7, #7]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d09f      	beq.n	80061f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3740      	adds	r7, #64	; 0x40
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
	...

080062bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062c0:	b0c0      	sub	sp, #256	; 0x100
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d8:	68d9      	ldr	r1, [r3, #12]
 80062da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	ea40 0301 	orr.w	r3, r0, r1
 80062e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	431a      	orrs	r2, r3
 80062f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	431a      	orrs	r2, r3
 80062fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	4313      	orrs	r3, r2
 8006304:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006314:	f021 010c 	bic.w	r1, r1, #12
 8006318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006322:	430b      	orrs	r3, r1
 8006324:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695b      	ldr	r3, [r3, #20]
 800632e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006336:	6999      	ldr	r1, [r3, #24]
 8006338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	ea40 0301 	orr.w	r3, r0, r1
 8006342:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	4b8f      	ldr	r3, [pc, #572]	; (8006588 <UART_SetConfig+0x2cc>)
 800634c:	429a      	cmp	r2, r3
 800634e:	d005      	beq.n	800635c <UART_SetConfig+0xa0>
 8006350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	4b8d      	ldr	r3, [pc, #564]	; (800658c <UART_SetConfig+0x2d0>)
 8006358:	429a      	cmp	r2, r3
 800635a:	d104      	bne.n	8006366 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800635c:	f7fe fae0 	bl	8004920 <HAL_RCC_GetPCLK2Freq>
 8006360:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006364:	e003      	b.n	800636e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006366:	f7fe fac7 	bl	80048f8 <HAL_RCC_GetPCLK1Freq>
 800636a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800636e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006378:	f040 810c 	bne.w	8006594 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800637c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006380:	2200      	movs	r2, #0
 8006382:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006386:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800638a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800638e:	4622      	mov	r2, r4
 8006390:	462b      	mov	r3, r5
 8006392:	1891      	adds	r1, r2, r2
 8006394:	65b9      	str	r1, [r7, #88]	; 0x58
 8006396:	415b      	adcs	r3, r3
 8006398:	65fb      	str	r3, [r7, #92]	; 0x5c
 800639a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800639e:	4621      	mov	r1, r4
 80063a0:	eb12 0801 	adds.w	r8, r2, r1
 80063a4:	4629      	mov	r1, r5
 80063a6:	eb43 0901 	adc.w	r9, r3, r1
 80063aa:	f04f 0200 	mov.w	r2, #0
 80063ae:	f04f 0300 	mov.w	r3, #0
 80063b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063be:	4690      	mov	r8, r2
 80063c0:	4699      	mov	r9, r3
 80063c2:	4623      	mov	r3, r4
 80063c4:	eb18 0303 	adds.w	r3, r8, r3
 80063c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063cc:	462b      	mov	r3, r5
 80063ce:	eb49 0303 	adc.w	r3, r9, r3
 80063d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063e2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80063e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063ea:	460b      	mov	r3, r1
 80063ec:	18db      	adds	r3, r3, r3
 80063ee:	653b      	str	r3, [r7, #80]	; 0x50
 80063f0:	4613      	mov	r3, r2
 80063f2:	eb42 0303 	adc.w	r3, r2, r3
 80063f6:	657b      	str	r3, [r7, #84]	; 0x54
 80063f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006400:	f7fa fb84 	bl	8000b0c <__aeabi_uldivmod>
 8006404:	4602      	mov	r2, r0
 8006406:	460b      	mov	r3, r1
 8006408:	4b61      	ldr	r3, [pc, #388]	; (8006590 <UART_SetConfig+0x2d4>)
 800640a:	fba3 2302 	umull	r2, r3, r3, r2
 800640e:	095b      	lsrs	r3, r3, #5
 8006410:	011c      	lsls	r4, r3, #4
 8006412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006416:	2200      	movs	r2, #0
 8006418:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800641c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006420:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006424:	4642      	mov	r2, r8
 8006426:	464b      	mov	r3, r9
 8006428:	1891      	adds	r1, r2, r2
 800642a:	64b9      	str	r1, [r7, #72]	; 0x48
 800642c:	415b      	adcs	r3, r3
 800642e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006430:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006434:	4641      	mov	r1, r8
 8006436:	eb12 0a01 	adds.w	sl, r2, r1
 800643a:	4649      	mov	r1, r9
 800643c:	eb43 0b01 	adc.w	fp, r3, r1
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 0300 	mov.w	r3, #0
 8006448:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800644c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006450:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006454:	4692      	mov	sl, r2
 8006456:	469b      	mov	fp, r3
 8006458:	4643      	mov	r3, r8
 800645a:	eb1a 0303 	adds.w	r3, sl, r3
 800645e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006462:	464b      	mov	r3, r9
 8006464:	eb4b 0303 	adc.w	r3, fp, r3
 8006468:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800646c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006478:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800647c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006480:	460b      	mov	r3, r1
 8006482:	18db      	adds	r3, r3, r3
 8006484:	643b      	str	r3, [r7, #64]	; 0x40
 8006486:	4613      	mov	r3, r2
 8006488:	eb42 0303 	adc.w	r3, r2, r3
 800648c:	647b      	str	r3, [r7, #68]	; 0x44
 800648e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006492:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006496:	f7fa fb39 	bl	8000b0c <__aeabi_uldivmod>
 800649a:	4602      	mov	r2, r0
 800649c:	460b      	mov	r3, r1
 800649e:	4611      	mov	r1, r2
 80064a0:	4b3b      	ldr	r3, [pc, #236]	; (8006590 <UART_SetConfig+0x2d4>)
 80064a2:	fba3 2301 	umull	r2, r3, r3, r1
 80064a6:	095b      	lsrs	r3, r3, #5
 80064a8:	2264      	movs	r2, #100	; 0x64
 80064aa:	fb02 f303 	mul.w	r3, r2, r3
 80064ae:	1acb      	subs	r3, r1, r3
 80064b0:	00db      	lsls	r3, r3, #3
 80064b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064b6:	4b36      	ldr	r3, [pc, #216]	; (8006590 <UART_SetConfig+0x2d4>)
 80064b8:	fba3 2302 	umull	r2, r3, r3, r2
 80064bc:	095b      	lsrs	r3, r3, #5
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064c4:	441c      	add	r4, r3
 80064c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ca:	2200      	movs	r2, #0
 80064cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064d8:	4642      	mov	r2, r8
 80064da:	464b      	mov	r3, r9
 80064dc:	1891      	adds	r1, r2, r2
 80064de:	63b9      	str	r1, [r7, #56]	; 0x38
 80064e0:	415b      	adcs	r3, r3
 80064e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064e8:	4641      	mov	r1, r8
 80064ea:	1851      	adds	r1, r2, r1
 80064ec:	6339      	str	r1, [r7, #48]	; 0x30
 80064ee:	4649      	mov	r1, r9
 80064f0:	414b      	adcs	r3, r1
 80064f2:	637b      	str	r3, [r7, #52]	; 0x34
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	f04f 0300 	mov.w	r3, #0
 80064fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006500:	4659      	mov	r1, fp
 8006502:	00cb      	lsls	r3, r1, #3
 8006504:	4651      	mov	r1, sl
 8006506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800650a:	4651      	mov	r1, sl
 800650c:	00ca      	lsls	r2, r1, #3
 800650e:	4610      	mov	r0, r2
 8006510:	4619      	mov	r1, r3
 8006512:	4603      	mov	r3, r0
 8006514:	4642      	mov	r2, r8
 8006516:	189b      	adds	r3, r3, r2
 8006518:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800651c:	464b      	mov	r3, r9
 800651e:	460a      	mov	r2, r1
 8006520:	eb42 0303 	adc.w	r3, r2, r3
 8006524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006534:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006538:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800653c:	460b      	mov	r3, r1
 800653e:	18db      	adds	r3, r3, r3
 8006540:	62bb      	str	r3, [r7, #40]	; 0x28
 8006542:	4613      	mov	r3, r2
 8006544:	eb42 0303 	adc.w	r3, r2, r3
 8006548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800654a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800654e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006552:	f7fa fadb 	bl	8000b0c <__aeabi_uldivmod>
 8006556:	4602      	mov	r2, r0
 8006558:	460b      	mov	r3, r1
 800655a:	4b0d      	ldr	r3, [pc, #52]	; (8006590 <UART_SetConfig+0x2d4>)
 800655c:	fba3 1302 	umull	r1, r3, r3, r2
 8006560:	095b      	lsrs	r3, r3, #5
 8006562:	2164      	movs	r1, #100	; 0x64
 8006564:	fb01 f303 	mul.w	r3, r1, r3
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	3332      	adds	r3, #50	; 0x32
 800656e:	4a08      	ldr	r2, [pc, #32]	; (8006590 <UART_SetConfig+0x2d4>)
 8006570:	fba2 2303 	umull	r2, r3, r2, r3
 8006574:	095b      	lsrs	r3, r3, #5
 8006576:	f003 0207 	and.w	r2, r3, #7
 800657a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4422      	add	r2, r4
 8006582:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006584:	e105      	b.n	8006792 <UART_SetConfig+0x4d6>
 8006586:	bf00      	nop
 8006588:	40011000 	.word	0x40011000
 800658c:	40011400 	.word	0x40011400
 8006590:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006598:	2200      	movs	r2, #0
 800659a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800659e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80065a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065a6:	4642      	mov	r2, r8
 80065a8:	464b      	mov	r3, r9
 80065aa:	1891      	adds	r1, r2, r2
 80065ac:	6239      	str	r1, [r7, #32]
 80065ae:	415b      	adcs	r3, r3
 80065b0:	627b      	str	r3, [r7, #36]	; 0x24
 80065b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065b6:	4641      	mov	r1, r8
 80065b8:	1854      	adds	r4, r2, r1
 80065ba:	4649      	mov	r1, r9
 80065bc:	eb43 0501 	adc.w	r5, r3, r1
 80065c0:	f04f 0200 	mov.w	r2, #0
 80065c4:	f04f 0300 	mov.w	r3, #0
 80065c8:	00eb      	lsls	r3, r5, #3
 80065ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ce:	00e2      	lsls	r2, r4, #3
 80065d0:	4614      	mov	r4, r2
 80065d2:	461d      	mov	r5, r3
 80065d4:	4643      	mov	r3, r8
 80065d6:	18e3      	adds	r3, r4, r3
 80065d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065dc:	464b      	mov	r3, r9
 80065de:	eb45 0303 	adc.w	r3, r5, r3
 80065e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065f6:	f04f 0200 	mov.w	r2, #0
 80065fa:	f04f 0300 	mov.w	r3, #0
 80065fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006602:	4629      	mov	r1, r5
 8006604:	008b      	lsls	r3, r1, #2
 8006606:	4621      	mov	r1, r4
 8006608:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800660c:	4621      	mov	r1, r4
 800660e:	008a      	lsls	r2, r1, #2
 8006610:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006614:	f7fa fa7a 	bl	8000b0c <__aeabi_uldivmod>
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	4b60      	ldr	r3, [pc, #384]	; (80067a0 <UART_SetConfig+0x4e4>)
 800661e:	fba3 2302 	umull	r2, r3, r3, r2
 8006622:	095b      	lsrs	r3, r3, #5
 8006624:	011c      	lsls	r4, r3, #4
 8006626:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800662a:	2200      	movs	r2, #0
 800662c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006630:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006634:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006638:	4642      	mov	r2, r8
 800663a:	464b      	mov	r3, r9
 800663c:	1891      	adds	r1, r2, r2
 800663e:	61b9      	str	r1, [r7, #24]
 8006640:	415b      	adcs	r3, r3
 8006642:	61fb      	str	r3, [r7, #28]
 8006644:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006648:	4641      	mov	r1, r8
 800664a:	1851      	adds	r1, r2, r1
 800664c:	6139      	str	r1, [r7, #16]
 800664e:	4649      	mov	r1, r9
 8006650:	414b      	adcs	r3, r1
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	f04f 0200 	mov.w	r2, #0
 8006658:	f04f 0300 	mov.w	r3, #0
 800665c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006660:	4659      	mov	r1, fp
 8006662:	00cb      	lsls	r3, r1, #3
 8006664:	4651      	mov	r1, sl
 8006666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800666a:	4651      	mov	r1, sl
 800666c:	00ca      	lsls	r2, r1, #3
 800666e:	4610      	mov	r0, r2
 8006670:	4619      	mov	r1, r3
 8006672:	4603      	mov	r3, r0
 8006674:	4642      	mov	r2, r8
 8006676:	189b      	adds	r3, r3, r2
 8006678:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800667c:	464b      	mov	r3, r9
 800667e:	460a      	mov	r2, r1
 8006680:	eb42 0303 	adc.w	r3, r2, r3
 8006684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	67bb      	str	r3, [r7, #120]	; 0x78
 8006692:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006694:	f04f 0200 	mov.w	r2, #0
 8006698:	f04f 0300 	mov.w	r3, #0
 800669c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80066a0:	4649      	mov	r1, r9
 80066a2:	008b      	lsls	r3, r1, #2
 80066a4:	4641      	mov	r1, r8
 80066a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066aa:	4641      	mov	r1, r8
 80066ac:	008a      	lsls	r2, r1, #2
 80066ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066b2:	f7fa fa2b 	bl	8000b0c <__aeabi_uldivmod>
 80066b6:	4602      	mov	r2, r0
 80066b8:	460b      	mov	r3, r1
 80066ba:	4b39      	ldr	r3, [pc, #228]	; (80067a0 <UART_SetConfig+0x4e4>)
 80066bc:	fba3 1302 	umull	r1, r3, r3, r2
 80066c0:	095b      	lsrs	r3, r3, #5
 80066c2:	2164      	movs	r1, #100	; 0x64
 80066c4:	fb01 f303 	mul.w	r3, r1, r3
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	011b      	lsls	r3, r3, #4
 80066cc:	3332      	adds	r3, #50	; 0x32
 80066ce:	4a34      	ldr	r2, [pc, #208]	; (80067a0 <UART_SetConfig+0x4e4>)
 80066d0:	fba2 2303 	umull	r2, r3, r2, r3
 80066d4:	095b      	lsrs	r3, r3, #5
 80066d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066da:	441c      	add	r4, r3
 80066dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066e0:	2200      	movs	r2, #0
 80066e2:	673b      	str	r3, [r7, #112]	; 0x70
 80066e4:	677a      	str	r2, [r7, #116]	; 0x74
 80066e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80066ea:	4642      	mov	r2, r8
 80066ec:	464b      	mov	r3, r9
 80066ee:	1891      	adds	r1, r2, r2
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	415b      	adcs	r3, r3
 80066f4:	60fb      	str	r3, [r7, #12]
 80066f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066fa:	4641      	mov	r1, r8
 80066fc:	1851      	adds	r1, r2, r1
 80066fe:	6039      	str	r1, [r7, #0]
 8006700:	4649      	mov	r1, r9
 8006702:	414b      	adcs	r3, r1
 8006704:	607b      	str	r3, [r7, #4]
 8006706:	f04f 0200 	mov.w	r2, #0
 800670a:	f04f 0300 	mov.w	r3, #0
 800670e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006712:	4659      	mov	r1, fp
 8006714:	00cb      	lsls	r3, r1, #3
 8006716:	4651      	mov	r1, sl
 8006718:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800671c:	4651      	mov	r1, sl
 800671e:	00ca      	lsls	r2, r1, #3
 8006720:	4610      	mov	r0, r2
 8006722:	4619      	mov	r1, r3
 8006724:	4603      	mov	r3, r0
 8006726:	4642      	mov	r2, r8
 8006728:	189b      	adds	r3, r3, r2
 800672a:	66bb      	str	r3, [r7, #104]	; 0x68
 800672c:	464b      	mov	r3, r9
 800672e:	460a      	mov	r2, r1
 8006730:	eb42 0303 	adc.w	r3, r2, r3
 8006734:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	663b      	str	r3, [r7, #96]	; 0x60
 8006740:	667a      	str	r2, [r7, #100]	; 0x64
 8006742:	f04f 0200 	mov.w	r2, #0
 8006746:	f04f 0300 	mov.w	r3, #0
 800674a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800674e:	4649      	mov	r1, r9
 8006750:	008b      	lsls	r3, r1, #2
 8006752:	4641      	mov	r1, r8
 8006754:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006758:	4641      	mov	r1, r8
 800675a:	008a      	lsls	r2, r1, #2
 800675c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006760:	f7fa f9d4 	bl	8000b0c <__aeabi_uldivmod>
 8006764:	4602      	mov	r2, r0
 8006766:	460b      	mov	r3, r1
 8006768:	4b0d      	ldr	r3, [pc, #52]	; (80067a0 <UART_SetConfig+0x4e4>)
 800676a:	fba3 1302 	umull	r1, r3, r3, r2
 800676e:	095b      	lsrs	r3, r3, #5
 8006770:	2164      	movs	r1, #100	; 0x64
 8006772:	fb01 f303 	mul.w	r3, r1, r3
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	011b      	lsls	r3, r3, #4
 800677a:	3332      	adds	r3, #50	; 0x32
 800677c:	4a08      	ldr	r2, [pc, #32]	; (80067a0 <UART_SetConfig+0x4e4>)
 800677e:	fba2 2303 	umull	r2, r3, r2, r3
 8006782:	095b      	lsrs	r3, r3, #5
 8006784:	f003 020f 	and.w	r2, r3, #15
 8006788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4422      	add	r2, r4
 8006790:	609a      	str	r2, [r3, #8]
}
 8006792:	bf00      	nop
 8006794:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006798:	46bd      	mov	sp, r7
 800679a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800679e:	bf00      	nop
 80067a0:	51eb851f 	.word	0x51eb851f

080067a4 <__NVIC_SetPriority>:
{
 80067a4:	b480      	push	{r7}
 80067a6:	b083      	sub	sp, #12
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	4603      	mov	r3, r0
 80067ac:	6039      	str	r1, [r7, #0]
 80067ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	db0a      	blt.n	80067ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	490c      	ldr	r1, [pc, #48]	; (80067f0 <__NVIC_SetPriority+0x4c>)
 80067be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067c2:	0112      	lsls	r2, r2, #4
 80067c4:	b2d2      	uxtb	r2, r2
 80067c6:	440b      	add	r3, r1
 80067c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80067cc:	e00a      	b.n	80067e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	4908      	ldr	r1, [pc, #32]	; (80067f4 <__NVIC_SetPriority+0x50>)
 80067d4:	79fb      	ldrb	r3, [r7, #7]
 80067d6:	f003 030f 	and.w	r3, r3, #15
 80067da:	3b04      	subs	r3, #4
 80067dc:	0112      	lsls	r2, r2, #4
 80067de:	b2d2      	uxtb	r2, r2
 80067e0:	440b      	add	r3, r1
 80067e2:	761a      	strb	r2, [r3, #24]
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	e000e100 	.word	0xe000e100
 80067f4:	e000ed00 	.word	0xe000ed00

080067f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80067f8:	b580      	push	{r7, lr}
 80067fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80067fc:	4b05      	ldr	r3, [pc, #20]	; (8006814 <SysTick_Handler+0x1c>)
 80067fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006800:	f001 fcfe 	bl	8008200 <xTaskGetSchedulerState>
 8006804:	4603      	mov	r3, r0
 8006806:	2b01      	cmp	r3, #1
 8006808:	d001      	beq.n	800680e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800680a:	f002 fae5 	bl	8008dd8 <xPortSysTickHandler>
  }
}
 800680e:	bf00      	nop
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	e000e010 	.word	0xe000e010

08006818 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006818:	b580      	push	{r7, lr}
 800681a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800681c:	2100      	movs	r1, #0
 800681e:	f06f 0004 	mvn.w	r0, #4
 8006822:	f7ff ffbf 	bl	80067a4 <__NVIC_SetPriority>
#endif
}
 8006826:	bf00      	nop
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006832:	f3ef 8305 	mrs	r3, IPSR
 8006836:	603b      	str	r3, [r7, #0]
  return(result);
 8006838:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800683e:	f06f 0305 	mvn.w	r3, #5
 8006842:	607b      	str	r3, [r7, #4]
 8006844:	e00c      	b.n	8006860 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006846:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <osKernelInitialize+0x44>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d105      	bne.n	800685a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800684e:	4b08      	ldr	r3, [pc, #32]	; (8006870 <osKernelInitialize+0x44>)
 8006850:	2201      	movs	r2, #1
 8006852:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006854:	2300      	movs	r3, #0
 8006856:	607b      	str	r3, [r7, #4]
 8006858:	e002      	b.n	8006860 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800685a:	f04f 33ff 	mov.w	r3, #4294967295
 800685e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006860:	687b      	ldr	r3, [r7, #4]
}
 8006862:	4618      	mov	r0, r3
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	20000e34 	.word	0x20000e34

08006874 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800687a:	f3ef 8305 	mrs	r3, IPSR
 800687e:	603b      	str	r3, [r7, #0]
  return(result);
 8006880:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006886:	f06f 0305 	mvn.w	r3, #5
 800688a:	607b      	str	r3, [r7, #4]
 800688c:	e010      	b.n	80068b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800688e:	4b0b      	ldr	r3, [pc, #44]	; (80068bc <osKernelStart+0x48>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d109      	bne.n	80068aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006896:	f7ff ffbf 	bl	8006818 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800689a:	4b08      	ldr	r3, [pc, #32]	; (80068bc <osKernelStart+0x48>)
 800689c:	2202      	movs	r2, #2
 800689e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80068a0:	f001 f866 	bl	8007970 <vTaskStartScheduler>
      stat = osOK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	607b      	str	r3, [r7, #4]
 80068a8:	e002      	b.n	80068b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80068aa:	f04f 33ff 	mov.w	r3, #4294967295
 80068ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80068b0:	687b      	ldr	r3, [r7, #4]
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	20000e34 	.word	0x20000e34

080068c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08e      	sub	sp, #56	; 0x38
 80068c4:	af04      	add	r7, sp, #16
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80068cc:	2300      	movs	r3, #0
 80068ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068d0:	f3ef 8305 	mrs	r3, IPSR
 80068d4:	617b      	str	r3, [r7, #20]
  return(result);
 80068d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d17e      	bne.n	80069da <osThreadNew+0x11a>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d07b      	beq.n	80069da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80068e2:	2380      	movs	r3, #128	; 0x80
 80068e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80068e6:	2318      	movs	r3, #24
 80068e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80068ea:	2300      	movs	r3, #0
 80068ec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80068ee:	f04f 33ff 	mov.w	r3, #4294967295
 80068f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d045      	beq.n	8006986 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d002      	beq.n	8006908 <osThreadNew+0x48>
        name = attr->name;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d008      	beq.n	800692e <osThreadNew+0x6e>
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	2b38      	cmp	r3, #56	; 0x38
 8006920:	d805      	bhi.n	800692e <osThreadNew+0x6e>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	d001      	beq.n	8006932 <osThreadNew+0x72>
        return (NULL);
 800692e:	2300      	movs	r3, #0
 8006930:	e054      	b.n	80069dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	695b      	ldr	r3, [r3, #20]
 800693e:	089b      	lsrs	r3, r3, #2
 8006940:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d00e      	beq.n	8006968 <osThreadNew+0xa8>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	2b5b      	cmp	r3, #91	; 0x5b
 8006950:	d90a      	bls.n	8006968 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006956:	2b00      	cmp	r3, #0
 8006958:	d006      	beq.n	8006968 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <osThreadNew+0xa8>
        mem = 1;
 8006962:	2301      	movs	r3, #1
 8006964:	61bb      	str	r3, [r7, #24]
 8006966:	e010      	b.n	800698a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d10c      	bne.n	800698a <osThreadNew+0xca>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d108      	bne.n	800698a <osThreadNew+0xca>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d104      	bne.n	800698a <osThreadNew+0xca>
          mem = 0;
 8006980:	2300      	movs	r3, #0
 8006982:	61bb      	str	r3, [r7, #24]
 8006984:	e001      	b.n	800698a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006986:	2300      	movs	r3, #0
 8006988:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d110      	bne.n	80069b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006998:	9202      	str	r2, [sp, #8]
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	9300      	str	r3, [sp, #0]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	6a3a      	ldr	r2, [r7, #32]
 80069a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 fe0c 	bl	80075c4 <xTaskCreateStatic>
 80069ac:	4603      	mov	r3, r0
 80069ae:	613b      	str	r3, [r7, #16]
 80069b0:	e013      	b.n	80069da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d110      	bne.n	80069da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	f107 0310 	add.w	r3, r7, #16
 80069c0:	9301      	str	r3, [sp, #4]
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 fe57 	bl	800767e <xTaskCreate>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d001      	beq.n	80069da <osThreadNew+0x11a>
            hTask = NULL;
 80069d6:	2300      	movs	r3, #0
 80069d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80069da:	693b      	ldr	r3, [r7, #16]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3728      	adds	r7, #40	; 0x28
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069ec:	f3ef 8305 	mrs	r3, IPSR
 80069f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80069f2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d003      	beq.n	8006a00 <osDelay+0x1c>
    stat = osErrorISR;
 80069f8:	f06f 0305 	mvn.w	r3, #5
 80069fc:	60fb      	str	r3, [r7, #12]
 80069fe:	e007      	b.n	8006a10 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d002      	beq.n	8006a10 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 ff7c 	bl	8007908 <vTaskDelay>
    }
  }

  return (stat);
 8006a10:	68fb      	ldr	r3, [r7, #12]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
	...

08006a1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	60f8      	str	r0, [r7, #12]
 8006a24:	60b9      	str	r1, [r7, #8]
 8006a26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	4a07      	ldr	r2, [pc, #28]	; (8006a48 <vApplicationGetIdleTaskMemory+0x2c>)
 8006a2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	4a06      	ldr	r2, [pc, #24]	; (8006a4c <vApplicationGetIdleTaskMemory+0x30>)
 8006a32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2280      	movs	r2, #128	; 0x80
 8006a38:	601a      	str	r2, [r3, #0]
}
 8006a3a:	bf00      	nop
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	20000e38 	.word	0x20000e38
 8006a4c:	20000e94 	.word	0x20000e94

08006a50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	4a07      	ldr	r2, [pc, #28]	; (8006a7c <vApplicationGetTimerTaskMemory+0x2c>)
 8006a60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	4a06      	ldr	r2, [pc, #24]	; (8006a80 <vApplicationGetTimerTaskMemory+0x30>)
 8006a66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a6e:	601a      	str	r2, [r3, #0]
}
 8006a70:	bf00      	nop
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	20001094 	.word	0x20001094
 8006a80:	200010f0 	.word	0x200010f0

08006a84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a84:	b480      	push	{r7}
 8006a86:	b083      	sub	sp, #12
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f103 0208 	add.w	r2, r3, #8
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f04f 32ff 	mov.w	r2, #4294967295
 8006a9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f103 0208 	add.w	r2, r3, #8
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f103 0208 	add.w	r2, r3, #8
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ad2:	bf00      	nop
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b085      	sub	sp, #20
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	1c5a      	adds	r2, r3, #1
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	601a      	str	r2, [r3, #0]
}
 8006b1a:	bf00      	nop
 8006b1c:	3714      	adds	r7, #20
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b26:	b480      	push	{r7}
 8006b28:	b085      	sub	sp, #20
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
 8006b2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b3c:	d103      	bne.n	8006b46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	60fb      	str	r3, [r7, #12]
 8006b44:	e00c      	b.n	8006b60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	3308      	adds	r3, #8
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	e002      	b.n	8006b54 <vListInsert+0x2e>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	60fb      	str	r3, [r7, #12]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d2f6      	bcs.n	8006b4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	601a      	str	r2, [r3, #0]
}
 8006b8c:	bf00      	nop
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	6892      	ldr	r2, [r2, #8]
 8006bae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	6852      	ldr	r2, [r2, #4]
 8006bb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d103      	bne.n	8006bcc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689a      	ldr	r2, [r3, #8]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	1e5a      	subs	r2, r3, #1
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3714      	adds	r7, #20
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10a      	bne.n	8006c16 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c04:	f383 8811 	msr	BASEPRI, r3
 8006c08:	f3bf 8f6f 	isb	sy
 8006c0c:	f3bf 8f4f 	dsb	sy
 8006c10:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c12:	bf00      	nop
 8006c14:	e7fe      	b.n	8006c14 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c16:	f002 f84d 	bl	8008cb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c22:	68f9      	ldr	r1, [r7, #12]
 8006c24:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c26:	fb01 f303 	mul.w	r3, r1, r3
 8006c2a:	441a      	add	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	3b01      	subs	r3, #1
 8006c48:	68f9      	ldr	r1, [r7, #12]
 8006c4a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006c4c:	fb01 f303 	mul.w	r3, r1, r3
 8006c50:	441a      	add	r2, r3
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	22ff      	movs	r2, #255	; 0xff
 8006c5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	22ff      	movs	r2, #255	; 0xff
 8006c62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d114      	bne.n	8006c96 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	691b      	ldr	r3, [r3, #16]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d01a      	beq.n	8006caa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	3310      	adds	r3, #16
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f001 f903 	bl	8007e84 <xTaskRemoveFromEventList>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d012      	beq.n	8006caa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c84:	4b0c      	ldr	r3, [pc, #48]	; (8006cb8 <xQueueGenericReset+0xcc>)
 8006c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	f3bf 8f6f 	isb	sy
 8006c94:	e009      	b.n	8006caa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3310      	adds	r3, #16
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7ff fef2 	bl	8006a84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	3324      	adds	r3, #36	; 0x24
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff feed 	bl	8006a84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006caa:	f002 f833 	bl	8008d14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006cae:	2301      	movs	r3, #1
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}
 8006cb8:	e000ed04 	.word	0xe000ed04

08006cbc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08e      	sub	sp, #56	; 0x38
 8006cc0:	af02      	add	r7, sp, #8
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
 8006cc8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ce2:	bf00      	nop
 8006ce4:	e7fe      	b.n	8006ce4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10a      	bne.n	8006d02 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006cfe:	bf00      	nop
 8006d00:	e7fe      	b.n	8006d00 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <xQueueGenericCreateStatic+0x52>
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <xQueueGenericCreateStatic+0x56>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e000      	b.n	8006d14 <xQueueGenericCreateStatic+0x58>
 8006d12:	2300      	movs	r3, #0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d10a      	bne.n	8006d2e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1c:	f383 8811 	msr	BASEPRI, r3
 8006d20:	f3bf 8f6f 	isb	sy
 8006d24:	f3bf 8f4f 	dsb	sy
 8006d28:	623b      	str	r3, [r7, #32]
}
 8006d2a:	bf00      	nop
 8006d2c:	e7fe      	b.n	8006d2c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d102      	bne.n	8006d3a <xQueueGenericCreateStatic+0x7e>
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <xQueueGenericCreateStatic+0x82>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <xQueueGenericCreateStatic+0x84>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	61fb      	str	r3, [r7, #28]
}
 8006d56:	bf00      	nop
 8006d58:	e7fe      	b.n	8006d58 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006d5a:	2350      	movs	r3, #80	; 0x50
 8006d5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2b50      	cmp	r3, #80	; 0x50
 8006d62:	d00a      	beq.n	8006d7a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	61bb      	str	r3, [r7, #24]
}
 8006d76:	bf00      	nop
 8006d78:	e7fe      	b.n	8006d78 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006d7a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00d      	beq.n	8006da2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d88:	2201      	movs	r2, #1
 8006d8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d8e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d94:	9300      	str	r3, [sp, #0]
 8006d96:	4613      	mov	r3, r2
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	68b9      	ldr	r1, [r7, #8]
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 f805 	bl	8006dac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3730      	adds	r7, #48	; 0x30
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	607a      	str	r2, [r7, #4]
 8006db8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d103      	bne.n	8006dc8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	e002      	b.n	8006dce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006dda:	2101      	movs	r1, #1
 8006ddc:	69b8      	ldr	r0, [r7, #24]
 8006dde:	f7ff ff05 	bl	8006bec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	78fa      	ldrb	r2, [r7, #3]
 8006de6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006dea:	bf00      	nop
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
	...

08006df4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b08e      	sub	sp, #56	; 0x38
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
 8006e00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e02:	2300      	movs	r3, #0
 8006e04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10a      	bne.n	8006e26 <xQueueGenericSend+0x32>
	__asm volatile
 8006e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e22:	bf00      	nop
 8006e24:	e7fe      	b.n	8006e24 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d103      	bne.n	8006e34 <xQueueGenericSend+0x40>
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <xQueueGenericSend+0x44>
 8006e34:	2301      	movs	r3, #1
 8006e36:	e000      	b.n	8006e3a <xQueueGenericSend+0x46>
 8006e38:	2300      	movs	r3, #0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10a      	bne.n	8006e54 <xQueueGenericSend+0x60>
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006e50:	bf00      	nop
 8006e52:	e7fe      	b.n	8006e52 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d103      	bne.n	8006e62 <xQueueGenericSend+0x6e>
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d101      	bne.n	8006e66 <xQueueGenericSend+0x72>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e000      	b.n	8006e68 <xQueueGenericSend+0x74>
 8006e66:	2300      	movs	r3, #0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10a      	bne.n	8006e82 <xQueueGenericSend+0x8e>
	__asm volatile
 8006e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	623b      	str	r3, [r7, #32]
}
 8006e7e:	bf00      	nop
 8006e80:	e7fe      	b.n	8006e80 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e82:	f001 f9bd 	bl	8008200 <xTaskGetSchedulerState>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d102      	bne.n	8006e92 <xQueueGenericSend+0x9e>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <xQueueGenericSend+0xa2>
 8006e92:	2301      	movs	r3, #1
 8006e94:	e000      	b.n	8006e98 <xQueueGenericSend+0xa4>
 8006e96:	2300      	movs	r3, #0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10a      	bne.n	8006eb2 <xQueueGenericSend+0xbe>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	61fb      	str	r3, [r7, #28]
}
 8006eae:	bf00      	nop
 8006eb0:	e7fe      	b.n	8006eb0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006eb2:	f001 feff 	bl	8008cb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d302      	bcc.n	8006ec8 <xQueueGenericSend+0xd4>
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	2b02      	cmp	r3, #2
 8006ec6:	d129      	bne.n	8006f1c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	68b9      	ldr	r1, [r7, #8]
 8006ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006ece:	f000 fa0b 	bl	80072e8 <prvCopyDataToQueue>
 8006ed2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d010      	beq.n	8006efe <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	3324      	adds	r3, #36	; 0x24
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f000 ffcf 	bl	8007e84 <xTaskRemoveFromEventList>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d013      	beq.n	8006f14 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006eec:	4b3f      	ldr	r3, [pc, #252]	; (8006fec <xQueueGenericSend+0x1f8>)
 8006eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ef2:	601a      	str	r2, [r3, #0]
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	e00a      	b.n	8006f14 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d007      	beq.n	8006f14 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f04:	4b39      	ldr	r3, [pc, #228]	; (8006fec <xQueueGenericSend+0x1f8>)
 8006f06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f0a:	601a      	str	r2, [r3, #0]
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f14:	f001 fefe 	bl	8008d14 <vPortExitCritical>
				return pdPASS;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e063      	b.n	8006fe4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d103      	bne.n	8006f2a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f22:	f001 fef7 	bl	8008d14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f26:	2300      	movs	r3, #0
 8006f28:	e05c      	b.n	8006fe4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d106      	bne.n	8006f3e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f30:	f107 0314 	add.w	r3, r7, #20
 8006f34:	4618      	mov	r0, r3
 8006f36:	f001 f809 	bl	8007f4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f3e:	f001 fee9 	bl	8008d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f42:	f000 fd7b 	bl	8007a3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f46:	f001 feb5 	bl	8008cb4 <vPortEnterCritical>
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f50:	b25b      	sxtb	r3, r3
 8006f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f56:	d103      	bne.n	8006f60 <xQueueGenericSend+0x16c>
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f62:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f66:	b25b      	sxtb	r3, r3
 8006f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6c:	d103      	bne.n	8006f76 <xQueueGenericSend+0x182>
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f76:	f001 fecd 	bl	8008d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f7a:	1d3a      	adds	r2, r7, #4
 8006f7c:	f107 0314 	add.w	r3, r7, #20
 8006f80:	4611      	mov	r1, r2
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 fff8 	bl	8007f78 <xTaskCheckForTimeOut>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d124      	bne.n	8006fd8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006f8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f90:	f000 faa2 	bl	80074d8 <prvIsQueueFull>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d018      	beq.n	8006fcc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9c:	3310      	adds	r3, #16
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 ff1e 	bl	8007de4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006fa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006faa:	f000 fa2d 	bl	8007408 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006fae:	f000 fd53 	bl	8007a58 <xTaskResumeAll>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f47f af7c 	bne.w	8006eb2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006fba:	4b0c      	ldr	r3, [pc, #48]	; (8006fec <xQueueGenericSend+0x1f8>)
 8006fbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fc0:	601a      	str	r2, [r3, #0]
 8006fc2:	f3bf 8f4f 	dsb	sy
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	e772      	b.n	8006eb2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fce:	f000 fa1b 	bl	8007408 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fd2:	f000 fd41 	bl	8007a58 <xTaskResumeAll>
 8006fd6:	e76c      	b.n	8006eb2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006fd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fda:	f000 fa15 	bl	8007408 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fde:	f000 fd3b 	bl	8007a58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006fe2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3738      	adds	r7, #56	; 0x38
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	e000ed04 	.word	0xe000ed04

08006ff0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b090      	sub	sp, #64	; 0x40
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
 8006ffc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007004:	2b00      	cmp	r3, #0
 8007006:	d10a      	bne.n	800701e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700c:	f383 8811 	msr	BASEPRI, r3
 8007010:	f3bf 8f6f 	isb	sy
 8007014:	f3bf 8f4f 	dsb	sy
 8007018:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800701a:	bf00      	nop
 800701c:	e7fe      	b.n	800701c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d103      	bne.n	800702c <xQueueGenericSendFromISR+0x3c>
 8007024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	2b00      	cmp	r3, #0
 800702a:	d101      	bne.n	8007030 <xQueueGenericSendFromISR+0x40>
 800702c:	2301      	movs	r3, #1
 800702e:	e000      	b.n	8007032 <xQueueGenericSendFromISR+0x42>
 8007030:	2300      	movs	r3, #0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10a      	bne.n	800704c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007048:	bf00      	nop
 800704a:	e7fe      	b.n	800704a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	2b02      	cmp	r3, #2
 8007050:	d103      	bne.n	800705a <xQueueGenericSendFromISR+0x6a>
 8007052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007056:	2b01      	cmp	r3, #1
 8007058:	d101      	bne.n	800705e <xQueueGenericSendFromISR+0x6e>
 800705a:	2301      	movs	r3, #1
 800705c:	e000      	b.n	8007060 <xQueueGenericSendFromISR+0x70>
 800705e:	2300      	movs	r3, #0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10a      	bne.n	800707a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	623b      	str	r3, [r7, #32]
}
 8007076:	bf00      	nop
 8007078:	e7fe      	b.n	8007078 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800707a:	f001 fefd 	bl	8008e78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800707e:	f3ef 8211 	mrs	r2, BASEPRI
 8007082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007086:	f383 8811 	msr	BASEPRI, r3
 800708a:	f3bf 8f6f 	isb	sy
 800708e:	f3bf 8f4f 	dsb	sy
 8007092:	61fa      	str	r2, [r7, #28]
 8007094:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007096:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007098:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800709a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800709e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d302      	bcc.n	80070ac <xQueueGenericSendFromISR+0xbc>
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d12f      	bne.n	800710c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80070ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ba:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80070bc:	683a      	ldr	r2, [r7, #0]
 80070be:	68b9      	ldr	r1, [r7, #8]
 80070c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070c2:	f000 f911 	bl	80072e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80070c6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80070ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ce:	d112      	bne.n	80070f6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d016      	beq.n	8007106 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80070d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070da:	3324      	adds	r3, #36	; 0x24
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 fed1 	bl	8007e84 <xTaskRemoveFromEventList>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d00e      	beq.n	8007106 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00b      	beq.n	8007106 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	e007      	b.n	8007106 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80070f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80070fa:	3301      	adds	r3, #1
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	b25a      	sxtb	r2, r3
 8007100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007106:	2301      	movs	r3, #1
 8007108:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800710a:	e001      	b.n	8007110 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800710c:	2300      	movs	r3, #0
 800710e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007112:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800711a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800711c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800711e:	4618      	mov	r0, r3
 8007120:	3740      	adds	r7, #64	; 0x40
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b08c      	sub	sp, #48	; 0x30
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007134:	2300      	movs	r3, #0
 8007136:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800713c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800713e:	2b00      	cmp	r3, #0
 8007140:	d10a      	bne.n	8007158 <xQueueReceive+0x30>
	__asm volatile
 8007142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	623b      	str	r3, [r7, #32]
}
 8007154:	bf00      	nop
 8007156:	e7fe      	b.n	8007156 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d103      	bne.n	8007166 <xQueueReceive+0x3e>
 800715e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <xQueueReceive+0x42>
 8007166:	2301      	movs	r3, #1
 8007168:	e000      	b.n	800716c <xQueueReceive+0x44>
 800716a:	2300      	movs	r3, #0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10a      	bne.n	8007186 <xQueueReceive+0x5e>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	61fb      	str	r3, [r7, #28]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007186:	f001 f83b 	bl	8008200 <xTaskGetSchedulerState>
 800718a:	4603      	mov	r3, r0
 800718c:	2b00      	cmp	r3, #0
 800718e:	d102      	bne.n	8007196 <xQueueReceive+0x6e>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d101      	bne.n	800719a <xQueueReceive+0x72>
 8007196:	2301      	movs	r3, #1
 8007198:	e000      	b.n	800719c <xQueueReceive+0x74>
 800719a:	2300      	movs	r3, #0
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10a      	bne.n	80071b6 <xQueueReceive+0x8e>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	61bb      	str	r3, [r7, #24]
}
 80071b2:	bf00      	nop
 80071b4:	e7fe      	b.n	80071b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071b6:	f001 fd7d 	bl	8008cb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d01f      	beq.n	8007206 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80071c6:	68b9      	ldr	r1, [r7, #8]
 80071c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071ca:	f000 f8f7 	bl	80073bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d0:	1e5a      	subs	r2, r3, #1
 80071d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00f      	beq.n	80071fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e0:	3310      	adds	r3, #16
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 fe4e 	bl	8007e84 <xTaskRemoveFromEventList>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d007      	beq.n	80071fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80071ee:	4b3d      	ldr	r3, [pc, #244]	; (80072e4 <xQueueReceive+0x1bc>)
 80071f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071f4:	601a      	str	r2, [r3, #0]
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80071fe:	f001 fd89 	bl	8008d14 <vPortExitCritical>
				return pdPASS;
 8007202:	2301      	movs	r3, #1
 8007204:	e069      	b.n	80072da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d103      	bne.n	8007214 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800720c:	f001 fd82 	bl	8008d14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007210:	2300      	movs	r3, #0
 8007212:	e062      	b.n	80072da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007216:	2b00      	cmp	r3, #0
 8007218:	d106      	bne.n	8007228 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800721a:	f107 0310 	add.w	r3, r7, #16
 800721e:	4618      	mov	r0, r3
 8007220:	f000 fe94 	bl	8007f4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007224:	2301      	movs	r3, #1
 8007226:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007228:	f001 fd74 	bl	8008d14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800722c:	f000 fc06 	bl	8007a3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007230:	f001 fd40 	bl	8008cb4 <vPortEnterCritical>
 8007234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007236:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800723a:	b25b      	sxtb	r3, r3
 800723c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007240:	d103      	bne.n	800724a <xQueueReceive+0x122>
 8007242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007244:	2200      	movs	r2, #0
 8007246:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800724a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800724c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007250:	b25b      	sxtb	r3, r3
 8007252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007256:	d103      	bne.n	8007260 <xQueueReceive+0x138>
 8007258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007260:	f001 fd58 	bl	8008d14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007264:	1d3a      	adds	r2, r7, #4
 8007266:	f107 0310 	add.w	r3, r7, #16
 800726a:	4611      	mov	r1, r2
 800726c:	4618      	mov	r0, r3
 800726e:	f000 fe83 	bl	8007f78 <xTaskCheckForTimeOut>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d123      	bne.n	80072c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007278:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800727a:	f000 f917 	bl	80074ac <prvIsQueueEmpty>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d017      	beq.n	80072b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007286:	3324      	adds	r3, #36	; 0x24
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	4611      	mov	r1, r2
 800728c:	4618      	mov	r0, r3
 800728e:	f000 fda9 	bl	8007de4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007294:	f000 f8b8 	bl	8007408 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007298:	f000 fbde 	bl	8007a58 <xTaskResumeAll>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d189      	bne.n	80071b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80072a2:	4b10      	ldr	r3, [pc, #64]	; (80072e4 <xQueueReceive+0x1bc>)
 80072a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	e780      	b.n	80071b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80072b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072b6:	f000 f8a7 	bl	8007408 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072ba:	f000 fbcd 	bl	8007a58 <xTaskResumeAll>
 80072be:	e77a      	b.n	80071b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80072c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072c2:	f000 f8a1 	bl	8007408 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072c6:	f000 fbc7 	bl	8007a58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072cc:	f000 f8ee 	bl	80074ac <prvIsQueueEmpty>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f43f af6f 	beq.w	80071b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80072d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3730      	adds	r7, #48	; 0x30
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	e000ed04 	.word	0xe000ed04

080072e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b086      	sub	sp, #24
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80072f4:	2300      	movs	r3, #0
 80072f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10d      	bne.n	8007322 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d14d      	bne.n	80073aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	4618      	mov	r0, r3
 8007314:	f000 ff92 	bl	800823c <xTaskPriorityDisinherit>
 8007318:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	609a      	str	r2, [r3, #8]
 8007320:	e043      	b.n	80073aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d119      	bne.n	800735c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6858      	ldr	r0, [r3, #4]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007330:	461a      	mov	r2, r3
 8007332:	68b9      	ldr	r1, [r7, #8]
 8007334:	f001 fff4 	bl	8009320 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007340:	441a      	add	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	429a      	cmp	r2, r3
 8007350:	d32b      	bcc.n	80073aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	605a      	str	r2, [r3, #4]
 800735a:	e026      	b.n	80073aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	68d8      	ldr	r0, [r3, #12]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007364:	461a      	mov	r2, r3
 8007366:	68b9      	ldr	r1, [r7, #8]
 8007368:	f001 ffda 	bl	8009320 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	68da      	ldr	r2, [r3, #12]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007374:	425b      	negs	r3, r3
 8007376:	441a      	add	r2, r3
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	68da      	ldr	r2, [r3, #12]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	429a      	cmp	r2, r3
 8007386:	d207      	bcs.n	8007398 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007390:	425b      	negs	r3, r3
 8007392:	441a      	add	r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b02      	cmp	r3, #2
 800739c:	d105      	bne.n	80073aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d002      	beq.n	80073aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	3b01      	subs	r3, #1
 80073a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	1c5a      	adds	r2, r3, #1
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80073b2:	697b      	ldr	r3, [r7, #20]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d018      	beq.n	8007400 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	68da      	ldr	r2, [r3, #12]
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	441a      	add	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68da      	ldr	r2, [r3, #12]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d303      	bcc.n	80073f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68d9      	ldr	r1, [r3, #12]
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	461a      	mov	r2, r3
 80073fa:	6838      	ldr	r0, [r7, #0]
 80073fc:	f001 ff90 	bl	8009320 <memcpy>
	}
}
 8007400:	bf00      	nop
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007410:	f001 fc50 	bl	8008cb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800741a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800741c:	e011      	b.n	8007442 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007422:	2b00      	cmp	r3, #0
 8007424:	d012      	beq.n	800744c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	3324      	adds	r3, #36	; 0x24
 800742a:	4618      	mov	r0, r3
 800742c:	f000 fd2a 	bl	8007e84 <xTaskRemoveFromEventList>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007436:	f000 fe01 	bl	800803c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800743a:	7bfb      	ldrb	r3, [r7, #15]
 800743c:	3b01      	subs	r3, #1
 800743e:	b2db      	uxtb	r3, r3
 8007440:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007446:	2b00      	cmp	r3, #0
 8007448:	dce9      	bgt.n	800741e <prvUnlockQueue+0x16>
 800744a:	e000      	b.n	800744e <prvUnlockQueue+0x46>
					break;
 800744c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	22ff      	movs	r2, #255	; 0xff
 8007452:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007456:	f001 fc5d 	bl	8008d14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800745a:	f001 fc2b 	bl	8008cb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007464:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007466:	e011      	b.n	800748c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d012      	beq.n	8007496 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	3310      	adds	r3, #16
 8007474:	4618      	mov	r0, r3
 8007476:	f000 fd05 	bl	8007e84 <xTaskRemoveFromEventList>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d001      	beq.n	8007484 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007480:	f000 fddc 	bl	800803c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007484:	7bbb      	ldrb	r3, [r7, #14]
 8007486:	3b01      	subs	r3, #1
 8007488:	b2db      	uxtb	r3, r3
 800748a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800748c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007490:	2b00      	cmp	r3, #0
 8007492:	dce9      	bgt.n	8007468 <prvUnlockQueue+0x60>
 8007494:	e000      	b.n	8007498 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007496:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	22ff      	movs	r2, #255	; 0xff
 800749c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80074a0:	f001 fc38 	bl	8008d14 <vPortExitCritical>
}
 80074a4:	bf00      	nop
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}

080074ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b084      	sub	sp, #16
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074b4:	f001 fbfe 	bl	8008cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d102      	bne.n	80074c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80074c0:	2301      	movs	r3, #1
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	e001      	b.n	80074ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80074c6:	2300      	movs	r3, #0
 80074c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074ca:	f001 fc23 	bl	8008d14 <vPortExitCritical>

	return xReturn;
 80074ce:	68fb      	ldr	r3, [r7, #12]
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074e0:	f001 fbe8 	bl	8008cb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d102      	bne.n	80074f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80074f0:	2301      	movs	r3, #1
 80074f2:	60fb      	str	r3, [r7, #12]
 80074f4:	e001      	b.n	80074fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80074f6:	2300      	movs	r3, #0
 80074f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074fa:	f001 fc0b 	bl	8008d14 <vPortExitCritical>

	return xReturn;
 80074fe:	68fb      	ldr	r3, [r7, #12]
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007512:	2300      	movs	r3, #0
 8007514:	60fb      	str	r3, [r7, #12]
 8007516:	e014      	b.n	8007542 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007518:	4a0f      	ldr	r2, [pc, #60]	; (8007558 <vQueueAddToRegistry+0x50>)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d10b      	bne.n	800753c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007524:	490c      	ldr	r1, [pc, #48]	; (8007558 <vQueueAddToRegistry+0x50>)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800752e:	4a0a      	ldr	r2, [pc, #40]	; (8007558 <vQueueAddToRegistry+0x50>)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	00db      	lsls	r3, r3, #3
 8007534:	4413      	add	r3, r2
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800753a:	e006      	b.n	800754a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	3301      	adds	r3, #1
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2b07      	cmp	r3, #7
 8007546:	d9e7      	bls.n	8007518 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007548:	bf00      	nop
 800754a:	bf00      	nop
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	200014f0 	.word	0x200014f0

0800755c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800756c:	f001 fba2 	bl	8008cb4 <vPortEnterCritical>
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007576:	b25b      	sxtb	r3, r3
 8007578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757c:	d103      	bne.n	8007586 <vQueueWaitForMessageRestricted+0x2a>
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800758c:	b25b      	sxtb	r3, r3
 800758e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007592:	d103      	bne.n	800759c <vQueueWaitForMessageRestricted+0x40>
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800759c:	f001 fbba 	bl	8008d14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d106      	bne.n	80075b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	3324      	adds	r3, #36	; 0x24
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	68b9      	ldr	r1, [r7, #8]
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 fc3b 	bl	8007e2c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80075b6:	6978      	ldr	r0, [r7, #20]
 80075b8:	f7ff ff26 	bl	8007408 <prvUnlockQueue>
	}
 80075bc:	bf00      	nop
 80075be:	3718      	adds	r7, #24
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08e      	sub	sp, #56	; 0x38
 80075c8:	af04      	add	r7, sp, #16
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
 80075d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80075d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10a      	bne.n	80075ee <xTaskCreateStatic+0x2a>
	__asm volatile
 80075d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075dc:	f383 8811 	msr	BASEPRI, r3
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	623b      	str	r3, [r7, #32]
}
 80075ea:	bf00      	nop
 80075ec:	e7fe      	b.n	80075ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80075ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10a      	bne.n	800760a <xTaskCreateStatic+0x46>
	__asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	61fb      	str	r3, [r7, #28]
}
 8007606:	bf00      	nop
 8007608:	e7fe      	b.n	8007608 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800760a:	235c      	movs	r3, #92	; 0x5c
 800760c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	2b5c      	cmp	r3, #92	; 0x5c
 8007612:	d00a      	beq.n	800762a <xTaskCreateStatic+0x66>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	61bb      	str	r3, [r7, #24]
}
 8007626:	bf00      	nop
 8007628:	e7fe      	b.n	8007628 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800762a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800762c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762e:	2b00      	cmp	r3, #0
 8007630:	d01e      	beq.n	8007670 <xTaskCreateStatic+0xac>
 8007632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007634:	2b00      	cmp	r3, #0
 8007636:	d01b      	beq.n	8007670 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800763c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007640:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	2202      	movs	r2, #2
 8007646:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800764a:	2300      	movs	r3, #0
 800764c:	9303      	str	r3, [sp, #12]
 800764e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007650:	9302      	str	r3, [sp, #8]
 8007652:	f107 0314 	add.w	r3, r7, #20
 8007656:	9301      	str	r3, [sp, #4]
 8007658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	68b9      	ldr	r1, [r7, #8]
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f000 f850 	bl	8007708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007668:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800766a:	f000 f8dd 	bl	8007828 <prvAddNewTaskToReadyList>
 800766e:	e001      	b.n	8007674 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007670:	2300      	movs	r3, #0
 8007672:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007674:	697b      	ldr	r3, [r7, #20]
	}
 8007676:	4618      	mov	r0, r3
 8007678:	3728      	adds	r7, #40	; 0x28
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800767e:	b580      	push	{r7, lr}
 8007680:	b08c      	sub	sp, #48	; 0x30
 8007682:	af04      	add	r7, sp, #16
 8007684:	60f8      	str	r0, [r7, #12]
 8007686:	60b9      	str	r1, [r7, #8]
 8007688:	603b      	str	r3, [r7, #0]
 800768a:	4613      	mov	r3, r2
 800768c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800768e:	88fb      	ldrh	r3, [r7, #6]
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	4618      	mov	r0, r3
 8007694:	f001 fc30 	bl	8008ef8 <pvPortMalloc>
 8007698:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00e      	beq.n	80076be <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80076a0:	205c      	movs	r0, #92	; 0x5c
 80076a2:	f001 fc29 	bl	8008ef8 <pvPortMalloc>
 80076a6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	631a      	str	r2, [r3, #48]	; 0x30
 80076b4:	e005      	b.n	80076c2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80076b6:	6978      	ldr	r0, [r7, #20]
 80076b8:	f001 fcea 	bl	8009090 <vPortFree>
 80076bc:	e001      	b.n	80076c2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80076be:	2300      	movs	r3, #0
 80076c0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80076c2:	69fb      	ldr	r3, [r7, #28]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d017      	beq.n	80076f8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80076d0:	88fa      	ldrh	r2, [r7, #6]
 80076d2:	2300      	movs	r3, #0
 80076d4:	9303      	str	r3, [sp, #12]
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	9302      	str	r3, [sp, #8]
 80076da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076dc:	9301      	str	r3, [sp, #4]
 80076de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	68b9      	ldr	r1, [r7, #8]
 80076e6:	68f8      	ldr	r0, [r7, #12]
 80076e8:	f000 f80e 	bl	8007708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076ec:	69f8      	ldr	r0, [r7, #28]
 80076ee:	f000 f89b 	bl	8007828 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80076f2:	2301      	movs	r3, #1
 80076f4:	61bb      	str	r3, [r7, #24]
 80076f6:	e002      	b.n	80076fe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80076f8:	f04f 33ff 	mov.w	r3, #4294967295
 80076fc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80076fe:	69bb      	ldr	r3, [r7, #24]
	}
 8007700:	4618      	mov	r0, r3
 8007702:	3720      	adds	r7, #32
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
 8007714:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007718:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	461a      	mov	r2, r3
 8007720:	21a5      	movs	r1, #165	; 0xa5
 8007722:	f001 fe0b 	bl	800933c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007730:	3b01      	subs	r3, #1
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	4413      	add	r3, r2
 8007736:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	f023 0307 	bic.w	r3, r3, #7
 800773e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	f003 0307 	and.w	r3, r3, #7
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00a      	beq.n	8007760 <prvInitialiseNewTask+0x58>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	617b      	str	r3, [r7, #20]
}
 800775c:	bf00      	nop
 800775e:	e7fe      	b.n	800775e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d01f      	beq.n	80077a6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007766:	2300      	movs	r3, #0
 8007768:	61fb      	str	r3, [r7, #28]
 800776a:	e012      	b.n	8007792 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	4413      	add	r3, r2
 8007772:	7819      	ldrb	r1, [r3, #0]
 8007774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	4413      	add	r3, r2
 800777a:	3334      	adds	r3, #52	; 0x34
 800777c:	460a      	mov	r2, r1
 800777e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	4413      	add	r3, r2
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d006      	beq.n	800779a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	3301      	adds	r3, #1
 8007790:	61fb      	str	r3, [r7, #28]
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	2b0f      	cmp	r3, #15
 8007796:	d9e9      	bls.n	800776c <prvInitialiseNewTask+0x64>
 8007798:	e000      	b.n	800779c <prvInitialiseNewTask+0x94>
			{
				break;
 800779a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800779c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077a4:	e003      	b.n	80077ae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80077a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a8:	2200      	movs	r2, #0
 80077aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b0:	2b37      	cmp	r3, #55	; 0x37
 80077b2:	d901      	bls.n	80077b8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077b4:	2337      	movs	r3, #55	; 0x37
 80077b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80077b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80077c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c6:	2200      	movs	r2, #0
 80077c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80077ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077cc:	3304      	adds	r3, #4
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7ff f978 	bl	8006ac4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80077d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d6:	3318      	adds	r3, #24
 80077d8:	4618      	mov	r0, r3
 80077da:	f7ff f973 	bl	8006ac4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80077ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80077f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f6:	2200      	movs	r2, #0
 80077f8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	68f9      	ldr	r1, [r7, #12]
 8007806:	69b8      	ldr	r0, [r7, #24]
 8007808:	f001 f928 	bl	8008a5c <pxPortInitialiseStack>
 800780c:	4602      	mov	r2, r0
 800780e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007810:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800781c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800781e:	bf00      	nop
 8007820:	3720      	adds	r7, #32
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
	...

08007828 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007830:	f001 fa40 	bl	8008cb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007834:	4b2d      	ldr	r3, [pc, #180]	; (80078ec <prvAddNewTaskToReadyList+0xc4>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3301      	adds	r3, #1
 800783a:	4a2c      	ldr	r2, [pc, #176]	; (80078ec <prvAddNewTaskToReadyList+0xc4>)
 800783c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800783e:	4b2c      	ldr	r3, [pc, #176]	; (80078f0 <prvAddNewTaskToReadyList+0xc8>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d109      	bne.n	800785a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007846:	4a2a      	ldr	r2, [pc, #168]	; (80078f0 <prvAddNewTaskToReadyList+0xc8>)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800784c:	4b27      	ldr	r3, [pc, #156]	; (80078ec <prvAddNewTaskToReadyList+0xc4>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d110      	bne.n	8007876 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007854:	f000 fc16 	bl	8008084 <prvInitialiseTaskLists>
 8007858:	e00d      	b.n	8007876 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800785a:	4b26      	ldr	r3, [pc, #152]	; (80078f4 <prvAddNewTaskToReadyList+0xcc>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d109      	bne.n	8007876 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007862:	4b23      	ldr	r3, [pc, #140]	; (80078f0 <prvAddNewTaskToReadyList+0xc8>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786c:	429a      	cmp	r2, r3
 800786e:	d802      	bhi.n	8007876 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007870:	4a1f      	ldr	r2, [pc, #124]	; (80078f0 <prvAddNewTaskToReadyList+0xc8>)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007876:	4b20      	ldr	r3, [pc, #128]	; (80078f8 <prvAddNewTaskToReadyList+0xd0>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	3301      	adds	r3, #1
 800787c:	4a1e      	ldr	r2, [pc, #120]	; (80078f8 <prvAddNewTaskToReadyList+0xd0>)
 800787e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007880:	4b1d      	ldr	r3, [pc, #116]	; (80078f8 <prvAddNewTaskToReadyList+0xd0>)
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788c:	4b1b      	ldr	r3, [pc, #108]	; (80078fc <prvAddNewTaskToReadyList+0xd4>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	429a      	cmp	r2, r3
 8007892:	d903      	bls.n	800789c <prvAddNewTaskToReadyList+0x74>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007898:	4a18      	ldr	r2, [pc, #96]	; (80078fc <prvAddNewTaskToReadyList+0xd4>)
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a0:	4613      	mov	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4a15      	ldr	r2, [pc, #84]	; (8007900 <prvAddNewTaskToReadyList+0xd8>)
 80078aa:	441a      	add	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	3304      	adds	r3, #4
 80078b0:	4619      	mov	r1, r3
 80078b2:	4610      	mov	r0, r2
 80078b4:	f7ff f913 	bl	8006ade <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80078b8:	f001 fa2c 	bl	8008d14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80078bc:	4b0d      	ldr	r3, [pc, #52]	; (80078f4 <prvAddNewTaskToReadyList+0xcc>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d00e      	beq.n	80078e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80078c4:	4b0a      	ldr	r3, [pc, #40]	; (80078f0 <prvAddNewTaskToReadyList+0xc8>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d207      	bcs.n	80078e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80078d2:	4b0c      	ldr	r3, [pc, #48]	; (8007904 <prvAddNewTaskToReadyList+0xdc>)
 80078d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078d8:	601a      	str	r2, [r3, #0]
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078e2:	bf00      	nop
 80078e4:	3708      	adds	r7, #8
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20001a04 	.word	0x20001a04
 80078f0:	20001530 	.word	0x20001530
 80078f4:	20001a10 	.word	0x20001a10
 80078f8:	20001a20 	.word	0x20001a20
 80078fc:	20001a0c 	.word	0x20001a0c
 8007900:	20001534 	.word	0x20001534
 8007904:	e000ed04 	.word	0xe000ed04

08007908 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007910:	2300      	movs	r3, #0
 8007912:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d017      	beq.n	800794a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800791a:	4b13      	ldr	r3, [pc, #76]	; (8007968 <vTaskDelay+0x60>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <vTaskDelay+0x30>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	60bb      	str	r3, [r7, #8]
}
 8007934:	bf00      	nop
 8007936:	e7fe      	b.n	8007936 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007938:	f000 f880 	bl	8007a3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800793c:	2100      	movs	r1, #0
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fcea 	bl	8008318 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007944:	f000 f888 	bl	8007a58 <xTaskResumeAll>
 8007948:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d107      	bne.n	8007960 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007950:	4b06      	ldr	r3, [pc, #24]	; (800796c <vTaskDelay+0x64>)
 8007952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007960:	bf00      	nop
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	20001a2c 	.word	0x20001a2c
 800796c:	e000ed04 	.word	0xe000ed04

08007970 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b08a      	sub	sp, #40	; 0x28
 8007974:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007976:	2300      	movs	r3, #0
 8007978:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800797a:	2300      	movs	r3, #0
 800797c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800797e:	463a      	mov	r2, r7
 8007980:	1d39      	adds	r1, r7, #4
 8007982:	f107 0308 	add.w	r3, r7, #8
 8007986:	4618      	mov	r0, r3
 8007988:	f7ff f848 	bl	8006a1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800798c:	6839      	ldr	r1, [r7, #0]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	9202      	str	r2, [sp, #8]
 8007994:	9301      	str	r3, [sp, #4]
 8007996:	2300      	movs	r3, #0
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	2300      	movs	r3, #0
 800799c:	460a      	mov	r2, r1
 800799e:	4921      	ldr	r1, [pc, #132]	; (8007a24 <vTaskStartScheduler+0xb4>)
 80079a0:	4821      	ldr	r0, [pc, #132]	; (8007a28 <vTaskStartScheduler+0xb8>)
 80079a2:	f7ff fe0f 	bl	80075c4 <xTaskCreateStatic>
 80079a6:	4603      	mov	r3, r0
 80079a8:	4a20      	ldr	r2, [pc, #128]	; (8007a2c <vTaskStartScheduler+0xbc>)
 80079aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80079ac:	4b1f      	ldr	r3, [pc, #124]	; (8007a2c <vTaskStartScheduler+0xbc>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d002      	beq.n	80079ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80079b4:	2301      	movs	r3, #1
 80079b6:	617b      	str	r3, [r7, #20]
 80079b8:	e001      	b.n	80079be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80079ba:	2300      	movs	r3, #0
 80079bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d102      	bne.n	80079ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80079c4:	f000 fcfc 	bl	80083c0 <xTimerCreateTimerTask>
 80079c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d116      	bne.n	80079fe <vTaskStartScheduler+0x8e>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	613b      	str	r3, [r7, #16]
}
 80079e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80079e4:	4b12      	ldr	r3, [pc, #72]	; (8007a30 <vTaskStartScheduler+0xc0>)
 80079e6:	f04f 32ff 	mov.w	r2, #4294967295
 80079ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80079ec:	4b11      	ldr	r3, [pc, #68]	; (8007a34 <vTaskStartScheduler+0xc4>)
 80079ee:	2201      	movs	r2, #1
 80079f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80079f2:	4b11      	ldr	r3, [pc, #68]	; (8007a38 <vTaskStartScheduler+0xc8>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80079f8:	f001 f8ba 	bl	8008b70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80079fc:	e00e      	b.n	8007a1c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a04:	d10a      	bne.n	8007a1c <vTaskStartScheduler+0xac>
	__asm volatile
 8007a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0a:	f383 8811 	msr	BASEPRI, r3
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	60fb      	str	r3, [r7, #12]
}
 8007a18:	bf00      	nop
 8007a1a:	e7fe      	b.n	8007a1a <vTaskStartScheduler+0xaa>
}
 8007a1c:	bf00      	nop
 8007a1e:	3718      	adds	r7, #24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	08009d2c 	.word	0x08009d2c
 8007a28:	08008055 	.word	0x08008055
 8007a2c:	20001a28 	.word	0x20001a28
 8007a30:	20001a24 	.word	0x20001a24
 8007a34:	20001a10 	.word	0x20001a10
 8007a38:	20001a08 	.word	0x20001a08

08007a3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007a40:	4b04      	ldr	r3, [pc, #16]	; (8007a54 <vTaskSuspendAll+0x18>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3301      	adds	r3, #1
 8007a46:	4a03      	ldr	r2, [pc, #12]	; (8007a54 <vTaskSuspendAll+0x18>)
 8007a48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007a4a:	bf00      	nop
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr
 8007a54:	20001a2c 	.word	0x20001a2c

08007a58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007a62:	2300      	movs	r3, #0
 8007a64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007a66:	4b42      	ldr	r3, [pc, #264]	; (8007b70 <xTaskResumeAll+0x118>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10a      	bne.n	8007a84 <xTaskResumeAll+0x2c>
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	603b      	str	r3, [r7, #0]
}
 8007a80:	bf00      	nop
 8007a82:	e7fe      	b.n	8007a82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007a84:	f001 f916 	bl	8008cb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007a88:	4b39      	ldr	r3, [pc, #228]	; (8007b70 <xTaskResumeAll+0x118>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3b01      	subs	r3, #1
 8007a8e:	4a38      	ldr	r2, [pc, #224]	; (8007b70 <xTaskResumeAll+0x118>)
 8007a90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a92:	4b37      	ldr	r3, [pc, #220]	; (8007b70 <xTaskResumeAll+0x118>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d162      	bne.n	8007b60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007a9a:	4b36      	ldr	r3, [pc, #216]	; (8007b74 <xTaskResumeAll+0x11c>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d05e      	beq.n	8007b60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007aa2:	e02f      	b.n	8007b04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aa4:	4b34      	ldr	r3, [pc, #208]	; (8007b78 <xTaskResumeAll+0x120>)
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	3318      	adds	r3, #24
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7ff f871 	bl	8006b98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	3304      	adds	r3, #4
 8007aba:	4618      	mov	r0, r3
 8007abc:	f7ff f86c 	bl	8006b98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac4:	4b2d      	ldr	r3, [pc, #180]	; (8007b7c <xTaskResumeAll+0x124>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d903      	bls.n	8007ad4 <xTaskResumeAll+0x7c>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad0:	4a2a      	ldr	r2, [pc, #168]	; (8007b7c <xTaskResumeAll+0x124>)
 8007ad2:	6013      	str	r3, [r2, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad8:	4613      	mov	r3, r2
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	4413      	add	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4a27      	ldr	r2, [pc, #156]	; (8007b80 <xTaskResumeAll+0x128>)
 8007ae2:	441a      	add	r2, r3
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	3304      	adds	r3, #4
 8007ae8:	4619      	mov	r1, r3
 8007aea:	4610      	mov	r0, r2
 8007aec:	f7fe fff7 	bl	8006ade <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af4:	4b23      	ldr	r3, [pc, #140]	; (8007b84 <xTaskResumeAll+0x12c>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d302      	bcc.n	8007b04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007afe:	4b22      	ldr	r3, [pc, #136]	; (8007b88 <xTaskResumeAll+0x130>)
 8007b00:	2201      	movs	r2, #1
 8007b02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b04:	4b1c      	ldr	r3, [pc, #112]	; (8007b78 <xTaskResumeAll+0x120>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1cb      	bne.n	8007aa4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b12:	f000 fb55 	bl	80081c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007b16:	4b1d      	ldr	r3, [pc, #116]	; (8007b8c <xTaskResumeAll+0x134>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d010      	beq.n	8007b44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b22:	f000 f847 	bl	8007bb4 <xTaskIncrementTick>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007b2c:	4b16      	ldr	r3, [pc, #88]	; (8007b88 <xTaskResumeAll+0x130>)
 8007b2e:	2201      	movs	r2, #1
 8007b30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	3b01      	subs	r3, #1
 8007b36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1f1      	bne.n	8007b22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007b3e:	4b13      	ldr	r3, [pc, #76]	; (8007b8c <xTaskResumeAll+0x134>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007b44:	4b10      	ldr	r3, [pc, #64]	; (8007b88 <xTaskResumeAll+0x130>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d009      	beq.n	8007b60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007b50:	4b0f      	ldr	r3, [pc, #60]	; (8007b90 <xTaskResumeAll+0x138>)
 8007b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b56:	601a      	str	r2, [r3, #0]
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b60:	f001 f8d8 	bl	8008d14 <vPortExitCritical>

	return xAlreadyYielded;
 8007b64:	68bb      	ldr	r3, [r7, #8]
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	20001a2c 	.word	0x20001a2c
 8007b74:	20001a04 	.word	0x20001a04
 8007b78:	200019c4 	.word	0x200019c4
 8007b7c:	20001a0c 	.word	0x20001a0c
 8007b80:	20001534 	.word	0x20001534
 8007b84:	20001530 	.word	0x20001530
 8007b88:	20001a18 	.word	0x20001a18
 8007b8c:	20001a14 	.word	0x20001a14
 8007b90:	e000ed04 	.word	0xe000ed04

08007b94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007b9a:	4b05      	ldr	r3, [pc, #20]	; (8007bb0 <xTaskGetTickCount+0x1c>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ba0:	687b      	ldr	r3, [r7, #4]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	370c      	adds	r7, #12
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	20001a08 	.word	0x20001a08

08007bb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007bbe:	4b4f      	ldr	r3, [pc, #316]	; (8007cfc <xTaskIncrementTick+0x148>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f040 808f 	bne.w	8007ce6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007bc8:	4b4d      	ldr	r3, [pc, #308]	; (8007d00 <xTaskIncrementTick+0x14c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007bd0:	4a4b      	ldr	r2, [pc, #300]	; (8007d00 <xTaskIncrementTick+0x14c>)
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d120      	bne.n	8007c1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007bdc:	4b49      	ldr	r3, [pc, #292]	; (8007d04 <xTaskIncrementTick+0x150>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00a      	beq.n	8007bfc <xTaskIncrementTick+0x48>
	__asm volatile
 8007be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bea:	f383 8811 	msr	BASEPRI, r3
 8007bee:	f3bf 8f6f 	isb	sy
 8007bf2:	f3bf 8f4f 	dsb	sy
 8007bf6:	603b      	str	r3, [r7, #0]
}
 8007bf8:	bf00      	nop
 8007bfa:	e7fe      	b.n	8007bfa <xTaskIncrementTick+0x46>
 8007bfc:	4b41      	ldr	r3, [pc, #260]	; (8007d04 <xTaskIncrementTick+0x150>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	4b41      	ldr	r3, [pc, #260]	; (8007d08 <xTaskIncrementTick+0x154>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4a3f      	ldr	r2, [pc, #252]	; (8007d04 <xTaskIncrementTick+0x150>)
 8007c08:	6013      	str	r3, [r2, #0]
 8007c0a:	4a3f      	ldr	r2, [pc, #252]	; (8007d08 <xTaskIncrementTick+0x154>)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6013      	str	r3, [r2, #0]
 8007c10:	4b3e      	ldr	r3, [pc, #248]	; (8007d0c <xTaskIncrementTick+0x158>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3301      	adds	r3, #1
 8007c16:	4a3d      	ldr	r2, [pc, #244]	; (8007d0c <xTaskIncrementTick+0x158>)
 8007c18:	6013      	str	r3, [r2, #0]
 8007c1a:	f000 fad1 	bl	80081c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c1e:	4b3c      	ldr	r3, [pc, #240]	; (8007d10 <xTaskIncrementTick+0x15c>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	693a      	ldr	r2, [r7, #16]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d349      	bcc.n	8007cbc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c28:	4b36      	ldr	r3, [pc, #216]	; (8007d04 <xTaskIncrementTick+0x150>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d104      	bne.n	8007c3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c32:	4b37      	ldr	r3, [pc, #220]	; (8007d10 <xTaskIncrementTick+0x15c>)
 8007c34:	f04f 32ff 	mov.w	r2, #4294967295
 8007c38:	601a      	str	r2, [r3, #0]
					break;
 8007c3a:	e03f      	b.n	8007cbc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c3c:	4b31      	ldr	r3, [pc, #196]	; (8007d04 <xTaskIncrementTick+0x150>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	68db      	ldr	r3, [r3, #12]
 8007c44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d203      	bcs.n	8007c5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007c54:	4a2e      	ldr	r2, [pc, #184]	; (8007d10 <xTaskIncrementTick+0x15c>)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007c5a:	e02f      	b.n	8007cbc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe ff99 	bl	8006b98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d004      	beq.n	8007c78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	3318      	adds	r3, #24
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7fe ff90 	bl	8006b98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c7c:	4b25      	ldr	r3, [pc, #148]	; (8007d14 <xTaskIncrementTick+0x160>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d903      	bls.n	8007c8c <xTaskIncrementTick+0xd8>
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c88:	4a22      	ldr	r2, [pc, #136]	; (8007d14 <xTaskIncrementTick+0x160>)
 8007c8a:	6013      	str	r3, [r2, #0]
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c90:	4613      	mov	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4413      	add	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	4a1f      	ldr	r2, [pc, #124]	; (8007d18 <xTaskIncrementTick+0x164>)
 8007c9a:	441a      	add	r2, r3
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	3304      	adds	r3, #4
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	f7fe ff1b 	bl	8006ade <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cac:	4b1b      	ldr	r3, [pc, #108]	; (8007d1c <xTaskIncrementTick+0x168>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d3b8      	bcc.n	8007c28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cba:	e7b5      	b.n	8007c28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007cbc:	4b17      	ldr	r3, [pc, #92]	; (8007d1c <xTaskIncrementTick+0x168>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc2:	4915      	ldr	r1, [pc, #84]	; (8007d18 <xTaskIncrementTick+0x164>)
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	4413      	add	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	440b      	add	r3, r1
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d901      	bls.n	8007cd8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007cd8:	4b11      	ldr	r3, [pc, #68]	; (8007d20 <xTaskIncrementTick+0x16c>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d007      	beq.n	8007cf0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	617b      	str	r3, [r7, #20]
 8007ce4:	e004      	b.n	8007cf0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007ce6:	4b0f      	ldr	r3, [pc, #60]	; (8007d24 <xTaskIncrementTick+0x170>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3301      	adds	r3, #1
 8007cec:	4a0d      	ldr	r2, [pc, #52]	; (8007d24 <xTaskIncrementTick+0x170>)
 8007cee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007cf0:	697b      	ldr	r3, [r7, #20]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3718      	adds	r7, #24
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20001a2c 	.word	0x20001a2c
 8007d00:	20001a08 	.word	0x20001a08
 8007d04:	200019bc 	.word	0x200019bc
 8007d08:	200019c0 	.word	0x200019c0
 8007d0c:	20001a1c 	.word	0x20001a1c
 8007d10:	20001a24 	.word	0x20001a24
 8007d14:	20001a0c 	.word	0x20001a0c
 8007d18:	20001534 	.word	0x20001534
 8007d1c:	20001530 	.word	0x20001530
 8007d20:	20001a18 	.word	0x20001a18
 8007d24:	20001a14 	.word	0x20001a14

08007d28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b085      	sub	sp, #20
 8007d2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d2e:	4b28      	ldr	r3, [pc, #160]	; (8007dd0 <vTaskSwitchContext+0xa8>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d36:	4b27      	ldr	r3, [pc, #156]	; (8007dd4 <vTaskSwitchContext+0xac>)
 8007d38:	2201      	movs	r2, #1
 8007d3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d3c:	e041      	b.n	8007dc2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007d3e:	4b25      	ldr	r3, [pc, #148]	; (8007dd4 <vTaskSwitchContext+0xac>)
 8007d40:	2200      	movs	r2, #0
 8007d42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d44:	4b24      	ldr	r3, [pc, #144]	; (8007dd8 <vTaskSwitchContext+0xb0>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	60fb      	str	r3, [r7, #12]
 8007d4a:	e010      	b.n	8007d6e <vTaskSwitchContext+0x46>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10a      	bne.n	8007d68 <vTaskSwitchContext+0x40>
	__asm volatile
 8007d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d56:	f383 8811 	msr	BASEPRI, r3
 8007d5a:	f3bf 8f6f 	isb	sy
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	607b      	str	r3, [r7, #4]
}
 8007d64:	bf00      	nop
 8007d66:	e7fe      	b.n	8007d66 <vTaskSwitchContext+0x3e>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	60fb      	str	r3, [r7, #12]
 8007d6e:	491b      	ldr	r1, [pc, #108]	; (8007ddc <vTaskSwitchContext+0xb4>)
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	4613      	mov	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4413      	add	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	440b      	add	r3, r1
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d0e4      	beq.n	8007d4c <vTaskSwitchContext+0x24>
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	4613      	mov	r3, r2
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4413      	add	r3, r2
 8007d8a:	009b      	lsls	r3, r3, #2
 8007d8c:	4a13      	ldr	r2, [pc, #76]	; (8007ddc <vTaskSwitchContext+0xb4>)
 8007d8e:	4413      	add	r3, r2
 8007d90:	60bb      	str	r3, [r7, #8]
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	685a      	ldr	r2, [r3, #4]
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	605a      	str	r2, [r3, #4]
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	685a      	ldr	r2, [r3, #4]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	3308      	adds	r3, #8
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d104      	bne.n	8007db2 <vTaskSwitchContext+0x8a>
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	685b      	ldr	r3, [r3, #4]
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	605a      	str	r2, [r3, #4]
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	4a09      	ldr	r2, [pc, #36]	; (8007de0 <vTaskSwitchContext+0xb8>)
 8007dba:	6013      	str	r3, [r2, #0]
 8007dbc:	4a06      	ldr	r2, [pc, #24]	; (8007dd8 <vTaskSwitchContext+0xb0>)
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6013      	str	r3, [r2, #0]
}
 8007dc2:	bf00      	nop
 8007dc4:	3714      	adds	r7, #20
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr
 8007dce:	bf00      	nop
 8007dd0:	20001a2c 	.word	0x20001a2c
 8007dd4:	20001a18 	.word	0x20001a18
 8007dd8:	20001a0c 	.word	0x20001a0c
 8007ddc:	20001534 	.word	0x20001534
 8007de0:	20001530 	.word	0x20001530

08007de4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10a      	bne.n	8007e0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df8:	f383 8811 	msr	BASEPRI, r3
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	60fb      	str	r3, [r7, #12]
}
 8007e06:	bf00      	nop
 8007e08:	e7fe      	b.n	8007e08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e0a:	4b07      	ldr	r3, [pc, #28]	; (8007e28 <vTaskPlaceOnEventList+0x44>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	3318      	adds	r3, #24
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7fe fe87 	bl	8006b26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e18:	2101      	movs	r1, #1
 8007e1a:	6838      	ldr	r0, [r7, #0]
 8007e1c:	f000 fa7c 	bl	8008318 <prvAddCurrentTaskToDelayedList>
}
 8007e20:	bf00      	nop
 8007e22:	3710      	adds	r7, #16
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	20001530 	.word	0x20001530

08007e2c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10a      	bne.n	8007e54 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	617b      	str	r3, [r7, #20]
}
 8007e50:	bf00      	nop
 8007e52:	e7fe      	b.n	8007e52 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e54:	4b0a      	ldr	r3, [pc, #40]	; (8007e80 <vTaskPlaceOnEventListRestricted+0x54>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	3318      	adds	r3, #24
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f7fe fe3e 	bl	8006ade <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d002      	beq.n	8007e6e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007e68:	f04f 33ff 	mov.w	r3, #4294967295
 8007e6c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007e6e:	6879      	ldr	r1, [r7, #4]
 8007e70:	68b8      	ldr	r0, [r7, #8]
 8007e72:	f000 fa51 	bl	8008318 <prvAddCurrentTaskToDelayedList>
	}
 8007e76:	bf00      	nop
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	20001530 	.word	0x20001530

08007e84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007e94:	693b      	ldr	r3, [r7, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10a      	bne.n	8007eb0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	60fb      	str	r3, [r7, #12]
}
 8007eac:	bf00      	nop
 8007eae:	e7fe      	b.n	8007eae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	3318      	adds	r3, #24
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7fe fe6f 	bl	8006b98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007eba:	4b1e      	ldr	r3, [pc, #120]	; (8007f34 <xTaskRemoveFromEventList+0xb0>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d11d      	bne.n	8007efe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fe fe66 	bl	8006b98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ed0:	4b19      	ldr	r3, [pc, #100]	; (8007f38 <xTaskRemoveFromEventList+0xb4>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d903      	bls.n	8007ee0 <xTaskRemoveFromEventList+0x5c>
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007edc:	4a16      	ldr	r2, [pc, #88]	; (8007f38 <xTaskRemoveFromEventList+0xb4>)
 8007ede:	6013      	str	r3, [r2, #0]
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee4:	4613      	mov	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	4413      	add	r3, r2
 8007eea:	009b      	lsls	r3, r3, #2
 8007eec:	4a13      	ldr	r2, [pc, #76]	; (8007f3c <xTaskRemoveFromEventList+0xb8>)
 8007eee:	441a      	add	r2, r3
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	3304      	adds	r3, #4
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	4610      	mov	r0, r2
 8007ef8:	f7fe fdf1 	bl	8006ade <vListInsertEnd>
 8007efc:	e005      	b.n	8007f0a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	3318      	adds	r3, #24
 8007f02:	4619      	mov	r1, r3
 8007f04:	480e      	ldr	r0, [pc, #56]	; (8007f40 <xTaskRemoveFromEventList+0xbc>)
 8007f06:	f7fe fdea 	bl	8006ade <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f0e:	4b0d      	ldr	r3, [pc, #52]	; (8007f44 <xTaskRemoveFromEventList+0xc0>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d905      	bls.n	8007f24 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007f1c:	4b0a      	ldr	r3, [pc, #40]	; (8007f48 <xTaskRemoveFromEventList+0xc4>)
 8007f1e:	2201      	movs	r2, #1
 8007f20:	601a      	str	r2, [r3, #0]
 8007f22:	e001      	b.n	8007f28 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007f24:	2300      	movs	r3, #0
 8007f26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007f28:	697b      	ldr	r3, [r7, #20]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3718      	adds	r7, #24
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	20001a2c 	.word	0x20001a2c
 8007f38:	20001a0c 	.word	0x20001a0c
 8007f3c:	20001534 	.word	0x20001534
 8007f40:	200019c4 	.word	0x200019c4
 8007f44:	20001530 	.word	0x20001530
 8007f48:	20001a18 	.word	0x20001a18

08007f4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007f54:	4b06      	ldr	r3, [pc, #24]	; (8007f70 <vTaskInternalSetTimeOutState+0x24>)
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007f5c:	4b05      	ldr	r3, [pc, #20]	; (8007f74 <vTaskInternalSetTimeOutState+0x28>)
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	605a      	str	r2, [r3, #4]
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	20001a1c 	.word	0x20001a1c
 8007f74:	20001a08 	.word	0x20001a08

08007f78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b088      	sub	sp, #32
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10a      	bne.n	8007f9e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f8c:	f383 8811 	msr	BASEPRI, r3
 8007f90:	f3bf 8f6f 	isb	sy
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	613b      	str	r3, [r7, #16]
}
 8007f9a:	bf00      	nop
 8007f9c:	e7fe      	b.n	8007f9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10a      	bne.n	8007fba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	60fb      	str	r3, [r7, #12]
}
 8007fb6:	bf00      	nop
 8007fb8:	e7fe      	b.n	8007fb8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007fba:	f000 fe7b 	bl	8008cb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007fbe:	4b1d      	ldr	r3, [pc, #116]	; (8008034 <xTaskCheckForTimeOut+0xbc>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	69ba      	ldr	r2, [r7, #24]
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd6:	d102      	bne.n	8007fde <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	61fb      	str	r3, [r7, #28]
 8007fdc:	e023      	b.n	8008026 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	4b15      	ldr	r3, [pc, #84]	; (8008038 <xTaskCheckForTimeOut+0xc0>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d007      	beq.n	8007ffa <xTaskCheckForTimeOut+0x82>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	69ba      	ldr	r2, [r7, #24]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d302      	bcc.n	8007ffa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	61fb      	str	r3, [r7, #28]
 8007ff8:	e015      	b.n	8008026 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	429a      	cmp	r2, r3
 8008002:	d20b      	bcs.n	800801c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	1ad2      	subs	r2, r2, r3
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f7ff ff9b 	bl	8007f4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008016:	2300      	movs	r3, #0
 8008018:	61fb      	str	r3, [r7, #28]
 800801a:	e004      	b.n	8008026 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2200      	movs	r2, #0
 8008020:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008022:	2301      	movs	r3, #1
 8008024:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008026:	f000 fe75 	bl	8008d14 <vPortExitCritical>

	return xReturn;
 800802a:	69fb      	ldr	r3, [r7, #28]
}
 800802c:	4618      	mov	r0, r3
 800802e:	3720      	adds	r7, #32
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	20001a08 	.word	0x20001a08
 8008038:	20001a1c 	.word	0x20001a1c

0800803c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800803c:	b480      	push	{r7}
 800803e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008040:	4b03      	ldr	r3, [pc, #12]	; (8008050 <vTaskMissedYield+0x14>)
 8008042:	2201      	movs	r2, #1
 8008044:	601a      	str	r2, [r3, #0]
}
 8008046:	bf00      	nop
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	20001a18 	.word	0x20001a18

08008054 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800805c:	f000 f852 	bl	8008104 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008060:	4b06      	ldr	r3, [pc, #24]	; (800807c <prvIdleTask+0x28>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d9f9      	bls.n	800805c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008068:	4b05      	ldr	r3, [pc, #20]	; (8008080 <prvIdleTask+0x2c>)
 800806a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800806e:	601a      	str	r2, [r3, #0]
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008078:	e7f0      	b.n	800805c <prvIdleTask+0x8>
 800807a:	bf00      	nop
 800807c:	20001534 	.word	0x20001534
 8008080:	e000ed04 	.word	0xe000ed04

08008084 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800808a:	2300      	movs	r3, #0
 800808c:	607b      	str	r3, [r7, #4]
 800808e:	e00c      	b.n	80080aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	4613      	mov	r3, r2
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	4413      	add	r3, r2
 8008098:	009b      	lsls	r3, r3, #2
 800809a:	4a12      	ldr	r2, [pc, #72]	; (80080e4 <prvInitialiseTaskLists+0x60>)
 800809c:	4413      	add	r3, r2
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fe fcf0 	bl	8006a84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	3301      	adds	r3, #1
 80080a8:	607b      	str	r3, [r7, #4]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2b37      	cmp	r3, #55	; 0x37
 80080ae:	d9ef      	bls.n	8008090 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80080b0:	480d      	ldr	r0, [pc, #52]	; (80080e8 <prvInitialiseTaskLists+0x64>)
 80080b2:	f7fe fce7 	bl	8006a84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80080b6:	480d      	ldr	r0, [pc, #52]	; (80080ec <prvInitialiseTaskLists+0x68>)
 80080b8:	f7fe fce4 	bl	8006a84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80080bc:	480c      	ldr	r0, [pc, #48]	; (80080f0 <prvInitialiseTaskLists+0x6c>)
 80080be:	f7fe fce1 	bl	8006a84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80080c2:	480c      	ldr	r0, [pc, #48]	; (80080f4 <prvInitialiseTaskLists+0x70>)
 80080c4:	f7fe fcde 	bl	8006a84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80080c8:	480b      	ldr	r0, [pc, #44]	; (80080f8 <prvInitialiseTaskLists+0x74>)
 80080ca:	f7fe fcdb 	bl	8006a84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80080ce:	4b0b      	ldr	r3, [pc, #44]	; (80080fc <prvInitialiseTaskLists+0x78>)
 80080d0:	4a05      	ldr	r2, [pc, #20]	; (80080e8 <prvInitialiseTaskLists+0x64>)
 80080d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80080d4:	4b0a      	ldr	r3, [pc, #40]	; (8008100 <prvInitialiseTaskLists+0x7c>)
 80080d6:	4a05      	ldr	r2, [pc, #20]	; (80080ec <prvInitialiseTaskLists+0x68>)
 80080d8:	601a      	str	r2, [r3, #0]
}
 80080da:	bf00      	nop
 80080dc:	3708      	adds	r7, #8
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	20001534 	.word	0x20001534
 80080e8:	20001994 	.word	0x20001994
 80080ec:	200019a8 	.word	0x200019a8
 80080f0:	200019c4 	.word	0x200019c4
 80080f4:	200019d8 	.word	0x200019d8
 80080f8:	200019f0 	.word	0x200019f0
 80080fc:	200019bc 	.word	0x200019bc
 8008100:	200019c0 	.word	0x200019c0

08008104 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800810a:	e019      	b.n	8008140 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800810c:	f000 fdd2 	bl	8008cb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008110:	4b10      	ldr	r3, [pc, #64]	; (8008154 <prvCheckTasksWaitingTermination+0x50>)
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	3304      	adds	r3, #4
 800811c:	4618      	mov	r0, r3
 800811e:	f7fe fd3b 	bl	8006b98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008122:	4b0d      	ldr	r3, [pc, #52]	; (8008158 <prvCheckTasksWaitingTermination+0x54>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	3b01      	subs	r3, #1
 8008128:	4a0b      	ldr	r2, [pc, #44]	; (8008158 <prvCheckTasksWaitingTermination+0x54>)
 800812a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800812c:	4b0b      	ldr	r3, [pc, #44]	; (800815c <prvCheckTasksWaitingTermination+0x58>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	3b01      	subs	r3, #1
 8008132:	4a0a      	ldr	r2, [pc, #40]	; (800815c <prvCheckTasksWaitingTermination+0x58>)
 8008134:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008136:	f000 fded 	bl	8008d14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f810 	bl	8008160 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008140:	4b06      	ldr	r3, [pc, #24]	; (800815c <prvCheckTasksWaitingTermination+0x58>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d1e1      	bne.n	800810c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008148:	bf00      	nop
 800814a:	bf00      	nop
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	200019d8 	.word	0x200019d8
 8008158:	20001a04 	.word	0x20001a04
 800815c:	200019ec 	.word	0x200019ec

08008160 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008160:	b580      	push	{r7, lr}
 8008162:	b084      	sub	sp, #16
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800816e:	2b00      	cmp	r3, #0
 8008170:	d108      	bne.n	8008184 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008176:	4618      	mov	r0, r3
 8008178:	f000 ff8a 	bl	8009090 <vPortFree>
				vPortFree( pxTCB );
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 ff87 	bl	8009090 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008182:	e018      	b.n	80081b6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800818a:	2b01      	cmp	r3, #1
 800818c:	d103      	bne.n	8008196 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 ff7e 	bl	8009090 <vPortFree>
	}
 8008194:	e00f      	b.n	80081b6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800819c:	2b02      	cmp	r3, #2
 800819e:	d00a      	beq.n	80081b6 <prvDeleteTCB+0x56>
	__asm volatile
 80081a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a4:	f383 8811 	msr	BASEPRI, r3
 80081a8:	f3bf 8f6f 	isb	sy
 80081ac:	f3bf 8f4f 	dsb	sy
 80081b0:	60fb      	str	r3, [r7, #12]
}
 80081b2:	bf00      	nop
 80081b4:	e7fe      	b.n	80081b4 <prvDeleteTCB+0x54>
	}
 80081b6:	bf00      	nop
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
	...

080081c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081c6:	4b0c      	ldr	r3, [pc, #48]	; (80081f8 <prvResetNextTaskUnblockTime+0x38>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d104      	bne.n	80081da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80081d0:	4b0a      	ldr	r3, [pc, #40]	; (80081fc <prvResetNextTaskUnblockTime+0x3c>)
 80081d2:	f04f 32ff 	mov.w	r2, #4294967295
 80081d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80081d8:	e008      	b.n	80081ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081da:	4b07      	ldr	r3, [pc, #28]	; (80081f8 <prvResetNextTaskUnblockTime+0x38>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	4a04      	ldr	r2, [pc, #16]	; (80081fc <prvResetNextTaskUnblockTime+0x3c>)
 80081ea:	6013      	str	r3, [r2, #0]
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	200019bc 	.word	0x200019bc
 80081fc:	20001a24 	.word	0x20001a24

08008200 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008206:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <xTaskGetSchedulerState+0x34>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d102      	bne.n	8008214 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800820e:	2301      	movs	r3, #1
 8008210:	607b      	str	r3, [r7, #4]
 8008212:	e008      	b.n	8008226 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008214:	4b08      	ldr	r3, [pc, #32]	; (8008238 <xTaskGetSchedulerState+0x38>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d102      	bne.n	8008222 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800821c:	2302      	movs	r3, #2
 800821e:	607b      	str	r3, [r7, #4]
 8008220:	e001      	b.n	8008226 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008222:	2300      	movs	r3, #0
 8008224:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008226:	687b      	ldr	r3, [r7, #4]
	}
 8008228:	4618      	mov	r0, r3
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	20001a10 	.word	0x20001a10
 8008238:	20001a2c 	.word	0x20001a2c

0800823c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008248:	2300      	movs	r3, #0
 800824a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d056      	beq.n	8008300 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008252:	4b2e      	ldr	r3, [pc, #184]	; (800830c <xTaskPriorityDisinherit+0xd0>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	429a      	cmp	r2, r3
 800825a:	d00a      	beq.n	8008272 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800825c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008260:	f383 8811 	msr	BASEPRI, r3
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	f3bf 8f4f 	dsb	sy
 800826c:	60fb      	str	r3, [r7, #12]
}
 800826e:	bf00      	nop
 8008270:	e7fe      	b.n	8008270 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008272:	693b      	ldr	r3, [r7, #16]
 8008274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008276:	2b00      	cmp	r3, #0
 8008278:	d10a      	bne.n	8008290 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800827a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827e:	f383 8811 	msr	BASEPRI, r3
 8008282:	f3bf 8f6f 	isb	sy
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	60bb      	str	r3, [r7, #8]
}
 800828c:	bf00      	nop
 800828e:	e7fe      	b.n	800828e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008294:	1e5a      	subs	r2, r3, #1
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d02c      	beq.n	8008300 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d128      	bne.n	8008300 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	3304      	adds	r3, #4
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7fe fc70 	bl	8006b98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d0:	4b0f      	ldr	r3, [pc, #60]	; (8008310 <xTaskPriorityDisinherit+0xd4>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d903      	bls.n	80082e0 <xTaskPriorityDisinherit+0xa4>
 80082d8:	693b      	ldr	r3, [r7, #16]
 80082da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082dc:	4a0c      	ldr	r2, [pc, #48]	; (8008310 <xTaskPriorityDisinherit+0xd4>)
 80082de:	6013      	str	r3, [r2, #0]
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e4:	4613      	mov	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4a09      	ldr	r2, [pc, #36]	; (8008314 <xTaskPriorityDisinherit+0xd8>)
 80082ee:	441a      	add	r2, r3
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	3304      	adds	r3, #4
 80082f4:	4619      	mov	r1, r3
 80082f6:	4610      	mov	r0, r2
 80082f8:	f7fe fbf1 	bl	8006ade <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80082fc:	2301      	movs	r3, #1
 80082fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008300:	697b      	ldr	r3, [r7, #20]
	}
 8008302:	4618      	mov	r0, r3
 8008304:	3718      	adds	r7, #24
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	20001530 	.word	0x20001530
 8008310:	20001a0c 	.word	0x20001a0c
 8008314:	20001534 	.word	0x20001534

08008318 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008322:	4b21      	ldr	r3, [pc, #132]	; (80083a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008328:	4b20      	ldr	r3, [pc, #128]	; (80083ac <prvAddCurrentTaskToDelayedList+0x94>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	3304      	adds	r3, #4
 800832e:	4618      	mov	r0, r3
 8008330:	f7fe fc32 	bl	8006b98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800833a:	d10a      	bne.n	8008352 <prvAddCurrentTaskToDelayedList+0x3a>
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d007      	beq.n	8008352 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008342:	4b1a      	ldr	r3, [pc, #104]	; (80083ac <prvAddCurrentTaskToDelayedList+0x94>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3304      	adds	r3, #4
 8008348:	4619      	mov	r1, r3
 800834a:	4819      	ldr	r0, [pc, #100]	; (80083b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800834c:	f7fe fbc7 	bl	8006ade <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008350:	e026      	b.n	80083a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4413      	add	r3, r2
 8008358:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800835a:	4b14      	ldr	r3, [pc, #80]	; (80083ac <prvAddCurrentTaskToDelayedList+0x94>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	429a      	cmp	r2, r3
 8008368:	d209      	bcs.n	800837e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800836a:	4b12      	ldr	r3, [pc, #72]	; (80083b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	4b0f      	ldr	r3, [pc, #60]	; (80083ac <prvAddCurrentTaskToDelayedList+0x94>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3304      	adds	r3, #4
 8008374:	4619      	mov	r1, r3
 8008376:	4610      	mov	r0, r2
 8008378:	f7fe fbd5 	bl	8006b26 <vListInsert>
}
 800837c:	e010      	b.n	80083a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800837e:	4b0e      	ldr	r3, [pc, #56]	; (80083b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	4b0a      	ldr	r3, [pc, #40]	; (80083ac <prvAddCurrentTaskToDelayedList+0x94>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	3304      	adds	r3, #4
 8008388:	4619      	mov	r1, r3
 800838a:	4610      	mov	r0, r2
 800838c:	f7fe fbcb 	bl	8006b26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008390:	4b0a      	ldr	r3, [pc, #40]	; (80083bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	429a      	cmp	r2, r3
 8008398:	d202      	bcs.n	80083a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800839a:	4a08      	ldr	r2, [pc, #32]	; (80083bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	6013      	str	r3, [r2, #0]
}
 80083a0:	bf00      	nop
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	20001a08 	.word	0x20001a08
 80083ac:	20001530 	.word	0x20001530
 80083b0:	200019f0 	.word	0x200019f0
 80083b4:	200019c0 	.word	0x200019c0
 80083b8:	200019bc 	.word	0x200019bc
 80083bc:	20001a24 	.word	0x20001a24

080083c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b08a      	sub	sp, #40	; 0x28
 80083c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80083c6:	2300      	movs	r3, #0
 80083c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80083ca:	f000 fb07 	bl	80089dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80083ce:	4b1c      	ldr	r3, [pc, #112]	; (8008440 <xTimerCreateTimerTask+0x80>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d021      	beq.n	800841a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80083d6:	2300      	movs	r3, #0
 80083d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80083da:	2300      	movs	r3, #0
 80083dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80083de:	1d3a      	adds	r2, r7, #4
 80083e0:	f107 0108 	add.w	r1, r7, #8
 80083e4:	f107 030c 	add.w	r3, r7, #12
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fe fb31 	bl	8006a50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	9202      	str	r2, [sp, #8]
 80083f6:	9301      	str	r3, [sp, #4]
 80083f8:	2302      	movs	r3, #2
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	2300      	movs	r3, #0
 80083fe:	460a      	mov	r2, r1
 8008400:	4910      	ldr	r1, [pc, #64]	; (8008444 <xTimerCreateTimerTask+0x84>)
 8008402:	4811      	ldr	r0, [pc, #68]	; (8008448 <xTimerCreateTimerTask+0x88>)
 8008404:	f7ff f8de 	bl	80075c4 <xTaskCreateStatic>
 8008408:	4603      	mov	r3, r0
 800840a:	4a10      	ldr	r2, [pc, #64]	; (800844c <xTimerCreateTimerTask+0x8c>)
 800840c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800840e:	4b0f      	ldr	r3, [pc, #60]	; (800844c <xTimerCreateTimerTask+0x8c>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d001      	beq.n	800841a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008416:	2301      	movs	r3, #1
 8008418:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10a      	bne.n	8008436 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	613b      	str	r3, [r7, #16]
}
 8008432:	bf00      	nop
 8008434:	e7fe      	b.n	8008434 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008436:	697b      	ldr	r3, [r7, #20]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3718      	adds	r7, #24
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}
 8008440:	20001a60 	.word	0x20001a60
 8008444:	08009d34 	.word	0x08009d34
 8008448:	08008585 	.word	0x08008585
 800844c:	20001a64 	.word	0x20001a64

08008450 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b08a      	sub	sp, #40	; 0x28
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
 800845c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800845e:	2300      	movs	r3, #0
 8008460:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d10a      	bne.n	800847e <xTimerGenericCommand+0x2e>
	__asm volatile
 8008468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800846c:	f383 8811 	msr	BASEPRI, r3
 8008470:	f3bf 8f6f 	isb	sy
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	623b      	str	r3, [r7, #32]
}
 800847a:	bf00      	nop
 800847c:	e7fe      	b.n	800847c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800847e:	4b1a      	ldr	r3, [pc, #104]	; (80084e8 <xTimerGenericCommand+0x98>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d02a      	beq.n	80084dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2b05      	cmp	r3, #5
 8008496:	dc18      	bgt.n	80084ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008498:	f7ff feb2 	bl	8008200 <xTaskGetSchedulerState>
 800849c:	4603      	mov	r3, r0
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d109      	bne.n	80084b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80084a2:	4b11      	ldr	r3, [pc, #68]	; (80084e8 <xTimerGenericCommand+0x98>)
 80084a4:	6818      	ldr	r0, [r3, #0]
 80084a6:	f107 0110 	add.w	r1, r7, #16
 80084aa:	2300      	movs	r3, #0
 80084ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084ae:	f7fe fca1 	bl	8006df4 <xQueueGenericSend>
 80084b2:	6278      	str	r0, [r7, #36]	; 0x24
 80084b4:	e012      	b.n	80084dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80084b6:	4b0c      	ldr	r3, [pc, #48]	; (80084e8 <xTimerGenericCommand+0x98>)
 80084b8:	6818      	ldr	r0, [r3, #0]
 80084ba:	f107 0110 	add.w	r1, r7, #16
 80084be:	2300      	movs	r3, #0
 80084c0:	2200      	movs	r2, #0
 80084c2:	f7fe fc97 	bl	8006df4 <xQueueGenericSend>
 80084c6:	6278      	str	r0, [r7, #36]	; 0x24
 80084c8:	e008      	b.n	80084dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80084ca:	4b07      	ldr	r3, [pc, #28]	; (80084e8 <xTimerGenericCommand+0x98>)
 80084cc:	6818      	ldr	r0, [r3, #0]
 80084ce:	f107 0110 	add.w	r1, r7, #16
 80084d2:	2300      	movs	r3, #0
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	f7fe fd8b 	bl	8006ff0 <xQueueGenericSendFromISR>
 80084da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3728      	adds	r7, #40	; 0x28
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	20001a60 	.word	0x20001a60

080084ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b088      	sub	sp, #32
 80084f0:	af02      	add	r7, sp, #8
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084f6:	4b22      	ldr	r3, [pc, #136]	; (8008580 <prvProcessExpiredTimer+0x94>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	3304      	adds	r3, #4
 8008504:	4618      	mov	r0, r3
 8008506:	f7fe fb47 	bl	8006b98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008510:	f003 0304 	and.w	r3, r3, #4
 8008514:	2b00      	cmp	r3, #0
 8008516:	d022      	beq.n	800855e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	699a      	ldr	r2, [r3, #24]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	18d1      	adds	r1, r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	6978      	ldr	r0, [r7, #20]
 8008526:	f000 f8d1 	bl	80086cc <prvInsertTimerInActiveList>
 800852a:	4603      	mov	r3, r0
 800852c:	2b00      	cmp	r3, #0
 800852e:	d01f      	beq.n	8008570 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008530:	2300      	movs	r3, #0
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	2300      	movs	r3, #0
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	2100      	movs	r1, #0
 800853a:	6978      	ldr	r0, [r7, #20]
 800853c:	f7ff ff88 	bl	8008450 <xTimerGenericCommand>
 8008540:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d113      	bne.n	8008570 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	60fb      	str	r3, [r7, #12]
}
 800855a:	bf00      	nop
 800855c:	e7fe      	b.n	800855c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008564:	f023 0301 	bic.w	r3, r3, #1
 8008568:	b2da      	uxtb	r2, r3
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	6a1b      	ldr	r3, [r3, #32]
 8008574:	6978      	ldr	r0, [r7, #20]
 8008576:	4798      	blx	r3
}
 8008578:	bf00      	nop
 800857a:	3718      	adds	r7, #24
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	20001a58 	.word	0x20001a58

08008584 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800858c:	f107 0308 	add.w	r3, r7, #8
 8008590:	4618      	mov	r0, r3
 8008592:	f000 f857 	bl	8008644 <prvGetNextExpireTime>
 8008596:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	4619      	mov	r1, r3
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 f803 	bl	80085a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80085a2:	f000 f8d5 	bl	8008750 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80085a6:	e7f1      	b.n	800858c <prvTimerTask+0x8>

080085a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b084      	sub	sp, #16
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80085b2:	f7ff fa43 	bl	8007a3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80085b6:	f107 0308 	add.w	r3, r7, #8
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 f866 	bl	800868c <prvSampleTimeNow>
 80085c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d130      	bne.n	800862a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10a      	bne.n	80085e4 <prvProcessTimerOrBlockTask+0x3c>
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d806      	bhi.n	80085e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80085d6:	f7ff fa3f 	bl	8007a58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80085da:	68f9      	ldr	r1, [r7, #12]
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7ff ff85 	bl	80084ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80085e2:	e024      	b.n	800862e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d008      	beq.n	80085fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80085ea:	4b13      	ldr	r3, [pc, #76]	; (8008638 <prvProcessTimerOrBlockTask+0x90>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d101      	bne.n	80085f8 <prvProcessTimerOrBlockTask+0x50>
 80085f4:	2301      	movs	r3, #1
 80085f6:	e000      	b.n	80085fa <prvProcessTimerOrBlockTask+0x52>
 80085f8:	2300      	movs	r3, #0
 80085fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80085fc:	4b0f      	ldr	r3, [pc, #60]	; (800863c <prvProcessTimerOrBlockTask+0x94>)
 80085fe:	6818      	ldr	r0, [r3, #0]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	1ad3      	subs	r3, r2, r3
 8008606:	683a      	ldr	r2, [r7, #0]
 8008608:	4619      	mov	r1, r3
 800860a:	f7fe ffa7 	bl	800755c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800860e:	f7ff fa23 	bl	8007a58 <xTaskResumeAll>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10a      	bne.n	800862e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008618:	4b09      	ldr	r3, [pc, #36]	; (8008640 <prvProcessTimerOrBlockTask+0x98>)
 800861a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800861e:	601a      	str	r2, [r3, #0]
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	f3bf 8f6f 	isb	sy
}
 8008628:	e001      	b.n	800862e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800862a:	f7ff fa15 	bl	8007a58 <xTaskResumeAll>
}
 800862e:	bf00      	nop
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	20001a5c 	.word	0x20001a5c
 800863c:	20001a60 	.word	0x20001a60
 8008640:	e000ed04 	.word	0xe000ed04

08008644 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800864c:	4b0e      	ldr	r3, [pc, #56]	; (8008688 <prvGetNextExpireTime+0x44>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <prvGetNextExpireTime+0x16>
 8008656:	2201      	movs	r2, #1
 8008658:	e000      	b.n	800865c <prvGetNextExpireTime+0x18>
 800865a:	2200      	movs	r2, #0
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d105      	bne.n	8008674 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008668:	4b07      	ldr	r3, [pc, #28]	; (8008688 <prvGetNextExpireTime+0x44>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	60fb      	str	r3, [r7, #12]
 8008672:	e001      	b.n	8008678 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008674:	2300      	movs	r3, #0
 8008676:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008678:	68fb      	ldr	r3, [r7, #12]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	20001a58 	.word	0x20001a58

0800868c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b084      	sub	sp, #16
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008694:	f7ff fa7e 	bl	8007b94 <xTaskGetTickCount>
 8008698:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800869a:	4b0b      	ldr	r3, [pc, #44]	; (80086c8 <prvSampleTimeNow+0x3c>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d205      	bcs.n	80086b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80086a4:	f000 f936 	bl	8008914 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	601a      	str	r2, [r3, #0]
 80086ae:	e002      	b.n	80086b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80086b6:	4a04      	ldr	r2, [pc, #16]	; (80086c8 <prvSampleTimeNow+0x3c>)
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80086bc:	68fb      	ldr	r3, [r7, #12]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	20001a68 	.word	0x20001a68

080086cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
 80086d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80086da:	2300      	movs	r3, #0
 80086dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	68ba      	ldr	r2, [r7, #8]
 80086e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d812      	bhi.n	8008718 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	1ad2      	subs	r2, r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d302      	bcc.n	8008706 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008700:	2301      	movs	r3, #1
 8008702:	617b      	str	r3, [r7, #20]
 8008704:	e01b      	b.n	800873e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008706:	4b10      	ldr	r3, [pc, #64]	; (8008748 <prvInsertTimerInActiveList+0x7c>)
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	3304      	adds	r3, #4
 800870e:	4619      	mov	r1, r3
 8008710:	4610      	mov	r0, r2
 8008712:	f7fe fa08 	bl	8006b26 <vListInsert>
 8008716:	e012      	b.n	800873e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	429a      	cmp	r2, r3
 800871e:	d206      	bcs.n	800872e <prvInsertTimerInActiveList+0x62>
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	429a      	cmp	r2, r3
 8008726:	d302      	bcc.n	800872e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008728:	2301      	movs	r3, #1
 800872a:	617b      	str	r3, [r7, #20]
 800872c:	e007      	b.n	800873e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800872e:	4b07      	ldr	r3, [pc, #28]	; (800874c <prvInsertTimerInActiveList+0x80>)
 8008730:	681a      	ldr	r2, [r3, #0]
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	3304      	adds	r3, #4
 8008736:	4619      	mov	r1, r3
 8008738:	4610      	mov	r0, r2
 800873a:	f7fe f9f4 	bl	8006b26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800873e:	697b      	ldr	r3, [r7, #20]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3718      	adds	r7, #24
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	20001a5c 	.word	0x20001a5c
 800874c:	20001a58 	.word	0x20001a58

08008750 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b08e      	sub	sp, #56	; 0x38
 8008754:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008756:	e0ca      	b.n	80088ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	da18      	bge.n	8008790 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800875e:	1d3b      	adds	r3, r7, #4
 8008760:	3304      	adds	r3, #4
 8008762:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008766:	2b00      	cmp	r3, #0
 8008768:	d10a      	bne.n	8008780 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800876a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876e:	f383 8811 	msr	BASEPRI, r3
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	61fb      	str	r3, [r7, #28]
}
 800877c:	bf00      	nop
 800877e:	e7fe      	b.n	800877e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008786:	6850      	ldr	r0, [r2, #4]
 8008788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800878a:	6892      	ldr	r2, [r2, #8]
 800878c:	4611      	mov	r1, r2
 800878e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	f2c0 80aa 	blt.w	80088ec <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879e:	695b      	ldr	r3, [r3, #20]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d004      	beq.n	80087ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a6:	3304      	adds	r3, #4
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fe f9f5 	bl	8006b98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80087ae:	463b      	mov	r3, r7
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7ff ff6b 	bl	800868c <prvSampleTimeNow>
 80087b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b09      	cmp	r3, #9
 80087bc:	f200 8097 	bhi.w	80088ee <prvProcessReceivedCommands+0x19e>
 80087c0:	a201      	add	r2, pc, #4	; (adr r2, 80087c8 <prvProcessReceivedCommands+0x78>)
 80087c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c6:	bf00      	nop
 80087c8:	080087f1 	.word	0x080087f1
 80087cc:	080087f1 	.word	0x080087f1
 80087d0:	080087f1 	.word	0x080087f1
 80087d4:	08008865 	.word	0x08008865
 80087d8:	08008879 	.word	0x08008879
 80087dc:	080088c3 	.word	0x080088c3
 80087e0:	080087f1 	.word	0x080087f1
 80087e4:	080087f1 	.word	0x080087f1
 80087e8:	08008865 	.word	0x08008865
 80087ec:	08008879 	.word	0x08008879
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80087f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087f6:	f043 0301 	orr.w	r3, r3, #1
 80087fa:	b2da      	uxtb	r2, r3
 80087fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008802:	68ba      	ldr	r2, [r7, #8]
 8008804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	18d1      	adds	r1, r2, r3
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800880e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008810:	f7ff ff5c 	bl	80086cc <prvInsertTimerInActiveList>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d069      	beq.n	80088ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800881a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881c:	6a1b      	ldr	r3, [r3, #32]
 800881e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008820:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008828:	f003 0304 	and.w	r3, r3, #4
 800882c:	2b00      	cmp	r3, #0
 800882e:	d05e      	beq.n	80088ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008830:	68ba      	ldr	r2, [r7, #8]
 8008832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008834:	699b      	ldr	r3, [r3, #24]
 8008836:	441a      	add	r2, r3
 8008838:	2300      	movs	r3, #0
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	2300      	movs	r3, #0
 800883e:	2100      	movs	r1, #0
 8008840:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008842:	f7ff fe05 	bl	8008450 <xTimerGenericCommand>
 8008846:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008848:	6a3b      	ldr	r3, [r7, #32]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d14f      	bne.n	80088ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800884e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008852:	f383 8811 	msr	BASEPRI, r3
 8008856:	f3bf 8f6f 	isb	sy
 800885a:	f3bf 8f4f 	dsb	sy
 800885e:	61bb      	str	r3, [r7, #24]
}
 8008860:	bf00      	nop
 8008862:	e7fe      	b.n	8008862 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008866:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800886a:	f023 0301 	bic.w	r3, r3, #1
 800886e:	b2da      	uxtb	r2, r3
 8008870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008872:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008876:	e03a      	b.n	80088ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800887e:	f043 0301 	orr.w	r3, r3, #1
 8008882:	b2da      	uxtb	r2, r3
 8008884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008886:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800888e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	699b      	ldr	r3, [r3, #24]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10a      	bne.n	80088ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	617b      	str	r3, [r7, #20]
}
 80088aa:	bf00      	nop
 80088ac:	e7fe      	b.n	80088ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80088ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088b0:	699a      	ldr	r2, [r3, #24]
 80088b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b4:	18d1      	adds	r1, r2, r3
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088bc:	f7ff ff06 	bl	80086cc <prvInsertTimerInActiveList>
					break;
 80088c0:	e015      	b.n	80088ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80088c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088c8:	f003 0302 	and.w	r3, r3, #2
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d103      	bne.n	80088d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80088d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80088d2:	f000 fbdd 	bl	8009090 <vPortFree>
 80088d6:	e00a      	b.n	80088ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088de:	f023 0301 	bic.w	r3, r3, #1
 80088e2:	b2da      	uxtb	r2, r3
 80088e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80088ea:	e000      	b.n	80088ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80088ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80088ee:	4b08      	ldr	r3, [pc, #32]	; (8008910 <prvProcessReceivedCommands+0x1c0>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	1d39      	adds	r1, r7, #4
 80088f4:	2200      	movs	r2, #0
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fe fc16 	bl	8007128 <xQueueReceive>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f47f af2a 	bne.w	8008758 <prvProcessReceivedCommands+0x8>
	}
}
 8008904:	bf00      	nop
 8008906:	bf00      	nop
 8008908:	3730      	adds	r7, #48	; 0x30
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	20001a60 	.word	0x20001a60

08008914 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b088      	sub	sp, #32
 8008918:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800891a:	e048      	b.n	80089ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800891c:	4b2d      	ldr	r3, [pc, #180]	; (80089d4 <prvSwitchTimerLists+0xc0>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008926:	4b2b      	ldr	r3, [pc, #172]	; (80089d4 <prvSwitchTimerLists+0xc0>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	68db      	ldr	r3, [r3, #12]
 800892e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	3304      	adds	r3, #4
 8008934:	4618      	mov	r0, r3
 8008936:	f7fe f92f 	bl	8006b98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	68f8      	ldr	r0, [r7, #12]
 8008940:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008948:	f003 0304 	and.w	r3, r3, #4
 800894c:	2b00      	cmp	r3, #0
 800894e:	d02e      	beq.n	80089ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	699b      	ldr	r3, [r3, #24]
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	4413      	add	r3, r2
 8008958:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	429a      	cmp	r2, r3
 8008960:	d90e      	bls.n	8008980 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	68ba      	ldr	r2, [r7, #8]
 8008966:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800896e:	4b19      	ldr	r3, [pc, #100]	; (80089d4 <prvSwitchTimerLists+0xc0>)
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	3304      	adds	r3, #4
 8008976:	4619      	mov	r1, r3
 8008978:	4610      	mov	r0, r2
 800897a:	f7fe f8d4 	bl	8006b26 <vListInsert>
 800897e:	e016      	b.n	80089ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008980:	2300      	movs	r3, #0
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	2300      	movs	r3, #0
 8008986:	693a      	ldr	r2, [r7, #16]
 8008988:	2100      	movs	r1, #0
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f7ff fd60 	bl	8008450 <xTimerGenericCommand>
 8008990:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10a      	bne.n	80089ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	603b      	str	r3, [r7, #0]
}
 80089aa:	bf00      	nop
 80089ac:	e7fe      	b.n	80089ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089ae:	4b09      	ldr	r3, [pc, #36]	; (80089d4 <prvSwitchTimerLists+0xc0>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1b1      	bne.n	800891c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80089b8:	4b06      	ldr	r3, [pc, #24]	; (80089d4 <prvSwitchTimerLists+0xc0>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80089be:	4b06      	ldr	r3, [pc, #24]	; (80089d8 <prvSwitchTimerLists+0xc4>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a04      	ldr	r2, [pc, #16]	; (80089d4 <prvSwitchTimerLists+0xc0>)
 80089c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80089c6:	4a04      	ldr	r2, [pc, #16]	; (80089d8 <prvSwitchTimerLists+0xc4>)
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	6013      	str	r3, [r2, #0]
}
 80089cc:	bf00      	nop
 80089ce:	3718      	adds	r7, #24
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	20001a58 	.word	0x20001a58
 80089d8:	20001a5c 	.word	0x20001a5c

080089dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b082      	sub	sp, #8
 80089e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80089e2:	f000 f967 	bl	8008cb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80089e6:	4b15      	ldr	r3, [pc, #84]	; (8008a3c <prvCheckForValidListAndQueue+0x60>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d120      	bne.n	8008a30 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80089ee:	4814      	ldr	r0, [pc, #80]	; (8008a40 <prvCheckForValidListAndQueue+0x64>)
 80089f0:	f7fe f848 	bl	8006a84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80089f4:	4813      	ldr	r0, [pc, #76]	; (8008a44 <prvCheckForValidListAndQueue+0x68>)
 80089f6:	f7fe f845 	bl	8006a84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80089fa:	4b13      	ldr	r3, [pc, #76]	; (8008a48 <prvCheckForValidListAndQueue+0x6c>)
 80089fc:	4a10      	ldr	r2, [pc, #64]	; (8008a40 <prvCheckForValidListAndQueue+0x64>)
 80089fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a00:	4b12      	ldr	r3, [pc, #72]	; (8008a4c <prvCheckForValidListAndQueue+0x70>)
 8008a02:	4a10      	ldr	r2, [pc, #64]	; (8008a44 <prvCheckForValidListAndQueue+0x68>)
 8008a04:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a06:	2300      	movs	r3, #0
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	4b11      	ldr	r3, [pc, #68]	; (8008a50 <prvCheckForValidListAndQueue+0x74>)
 8008a0c:	4a11      	ldr	r2, [pc, #68]	; (8008a54 <prvCheckForValidListAndQueue+0x78>)
 8008a0e:	2110      	movs	r1, #16
 8008a10:	200a      	movs	r0, #10
 8008a12:	f7fe f953 	bl	8006cbc <xQueueGenericCreateStatic>
 8008a16:	4603      	mov	r3, r0
 8008a18:	4a08      	ldr	r2, [pc, #32]	; (8008a3c <prvCheckForValidListAndQueue+0x60>)
 8008a1a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008a1c:	4b07      	ldr	r3, [pc, #28]	; (8008a3c <prvCheckForValidListAndQueue+0x60>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d005      	beq.n	8008a30 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008a24:	4b05      	ldr	r3, [pc, #20]	; (8008a3c <prvCheckForValidListAndQueue+0x60>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	490b      	ldr	r1, [pc, #44]	; (8008a58 <prvCheckForValidListAndQueue+0x7c>)
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fe fd6c 	bl	8007508 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a30:	f000 f970 	bl	8008d14 <vPortExitCritical>
}
 8008a34:	bf00      	nop
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	20001a60 	.word	0x20001a60
 8008a40:	20001a30 	.word	0x20001a30
 8008a44:	20001a44 	.word	0x20001a44
 8008a48:	20001a58 	.word	0x20001a58
 8008a4c:	20001a5c 	.word	0x20001a5c
 8008a50:	20001b0c 	.word	0x20001b0c
 8008a54:	20001a6c 	.word	0x20001a6c
 8008a58:	08009d3c 	.word	0x08009d3c

08008a5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	3b04      	subs	r3, #4
 8008a6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008a74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	3b04      	subs	r3, #4
 8008a7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	f023 0201 	bic.w	r2, r3, #1
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	3b04      	subs	r3, #4
 8008a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a8c:	4a0c      	ldr	r2, [pc, #48]	; (8008ac0 <pxPortInitialiseStack+0x64>)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	3b14      	subs	r3, #20
 8008a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	3b04      	subs	r3, #4
 8008aa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f06f 0202 	mvn.w	r2, #2
 8008aaa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	3b20      	subs	r3, #32
 8008ab0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3714      	adds	r7, #20
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr
 8008ac0:	08008ac5 	.word	0x08008ac5

08008ac4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008aca:	2300      	movs	r3, #0
 8008acc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008ace:	4b12      	ldr	r3, [pc, #72]	; (8008b18 <prvTaskExitError+0x54>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ad6:	d00a      	beq.n	8008aee <prvTaskExitError+0x2a>
	__asm volatile
 8008ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	60fb      	str	r3, [r7, #12]
}
 8008aea:	bf00      	nop
 8008aec:	e7fe      	b.n	8008aec <prvTaskExitError+0x28>
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	60bb      	str	r3, [r7, #8]
}
 8008b00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b02:	bf00      	nop
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d0fc      	beq.n	8008b04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b0a:	bf00      	nop
 8008b0c:	bf00      	nop
 8008b0e:	3714      	adds	r7, #20
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr
 8008b18:	20000010 	.word	0x20000010
 8008b1c:	00000000 	.word	0x00000000

08008b20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008b20:	4b07      	ldr	r3, [pc, #28]	; (8008b40 <pxCurrentTCBConst2>)
 8008b22:	6819      	ldr	r1, [r3, #0]
 8008b24:	6808      	ldr	r0, [r1, #0]
 8008b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b2a:	f380 8809 	msr	PSP, r0
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f04f 0000 	mov.w	r0, #0
 8008b36:	f380 8811 	msr	BASEPRI, r0
 8008b3a:	4770      	bx	lr
 8008b3c:	f3af 8000 	nop.w

08008b40 <pxCurrentTCBConst2>:
 8008b40:	20001530 	.word	0x20001530
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008b44:	bf00      	nop
 8008b46:	bf00      	nop

08008b48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008b48:	4808      	ldr	r0, [pc, #32]	; (8008b6c <prvPortStartFirstTask+0x24>)
 8008b4a:	6800      	ldr	r0, [r0, #0]
 8008b4c:	6800      	ldr	r0, [r0, #0]
 8008b4e:	f380 8808 	msr	MSP, r0
 8008b52:	f04f 0000 	mov.w	r0, #0
 8008b56:	f380 8814 	msr	CONTROL, r0
 8008b5a:	b662      	cpsie	i
 8008b5c:	b661      	cpsie	f
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	f3bf 8f6f 	isb	sy
 8008b66:	df00      	svc	0
 8008b68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b6a:	bf00      	nop
 8008b6c:	e000ed08 	.word	0xe000ed08

08008b70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b086      	sub	sp, #24
 8008b74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b76:	4b46      	ldr	r3, [pc, #280]	; (8008c90 <xPortStartScheduler+0x120>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4a46      	ldr	r2, [pc, #280]	; (8008c94 <xPortStartScheduler+0x124>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d10a      	bne.n	8008b96 <xPortStartScheduler+0x26>
	__asm volatile
 8008b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b84:	f383 8811 	msr	BASEPRI, r3
 8008b88:	f3bf 8f6f 	isb	sy
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	613b      	str	r3, [r7, #16]
}
 8008b92:	bf00      	nop
 8008b94:	e7fe      	b.n	8008b94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b96:	4b3e      	ldr	r3, [pc, #248]	; (8008c90 <xPortStartScheduler+0x120>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a3f      	ldr	r2, [pc, #252]	; (8008c98 <xPortStartScheduler+0x128>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d10a      	bne.n	8008bb6 <xPortStartScheduler+0x46>
	__asm volatile
 8008ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba4:	f383 8811 	msr	BASEPRI, r3
 8008ba8:	f3bf 8f6f 	isb	sy
 8008bac:	f3bf 8f4f 	dsb	sy
 8008bb0:	60fb      	str	r3, [r7, #12]
}
 8008bb2:	bf00      	nop
 8008bb4:	e7fe      	b.n	8008bb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008bb6:	4b39      	ldr	r3, [pc, #228]	; (8008c9c <xPortStartScheduler+0x12c>)
 8008bb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	b2db      	uxtb	r3, r3
 8008bc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	22ff      	movs	r2, #255	; 0xff
 8008bc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	b2db      	uxtb	r3, r3
 8008bce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008bd0:	78fb      	ldrb	r3, [r7, #3]
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	4b31      	ldr	r3, [pc, #196]	; (8008ca0 <xPortStartScheduler+0x130>)
 8008bdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008bde:	4b31      	ldr	r3, [pc, #196]	; (8008ca4 <xPortStartScheduler+0x134>)
 8008be0:	2207      	movs	r2, #7
 8008be2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008be4:	e009      	b.n	8008bfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008be6:	4b2f      	ldr	r3, [pc, #188]	; (8008ca4 <xPortStartScheduler+0x134>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	3b01      	subs	r3, #1
 8008bec:	4a2d      	ldr	r2, [pc, #180]	; (8008ca4 <xPortStartScheduler+0x134>)
 8008bee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008bf0:	78fb      	ldrb	r3, [r7, #3]
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	005b      	lsls	r3, r3, #1
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bfa:	78fb      	ldrb	r3, [r7, #3]
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c02:	2b80      	cmp	r3, #128	; 0x80
 8008c04:	d0ef      	beq.n	8008be6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c06:	4b27      	ldr	r3, [pc, #156]	; (8008ca4 <xPortStartScheduler+0x134>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f1c3 0307 	rsb	r3, r3, #7
 8008c0e:	2b04      	cmp	r3, #4
 8008c10:	d00a      	beq.n	8008c28 <xPortStartScheduler+0xb8>
	__asm volatile
 8008c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c16:	f383 8811 	msr	BASEPRI, r3
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	f3bf 8f4f 	dsb	sy
 8008c22:	60bb      	str	r3, [r7, #8]
}
 8008c24:	bf00      	nop
 8008c26:	e7fe      	b.n	8008c26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c28:	4b1e      	ldr	r3, [pc, #120]	; (8008ca4 <xPortStartScheduler+0x134>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	021b      	lsls	r3, r3, #8
 8008c2e:	4a1d      	ldr	r2, [pc, #116]	; (8008ca4 <xPortStartScheduler+0x134>)
 8008c30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c32:	4b1c      	ldr	r3, [pc, #112]	; (8008ca4 <xPortStartScheduler+0x134>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c3a:	4a1a      	ldr	r2, [pc, #104]	; (8008ca4 <xPortStartScheduler+0x134>)
 8008c3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c46:	4b18      	ldr	r3, [pc, #96]	; (8008ca8 <xPortStartScheduler+0x138>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a17      	ldr	r2, [pc, #92]	; (8008ca8 <xPortStartScheduler+0x138>)
 8008c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c52:	4b15      	ldr	r3, [pc, #84]	; (8008ca8 <xPortStartScheduler+0x138>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a14      	ldr	r2, [pc, #80]	; (8008ca8 <xPortStartScheduler+0x138>)
 8008c58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008c5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c5e:	f000 f8dd 	bl	8008e1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c62:	4b12      	ldr	r3, [pc, #72]	; (8008cac <xPortStartScheduler+0x13c>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c68:	f000 f8fc 	bl	8008e64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c6c:	4b10      	ldr	r3, [pc, #64]	; (8008cb0 <xPortStartScheduler+0x140>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a0f      	ldr	r2, [pc, #60]	; (8008cb0 <xPortStartScheduler+0x140>)
 8008c72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008c76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c78:	f7ff ff66 	bl	8008b48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c7c:	f7ff f854 	bl	8007d28 <vTaskSwitchContext>
	prvTaskExitError();
 8008c80:	f7ff ff20 	bl	8008ac4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c84:	2300      	movs	r3, #0
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3718      	adds	r7, #24
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	e000ed00 	.word	0xe000ed00
 8008c94:	410fc271 	.word	0x410fc271
 8008c98:	410fc270 	.word	0x410fc270
 8008c9c:	e000e400 	.word	0xe000e400
 8008ca0:	20001b5c 	.word	0x20001b5c
 8008ca4:	20001b60 	.word	0x20001b60
 8008ca8:	e000ed20 	.word	0xe000ed20
 8008cac:	20000010 	.word	0x20000010
 8008cb0:	e000ef34 	.word	0xe000ef34

08008cb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
	__asm volatile
 8008cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cbe:	f383 8811 	msr	BASEPRI, r3
 8008cc2:	f3bf 8f6f 	isb	sy
 8008cc6:	f3bf 8f4f 	dsb	sy
 8008cca:	607b      	str	r3, [r7, #4]
}
 8008ccc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008cce:	4b0f      	ldr	r3, [pc, #60]	; (8008d0c <vPortEnterCritical+0x58>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	4a0d      	ldr	r2, [pc, #52]	; (8008d0c <vPortEnterCritical+0x58>)
 8008cd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008cd8:	4b0c      	ldr	r3, [pc, #48]	; (8008d0c <vPortEnterCritical+0x58>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d10f      	bne.n	8008d00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ce0:	4b0b      	ldr	r3, [pc, #44]	; (8008d10 <vPortEnterCritical+0x5c>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00a      	beq.n	8008d00 <vPortEnterCritical+0x4c>
	__asm volatile
 8008cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cee:	f383 8811 	msr	BASEPRI, r3
 8008cf2:	f3bf 8f6f 	isb	sy
 8008cf6:	f3bf 8f4f 	dsb	sy
 8008cfa:	603b      	str	r3, [r7, #0]
}
 8008cfc:	bf00      	nop
 8008cfe:	e7fe      	b.n	8008cfe <vPortEnterCritical+0x4a>
	}
}
 8008d00:	bf00      	nop
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	20000010 	.word	0x20000010
 8008d10:	e000ed04 	.word	0xe000ed04

08008d14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d1a:	4b12      	ldr	r3, [pc, #72]	; (8008d64 <vPortExitCritical+0x50>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d10a      	bne.n	8008d38 <vPortExitCritical+0x24>
	__asm volatile
 8008d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d26:	f383 8811 	msr	BASEPRI, r3
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	607b      	str	r3, [r7, #4]
}
 8008d34:	bf00      	nop
 8008d36:	e7fe      	b.n	8008d36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008d38:	4b0a      	ldr	r3, [pc, #40]	; (8008d64 <vPortExitCritical+0x50>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	3b01      	subs	r3, #1
 8008d3e:	4a09      	ldr	r2, [pc, #36]	; (8008d64 <vPortExitCritical+0x50>)
 8008d40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d42:	4b08      	ldr	r3, [pc, #32]	; (8008d64 <vPortExitCritical+0x50>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d105      	bne.n	8008d56 <vPortExitCritical+0x42>
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	f383 8811 	msr	BASEPRI, r3
}
 8008d54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d56:	bf00      	nop
 8008d58:	370c      	adds	r7, #12
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	20000010 	.word	0x20000010
	...

08008d70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d70:	f3ef 8009 	mrs	r0, PSP
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	4b15      	ldr	r3, [pc, #84]	; (8008dd0 <pxCurrentTCBConst>)
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	f01e 0f10 	tst.w	lr, #16
 8008d80:	bf08      	it	eq
 8008d82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d8a:	6010      	str	r0, [r2, #0]
 8008d8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008d94:	f380 8811 	msr	BASEPRI, r0
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f7fe ffc2 	bl	8007d28 <vTaskSwitchContext>
 8008da4:	f04f 0000 	mov.w	r0, #0
 8008da8:	f380 8811 	msr	BASEPRI, r0
 8008dac:	bc09      	pop	{r0, r3}
 8008dae:	6819      	ldr	r1, [r3, #0]
 8008db0:	6808      	ldr	r0, [r1, #0]
 8008db2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db6:	f01e 0f10 	tst.w	lr, #16
 8008dba:	bf08      	it	eq
 8008dbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008dc0:	f380 8809 	msr	PSP, r0
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	4770      	bx	lr
 8008dca:	bf00      	nop
 8008dcc:	f3af 8000 	nop.w

08008dd0 <pxCurrentTCBConst>:
 8008dd0:	20001530 	.word	0x20001530
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008dd4:	bf00      	nop
 8008dd6:	bf00      	nop

08008dd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
	__asm volatile
 8008dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de2:	f383 8811 	msr	BASEPRI, r3
 8008de6:	f3bf 8f6f 	isb	sy
 8008dea:	f3bf 8f4f 	dsb	sy
 8008dee:	607b      	str	r3, [r7, #4]
}
 8008df0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008df2:	f7fe fedf 	bl	8007bb4 <xTaskIncrementTick>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d003      	beq.n	8008e04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008dfc:	4b06      	ldr	r3, [pc, #24]	; (8008e18 <xPortSysTickHandler+0x40>)
 8008dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e02:	601a      	str	r2, [r3, #0]
 8008e04:	2300      	movs	r3, #0
 8008e06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	f383 8811 	msr	BASEPRI, r3
}
 8008e0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}
 8008e18:	e000ed04 	.word	0xe000ed04

08008e1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e20:	4b0b      	ldr	r3, [pc, #44]	; (8008e50 <vPortSetupTimerInterrupt+0x34>)
 8008e22:	2200      	movs	r2, #0
 8008e24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e26:	4b0b      	ldr	r3, [pc, #44]	; (8008e54 <vPortSetupTimerInterrupt+0x38>)
 8008e28:	2200      	movs	r2, #0
 8008e2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e2c:	4b0a      	ldr	r3, [pc, #40]	; (8008e58 <vPortSetupTimerInterrupt+0x3c>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a0a      	ldr	r2, [pc, #40]	; (8008e5c <vPortSetupTimerInterrupt+0x40>)
 8008e32:	fba2 2303 	umull	r2, r3, r2, r3
 8008e36:	099b      	lsrs	r3, r3, #6
 8008e38:	4a09      	ldr	r2, [pc, #36]	; (8008e60 <vPortSetupTimerInterrupt+0x44>)
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e3e:	4b04      	ldr	r3, [pc, #16]	; (8008e50 <vPortSetupTimerInterrupt+0x34>)
 8008e40:	2207      	movs	r2, #7
 8008e42:	601a      	str	r2, [r3, #0]
}
 8008e44:	bf00      	nop
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	e000e010 	.word	0xe000e010
 8008e54:	e000e018 	.word	0xe000e018
 8008e58:	20000004 	.word	0x20000004
 8008e5c:	10624dd3 	.word	0x10624dd3
 8008e60:	e000e014 	.word	0xe000e014

08008e64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008e74 <vPortEnableVFP+0x10>
 8008e68:	6801      	ldr	r1, [r0, #0]
 8008e6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008e6e:	6001      	str	r1, [r0, #0]
 8008e70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e72:	bf00      	nop
 8008e74:	e000ed88 	.word	0xe000ed88

08008e78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e7e:	f3ef 8305 	mrs	r3, IPSR
 8008e82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2b0f      	cmp	r3, #15
 8008e88:	d914      	bls.n	8008eb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e8a:	4a17      	ldr	r2, [pc, #92]	; (8008ee8 <vPortValidateInterruptPriority+0x70>)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	4413      	add	r3, r2
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e94:	4b15      	ldr	r3, [pc, #84]	; (8008eec <vPortValidateInterruptPriority+0x74>)
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	7afa      	ldrb	r2, [r7, #11]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d20a      	bcs.n	8008eb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	607b      	str	r3, [r7, #4]
}
 8008eb0:	bf00      	nop
 8008eb2:	e7fe      	b.n	8008eb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008eb4:	4b0e      	ldr	r3, [pc, #56]	; (8008ef0 <vPortValidateInterruptPriority+0x78>)
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008ebc:	4b0d      	ldr	r3, [pc, #52]	; (8008ef4 <vPortValidateInterruptPriority+0x7c>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d90a      	bls.n	8008eda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	603b      	str	r3, [r7, #0]
}
 8008ed6:	bf00      	nop
 8008ed8:	e7fe      	b.n	8008ed8 <vPortValidateInterruptPriority+0x60>
	}
 8008eda:	bf00      	nop
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	e000e3f0 	.word	0xe000e3f0
 8008eec:	20001b5c 	.word	0x20001b5c
 8008ef0:	e000ed0c 	.word	0xe000ed0c
 8008ef4:	20001b60 	.word	0x20001b60

08008ef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b08a      	sub	sp, #40	; 0x28
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f00:	2300      	movs	r3, #0
 8008f02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f04:	f7fe fd9a 	bl	8007a3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f08:	4b5b      	ldr	r3, [pc, #364]	; (8009078 <pvPortMalloc+0x180>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d101      	bne.n	8008f14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f10:	f000 f920 	bl	8009154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f14:	4b59      	ldr	r3, [pc, #356]	; (800907c <pvPortMalloc+0x184>)
 8008f16:	681a      	ldr	r2, [r3, #0]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	f040 8093 	bne.w	8009048 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d01d      	beq.n	8008f64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008f28:	2208      	movs	r2, #8
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f003 0307 	and.w	r3, r3, #7
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d014      	beq.n	8008f64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f023 0307 	bic.w	r3, r3, #7
 8008f40:	3308      	adds	r3, #8
 8008f42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f003 0307 	and.w	r3, r3, #7
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00a      	beq.n	8008f64 <pvPortMalloc+0x6c>
	__asm volatile
 8008f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f52:	f383 8811 	msr	BASEPRI, r3
 8008f56:	f3bf 8f6f 	isb	sy
 8008f5a:	f3bf 8f4f 	dsb	sy
 8008f5e:	617b      	str	r3, [r7, #20]
}
 8008f60:	bf00      	nop
 8008f62:	e7fe      	b.n	8008f62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d06e      	beq.n	8009048 <pvPortMalloc+0x150>
 8008f6a:	4b45      	ldr	r3, [pc, #276]	; (8009080 <pvPortMalloc+0x188>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d869      	bhi.n	8009048 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f74:	4b43      	ldr	r3, [pc, #268]	; (8009084 <pvPortMalloc+0x18c>)
 8008f76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f78:	4b42      	ldr	r3, [pc, #264]	; (8009084 <pvPortMalloc+0x18c>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f7e:	e004      	b.n	8008f8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	429a      	cmp	r2, r3
 8008f92:	d903      	bls.n	8008f9c <pvPortMalloc+0xa4>
 8008f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1f1      	bne.n	8008f80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f9c:	4b36      	ldr	r3, [pc, #216]	; (8009078 <pvPortMalloc+0x180>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d050      	beq.n	8009048 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008fa6:	6a3b      	ldr	r3, [r7, #32]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2208      	movs	r2, #8
 8008fac:	4413      	add	r3, r2
 8008fae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb2:	681a      	ldr	r2, [r3, #0]
 8008fb4:	6a3b      	ldr	r3, [r7, #32]
 8008fb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	1ad2      	subs	r2, r2, r3
 8008fc0:	2308      	movs	r3, #8
 8008fc2:	005b      	lsls	r3, r3, #1
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d91f      	bls.n	8009008 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4413      	add	r3, r2
 8008fce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fd0:	69bb      	ldr	r3, [r7, #24]
 8008fd2:	f003 0307 	and.w	r3, r3, #7
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00a      	beq.n	8008ff0 <pvPortMalloc+0xf8>
	__asm volatile
 8008fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fde:	f383 8811 	msr	BASEPRI, r3
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	613b      	str	r3, [r7, #16]
}
 8008fec:	bf00      	nop
 8008fee:	e7fe      	b.n	8008fee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	685a      	ldr	r2, [r3, #4]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	1ad2      	subs	r2, r2, r3
 8008ff8:	69bb      	ldr	r3, [r7, #24]
 8008ffa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009002:	69b8      	ldr	r0, [r7, #24]
 8009004:	f000 f908 	bl	8009218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009008:	4b1d      	ldr	r3, [pc, #116]	; (8009080 <pvPortMalloc+0x188>)
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	1ad3      	subs	r3, r2, r3
 8009012:	4a1b      	ldr	r2, [pc, #108]	; (8009080 <pvPortMalloc+0x188>)
 8009014:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009016:	4b1a      	ldr	r3, [pc, #104]	; (8009080 <pvPortMalloc+0x188>)
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	4b1b      	ldr	r3, [pc, #108]	; (8009088 <pvPortMalloc+0x190>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	429a      	cmp	r2, r3
 8009020:	d203      	bcs.n	800902a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009022:	4b17      	ldr	r3, [pc, #92]	; (8009080 <pvPortMalloc+0x188>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a18      	ldr	r2, [pc, #96]	; (8009088 <pvPortMalloc+0x190>)
 8009028:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800902a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902c:	685a      	ldr	r2, [r3, #4]
 800902e:	4b13      	ldr	r3, [pc, #76]	; (800907c <pvPortMalloc+0x184>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	431a      	orrs	r2, r3
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903a:	2200      	movs	r2, #0
 800903c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800903e:	4b13      	ldr	r3, [pc, #76]	; (800908c <pvPortMalloc+0x194>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	3301      	adds	r3, #1
 8009044:	4a11      	ldr	r2, [pc, #68]	; (800908c <pvPortMalloc+0x194>)
 8009046:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009048:	f7fe fd06 	bl	8007a58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	f003 0307 	and.w	r3, r3, #7
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00a      	beq.n	800906c <pvPortMalloc+0x174>
	__asm volatile
 8009056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905a:	f383 8811 	msr	BASEPRI, r3
 800905e:	f3bf 8f6f 	isb	sy
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	60fb      	str	r3, [r7, #12]
}
 8009068:	bf00      	nop
 800906a:	e7fe      	b.n	800906a <pvPortMalloc+0x172>
	return pvReturn;
 800906c:	69fb      	ldr	r3, [r7, #28]
}
 800906e:	4618      	mov	r0, r3
 8009070:	3728      	adds	r7, #40	; 0x28
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	2000576c 	.word	0x2000576c
 800907c:	20005780 	.word	0x20005780
 8009080:	20005770 	.word	0x20005770
 8009084:	20005764 	.word	0x20005764
 8009088:	20005774 	.word	0x20005774
 800908c:	20005778 	.word	0x20005778

08009090 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b086      	sub	sp, #24
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d04d      	beq.n	800913e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80090a2:	2308      	movs	r3, #8
 80090a4:	425b      	negs	r3, r3
 80090a6:	697a      	ldr	r2, [r7, #20]
 80090a8:	4413      	add	r3, r2
 80090aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	685a      	ldr	r2, [r3, #4]
 80090b4:	4b24      	ldr	r3, [pc, #144]	; (8009148 <vPortFree+0xb8>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4013      	ands	r3, r2
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d10a      	bne.n	80090d4 <vPortFree+0x44>
	__asm volatile
 80090be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c2:	f383 8811 	msr	BASEPRI, r3
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	60fb      	str	r3, [r7, #12]
}
 80090d0:	bf00      	nop
 80090d2:	e7fe      	b.n	80090d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00a      	beq.n	80090f2 <vPortFree+0x62>
	__asm volatile
 80090dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e0:	f383 8811 	msr	BASEPRI, r3
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	60bb      	str	r3, [r7, #8]
}
 80090ee:	bf00      	nop
 80090f0:	e7fe      	b.n	80090f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	4b14      	ldr	r3, [pc, #80]	; (8009148 <vPortFree+0xb8>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4013      	ands	r3, r2
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d01e      	beq.n	800913e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d11a      	bne.n	800913e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	685a      	ldr	r2, [r3, #4]
 800910c:	4b0e      	ldr	r3, [pc, #56]	; (8009148 <vPortFree+0xb8>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	43db      	mvns	r3, r3
 8009112:	401a      	ands	r2, r3
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009118:	f7fe fc90 	bl	8007a3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	685a      	ldr	r2, [r3, #4]
 8009120:	4b0a      	ldr	r3, [pc, #40]	; (800914c <vPortFree+0xbc>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4413      	add	r3, r2
 8009126:	4a09      	ldr	r2, [pc, #36]	; (800914c <vPortFree+0xbc>)
 8009128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800912a:	6938      	ldr	r0, [r7, #16]
 800912c:	f000 f874 	bl	8009218 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009130:	4b07      	ldr	r3, [pc, #28]	; (8009150 <vPortFree+0xc0>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	3301      	adds	r3, #1
 8009136:	4a06      	ldr	r2, [pc, #24]	; (8009150 <vPortFree+0xc0>)
 8009138:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800913a:	f7fe fc8d 	bl	8007a58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800913e:	bf00      	nop
 8009140:	3718      	adds	r7, #24
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	20005780 	.word	0x20005780
 800914c:	20005770 	.word	0x20005770
 8009150:	2000577c 	.word	0x2000577c

08009154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009154:	b480      	push	{r7}
 8009156:	b085      	sub	sp, #20
 8009158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800915a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800915e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009160:	4b27      	ldr	r3, [pc, #156]	; (8009200 <prvHeapInit+0xac>)
 8009162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f003 0307 	and.w	r3, r3, #7
 800916a:	2b00      	cmp	r3, #0
 800916c:	d00c      	beq.n	8009188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	3307      	adds	r3, #7
 8009172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f023 0307 	bic.w	r3, r3, #7
 800917a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	4a1f      	ldr	r2, [pc, #124]	; (8009200 <prvHeapInit+0xac>)
 8009184:	4413      	add	r3, r2
 8009186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800918c:	4a1d      	ldr	r2, [pc, #116]	; (8009204 <prvHeapInit+0xb0>)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009192:	4b1c      	ldr	r3, [pc, #112]	; (8009204 <prvHeapInit+0xb0>)
 8009194:	2200      	movs	r2, #0
 8009196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	4413      	add	r3, r2
 800919e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80091a0:	2208      	movs	r2, #8
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	1a9b      	subs	r3, r3, r2
 80091a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	f023 0307 	bic.w	r3, r3, #7
 80091ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	4a15      	ldr	r2, [pc, #84]	; (8009208 <prvHeapInit+0xb4>)
 80091b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80091b6:	4b14      	ldr	r3, [pc, #80]	; (8009208 <prvHeapInit+0xb4>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2200      	movs	r2, #0
 80091bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80091be:	4b12      	ldr	r3, [pc, #72]	; (8009208 <prvHeapInit+0xb4>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2200      	movs	r2, #0
 80091c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	1ad2      	subs	r2, r2, r3
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80091d4:	4b0c      	ldr	r3, [pc, #48]	; (8009208 <prvHeapInit+0xb4>)
 80091d6:	681a      	ldr	r2, [r3, #0]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	4a0a      	ldr	r2, [pc, #40]	; (800920c <prvHeapInit+0xb8>)
 80091e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	4a09      	ldr	r2, [pc, #36]	; (8009210 <prvHeapInit+0xbc>)
 80091ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80091ec:	4b09      	ldr	r3, [pc, #36]	; (8009214 <prvHeapInit+0xc0>)
 80091ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80091f2:	601a      	str	r2, [r3, #0]
}
 80091f4:	bf00      	nop
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	20001b64 	.word	0x20001b64
 8009204:	20005764 	.word	0x20005764
 8009208:	2000576c 	.word	0x2000576c
 800920c:	20005774 	.word	0x20005774
 8009210:	20005770 	.word	0x20005770
 8009214:	20005780 	.word	0x20005780

08009218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009218:	b480      	push	{r7}
 800921a:	b085      	sub	sp, #20
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009220:	4b28      	ldr	r3, [pc, #160]	; (80092c4 <prvInsertBlockIntoFreeList+0xac>)
 8009222:	60fb      	str	r3, [r7, #12]
 8009224:	e002      	b.n	800922c <prvInsertBlockIntoFreeList+0x14>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	60fb      	str	r3, [r7, #12]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	429a      	cmp	r2, r3
 8009234:	d8f7      	bhi.n	8009226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	4413      	add	r3, r2
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	429a      	cmp	r2, r3
 8009246:	d108      	bne.n	800925a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	685a      	ldr	r2, [r3, #4]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	441a      	add	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	685b      	ldr	r3, [r3, #4]
 8009262:	68ba      	ldr	r2, [r7, #8]
 8009264:	441a      	add	r2, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	429a      	cmp	r2, r3
 800926c:	d118      	bne.n	80092a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	4b15      	ldr	r3, [pc, #84]	; (80092c8 <prvInsertBlockIntoFreeList+0xb0>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	429a      	cmp	r2, r3
 8009278:	d00d      	beq.n	8009296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	685a      	ldr	r2, [r3, #4]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	685b      	ldr	r3, [r3, #4]
 8009284:	441a      	add	r2, r3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	601a      	str	r2, [r3, #0]
 8009294:	e008      	b.n	80092a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009296:	4b0c      	ldr	r3, [pc, #48]	; (80092c8 <prvInsertBlockIntoFreeList+0xb0>)
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	601a      	str	r2, [r3, #0]
 800929e:	e003      	b.n	80092a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681a      	ldr	r2, [r3, #0]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d002      	beq.n	80092b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092b6:	bf00      	nop
 80092b8:	3714      	adds	r7, #20
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	20005764 	.word	0x20005764
 80092c8:	2000576c 	.word	0x2000576c

080092cc <__errno>:
 80092cc:	4b01      	ldr	r3, [pc, #4]	; (80092d4 <__errno+0x8>)
 80092ce:	6818      	ldr	r0, [r3, #0]
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	20000014 	.word	0x20000014

080092d8 <__libc_init_array>:
 80092d8:	b570      	push	{r4, r5, r6, lr}
 80092da:	4d0d      	ldr	r5, [pc, #52]	; (8009310 <__libc_init_array+0x38>)
 80092dc:	4c0d      	ldr	r4, [pc, #52]	; (8009314 <__libc_init_array+0x3c>)
 80092de:	1b64      	subs	r4, r4, r5
 80092e0:	10a4      	asrs	r4, r4, #2
 80092e2:	2600      	movs	r6, #0
 80092e4:	42a6      	cmp	r6, r4
 80092e6:	d109      	bne.n	80092fc <__libc_init_array+0x24>
 80092e8:	4d0b      	ldr	r5, [pc, #44]	; (8009318 <__libc_init_array+0x40>)
 80092ea:	4c0c      	ldr	r4, [pc, #48]	; (800931c <__libc_init_array+0x44>)
 80092ec:	f000 fc9e 	bl	8009c2c <_init>
 80092f0:	1b64      	subs	r4, r4, r5
 80092f2:	10a4      	asrs	r4, r4, #2
 80092f4:	2600      	movs	r6, #0
 80092f6:	42a6      	cmp	r6, r4
 80092f8:	d105      	bne.n	8009306 <__libc_init_array+0x2e>
 80092fa:	bd70      	pop	{r4, r5, r6, pc}
 80092fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009300:	4798      	blx	r3
 8009302:	3601      	adds	r6, #1
 8009304:	e7ee      	b.n	80092e4 <__libc_init_array+0xc>
 8009306:	f855 3b04 	ldr.w	r3, [r5], #4
 800930a:	4798      	blx	r3
 800930c:	3601      	adds	r6, #1
 800930e:	e7f2      	b.n	80092f6 <__libc_init_array+0x1e>
 8009310:	08009ed8 	.word	0x08009ed8
 8009314:	08009ed8 	.word	0x08009ed8
 8009318:	08009ed8 	.word	0x08009ed8
 800931c:	08009edc 	.word	0x08009edc

08009320 <memcpy>:
 8009320:	440a      	add	r2, r1
 8009322:	4291      	cmp	r1, r2
 8009324:	f100 33ff 	add.w	r3, r0, #4294967295
 8009328:	d100      	bne.n	800932c <memcpy+0xc>
 800932a:	4770      	bx	lr
 800932c:	b510      	push	{r4, lr}
 800932e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009332:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009336:	4291      	cmp	r1, r2
 8009338:	d1f9      	bne.n	800932e <memcpy+0xe>
 800933a:	bd10      	pop	{r4, pc}

0800933c <memset>:
 800933c:	4402      	add	r2, r0
 800933e:	4603      	mov	r3, r0
 8009340:	4293      	cmp	r3, r2
 8009342:	d100      	bne.n	8009346 <memset+0xa>
 8009344:	4770      	bx	lr
 8009346:	f803 1b01 	strb.w	r1, [r3], #1
 800934a:	e7f9      	b.n	8009340 <memset+0x4>

0800934c <siprintf>:
 800934c:	b40e      	push	{r1, r2, r3}
 800934e:	b500      	push	{lr}
 8009350:	b09c      	sub	sp, #112	; 0x70
 8009352:	ab1d      	add	r3, sp, #116	; 0x74
 8009354:	9002      	str	r0, [sp, #8]
 8009356:	9006      	str	r0, [sp, #24]
 8009358:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800935c:	4809      	ldr	r0, [pc, #36]	; (8009384 <siprintf+0x38>)
 800935e:	9107      	str	r1, [sp, #28]
 8009360:	9104      	str	r1, [sp, #16]
 8009362:	4909      	ldr	r1, [pc, #36]	; (8009388 <siprintf+0x3c>)
 8009364:	f853 2b04 	ldr.w	r2, [r3], #4
 8009368:	9105      	str	r1, [sp, #20]
 800936a:	6800      	ldr	r0, [r0, #0]
 800936c:	9301      	str	r3, [sp, #4]
 800936e:	a902      	add	r1, sp, #8
 8009370:	f000 f95a 	bl	8009628 <_svfiprintf_r>
 8009374:	9b02      	ldr	r3, [sp, #8]
 8009376:	2200      	movs	r2, #0
 8009378:	701a      	strb	r2, [r3, #0]
 800937a:	b01c      	add	sp, #112	; 0x70
 800937c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009380:	b003      	add	sp, #12
 8009382:	4770      	bx	lr
 8009384:	20000014 	.word	0x20000014
 8009388:	ffff0208 	.word	0xffff0208

0800938c <strcat>:
 800938c:	b510      	push	{r4, lr}
 800938e:	4602      	mov	r2, r0
 8009390:	7814      	ldrb	r4, [r2, #0]
 8009392:	4613      	mov	r3, r2
 8009394:	3201      	adds	r2, #1
 8009396:	2c00      	cmp	r4, #0
 8009398:	d1fa      	bne.n	8009390 <strcat+0x4>
 800939a:	3b01      	subs	r3, #1
 800939c:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093a4:	2a00      	cmp	r2, #0
 80093a6:	d1f9      	bne.n	800939c <strcat+0x10>
 80093a8:	bd10      	pop	{r4, pc}

080093aa <__retarget_lock_acquire_recursive>:
 80093aa:	4770      	bx	lr

080093ac <__retarget_lock_release_recursive>:
 80093ac:	4770      	bx	lr
	...

080093b0 <_free_r>:
 80093b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093b2:	2900      	cmp	r1, #0
 80093b4:	d044      	beq.n	8009440 <_free_r+0x90>
 80093b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093ba:	9001      	str	r0, [sp, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f1a1 0404 	sub.w	r4, r1, #4
 80093c2:	bfb8      	it	lt
 80093c4:	18e4      	addlt	r4, r4, r3
 80093c6:	f000 fbed 	bl	8009ba4 <__malloc_lock>
 80093ca:	4a1e      	ldr	r2, [pc, #120]	; (8009444 <_free_r+0x94>)
 80093cc:	9801      	ldr	r0, [sp, #4]
 80093ce:	6813      	ldr	r3, [r2, #0]
 80093d0:	b933      	cbnz	r3, 80093e0 <_free_r+0x30>
 80093d2:	6063      	str	r3, [r4, #4]
 80093d4:	6014      	str	r4, [r2, #0]
 80093d6:	b003      	add	sp, #12
 80093d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093dc:	f000 bbe8 	b.w	8009bb0 <__malloc_unlock>
 80093e0:	42a3      	cmp	r3, r4
 80093e2:	d908      	bls.n	80093f6 <_free_r+0x46>
 80093e4:	6825      	ldr	r5, [r4, #0]
 80093e6:	1961      	adds	r1, r4, r5
 80093e8:	428b      	cmp	r3, r1
 80093ea:	bf01      	itttt	eq
 80093ec:	6819      	ldreq	r1, [r3, #0]
 80093ee:	685b      	ldreq	r3, [r3, #4]
 80093f0:	1949      	addeq	r1, r1, r5
 80093f2:	6021      	streq	r1, [r4, #0]
 80093f4:	e7ed      	b.n	80093d2 <_free_r+0x22>
 80093f6:	461a      	mov	r2, r3
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	b10b      	cbz	r3, 8009400 <_free_r+0x50>
 80093fc:	42a3      	cmp	r3, r4
 80093fe:	d9fa      	bls.n	80093f6 <_free_r+0x46>
 8009400:	6811      	ldr	r1, [r2, #0]
 8009402:	1855      	adds	r5, r2, r1
 8009404:	42a5      	cmp	r5, r4
 8009406:	d10b      	bne.n	8009420 <_free_r+0x70>
 8009408:	6824      	ldr	r4, [r4, #0]
 800940a:	4421      	add	r1, r4
 800940c:	1854      	adds	r4, r2, r1
 800940e:	42a3      	cmp	r3, r4
 8009410:	6011      	str	r1, [r2, #0]
 8009412:	d1e0      	bne.n	80093d6 <_free_r+0x26>
 8009414:	681c      	ldr	r4, [r3, #0]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	6053      	str	r3, [r2, #4]
 800941a:	4421      	add	r1, r4
 800941c:	6011      	str	r1, [r2, #0]
 800941e:	e7da      	b.n	80093d6 <_free_r+0x26>
 8009420:	d902      	bls.n	8009428 <_free_r+0x78>
 8009422:	230c      	movs	r3, #12
 8009424:	6003      	str	r3, [r0, #0]
 8009426:	e7d6      	b.n	80093d6 <_free_r+0x26>
 8009428:	6825      	ldr	r5, [r4, #0]
 800942a:	1961      	adds	r1, r4, r5
 800942c:	428b      	cmp	r3, r1
 800942e:	bf04      	itt	eq
 8009430:	6819      	ldreq	r1, [r3, #0]
 8009432:	685b      	ldreq	r3, [r3, #4]
 8009434:	6063      	str	r3, [r4, #4]
 8009436:	bf04      	itt	eq
 8009438:	1949      	addeq	r1, r1, r5
 800943a:	6021      	streq	r1, [r4, #0]
 800943c:	6054      	str	r4, [r2, #4]
 800943e:	e7ca      	b.n	80093d6 <_free_r+0x26>
 8009440:	b003      	add	sp, #12
 8009442:	bd30      	pop	{r4, r5, pc}
 8009444:	20005788 	.word	0x20005788

08009448 <sbrk_aligned>:
 8009448:	b570      	push	{r4, r5, r6, lr}
 800944a:	4e0e      	ldr	r6, [pc, #56]	; (8009484 <sbrk_aligned+0x3c>)
 800944c:	460c      	mov	r4, r1
 800944e:	6831      	ldr	r1, [r6, #0]
 8009450:	4605      	mov	r5, r0
 8009452:	b911      	cbnz	r1, 800945a <sbrk_aligned+0x12>
 8009454:	f000 fb7c 	bl	8009b50 <_sbrk_r>
 8009458:	6030      	str	r0, [r6, #0]
 800945a:	4621      	mov	r1, r4
 800945c:	4628      	mov	r0, r5
 800945e:	f000 fb77 	bl	8009b50 <_sbrk_r>
 8009462:	1c43      	adds	r3, r0, #1
 8009464:	d00a      	beq.n	800947c <sbrk_aligned+0x34>
 8009466:	1cc4      	adds	r4, r0, #3
 8009468:	f024 0403 	bic.w	r4, r4, #3
 800946c:	42a0      	cmp	r0, r4
 800946e:	d007      	beq.n	8009480 <sbrk_aligned+0x38>
 8009470:	1a21      	subs	r1, r4, r0
 8009472:	4628      	mov	r0, r5
 8009474:	f000 fb6c 	bl	8009b50 <_sbrk_r>
 8009478:	3001      	adds	r0, #1
 800947a:	d101      	bne.n	8009480 <sbrk_aligned+0x38>
 800947c:	f04f 34ff 	mov.w	r4, #4294967295
 8009480:	4620      	mov	r0, r4
 8009482:	bd70      	pop	{r4, r5, r6, pc}
 8009484:	2000578c 	.word	0x2000578c

08009488 <_malloc_r>:
 8009488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800948c:	1ccd      	adds	r5, r1, #3
 800948e:	f025 0503 	bic.w	r5, r5, #3
 8009492:	3508      	adds	r5, #8
 8009494:	2d0c      	cmp	r5, #12
 8009496:	bf38      	it	cc
 8009498:	250c      	movcc	r5, #12
 800949a:	2d00      	cmp	r5, #0
 800949c:	4607      	mov	r7, r0
 800949e:	db01      	blt.n	80094a4 <_malloc_r+0x1c>
 80094a0:	42a9      	cmp	r1, r5
 80094a2:	d905      	bls.n	80094b0 <_malloc_r+0x28>
 80094a4:	230c      	movs	r3, #12
 80094a6:	603b      	str	r3, [r7, #0]
 80094a8:	2600      	movs	r6, #0
 80094aa:	4630      	mov	r0, r6
 80094ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094b0:	4e2e      	ldr	r6, [pc, #184]	; (800956c <_malloc_r+0xe4>)
 80094b2:	f000 fb77 	bl	8009ba4 <__malloc_lock>
 80094b6:	6833      	ldr	r3, [r6, #0]
 80094b8:	461c      	mov	r4, r3
 80094ba:	bb34      	cbnz	r4, 800950a <_malloc_r+0x82>
 80094bc:	4629      	mov	r1, r5
 80094be:	4638      	mov	r0, r7
 80094c0:	f7ff ffc2 	bl	8009448 <sbrk_aligned>
 80094c4:	1c43      	adds	r3, r0, #1
 80094c6:	4604      	mov	r4, r0
 80094c8:	d14d      	bne.n	8009566 <_malloc_r+0xde>
 80094ca:	6834      	ldr	r4, [r6, #0]
 80094cc:	4626      	mov	r6, r4
 80094ce:	2e00      	cmp	r6, #0
 80094d0:	d140      	bne.n	8009554 <_malloc_r+0xcc>
 80094d2:	6823      	ldr	r3, [r4, #0]
 80094d4:	4631      	mov	r1, r6
 80094d6:	4638      	mov	r0, r7
 80094d8:	eb04 0803 	add.w	r8, r4, r3
 80094dc:	f000 fb38 	bl	8009b50 <_sbrk_r>
 80094e0:	4580      	cmp	r8, r0
 80094e2:	d13a      	bne.n	800955a <_malloc_r+0xd2>
 80094e4:	6821      	ldr	r1, [r4, #0]
 80094e6:	3503      	adds	r5, #3
 80094e8:	1a6d      	subs	r5, r5, r1
 80094ea:	f025 0503 	bic.w	r5, r5, #3
 80094ee:	3508      	adds	r5, #8
 80094f0:	2d0c      	cmp	r5, #12
 80094f2:	bf38      	it	cc
 80094f4:	250c      	movcc	r5, #12
 80094f6:	4629      	mov	r1, r5
 80094f8:	4638      	mov	r0, r7
 80094fa:	f7ff ffa5 	bl	8009448 <sbrk_aligned>
 80094fe:	3001      	adds	r0, #1
 8009500:	d02b      	beq.n	800955a <_malloc_r+0xd2>
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	442b      	add	r3, r5
 8009506:	6023      	str	r3, [r4, #0]
 8009508:	e00e      	b.n	8009528 <_malloc_r+0xa0>
 800950a:	6822      	ldr	r2, [r4, #0]
 800950c:	1b52      	subs	r2, r2, r5
 800950e:	d41e      	bmi.n	800954e <_malloc_r+0xc6>
 8009510:	2a0b      	cmp	r2, #11
 8009512:	d916      	bls.n	8009542 <_malloc_r+0xba>
 8009514:	1961      	adds	r1, r4, r5
 8009516:	42a3      	cmp	r3, r4
 8009518:	6025      	str	r5, [r4, #0]
 800951a:	bf18      	it	ne
 800951c:	6059      	strne	r1, [r3, #4]
 800951e:	6863      	ldr	r3, [r4, #4]
 8009520:	bf08      	it	eq
 8009522:	6031      	streq	r1, [r6, #0]
 8009524:	5162      	str	r2, [r4, r5]
 8009526:	604b      	str	r3, [r1, #4]
 8009528:	4638      	mov	r0, r7
 800952a:	f104 060b 	add.w	r6, r4, #11
 800952e:	f000 fb3f 	bl	8009bb0 <__malloc_unlock>
 8009532:	f026 0607 	bic.w	r6, r6, #7
 8009536:	1d23      	adds	r3, r4, #4
 8009538:	1af2      	subs	r2, r6, r3
 800953a:	d0b6      	beq.n	80094aa <_malloc_r+0x22>
 800953c:	1b9b      	subs	r3, r3, r6
 800953e:	50a3      	str	r3, [r4, r2]
 8009540:	e7b3      	b.n	80094aa <_malloc_r+0x22>
 8009542:	6862      	ldr	r2, [r4, #4]
 8009544:	42a3      	cmp	r3, r4
 8009546:	bf0c      	ite	eq
 8009548:	6032      	streq	r2, [r6, #0]
 800954a:	605a      	strne	r2, [r3, #4]
 800954c:	e7ec      	b.n	8009528 <_malloc_r+0xa0>
 800954e:	4623      	mov	r3, r4
 8009550:	6864      	ldr	r4, [r4, #4]
 8009552:	e7b2      	b.n	80094ba <_malloc_r+0x32>
 8009554:	4634      	mov	r4, r6
 8009556:	6876      	ldr	r6, [r6, #4]
 8009558:	e7b9      	b.n	80094ce <_malloc_r+0x46>
 800955a:	230c      	movs	r3, #12
 800955c:	603b      	str	r3, [r7, #0]
 800955e:	4638      	mov	r0, r7
 8009560:	f000 fb26 	bl	8009bb0 <__malloc_unlock>
 8009564:	e7a1      	b.n	80094aa <_malloc_r+0x22>
 8009566:	6025      	str	r5, [r4, #0]
 8009568:	e7de      	b.n	8009528 <_malloc_r+0xa0>
 800956a:	bf00      	nop
 800956c:	20005788 	.word	0x20005788

08009570 <__ssputs_r>:
 8009570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009574:	688e      	ldr	r6, [r1, #8]
 8009576:	429e      	cmp	r6, r3
 8009578:	4682      	mov	sl, r0
 800957a:	460c      	mov	r4, r1
 800957c:	4690      	mov	r8, r2
 800957e:	461f      	mov	r7, r3
 8009580:	d838      	bhi.n	80095f4 <__ssputs_r+0x84>
 8009582:	898a      	ldrh	r2, [r1, #12]
 8009584:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009588:	d032      	beq.n	80095f0 <__ssputs_r+0x80>
 800958a:	6825      	ldr	r5, [r4, #0]
 800958c:	6909      	ldr	r1, [r1, #16]
 800958e:	eba5 0901 	sub.w	r9, r5, r1
 8009592:	6965      	ldr	r5, [r4, #20]
 8009594:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009598:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800959c:	3301      	adds	r3, #1
 800959e:	444b      	add	r3, r9
 80095a0:	106d      	asrs	r5, r5, #1
 80095a2:	429d      	cmp	r5, r3
 80095a4:	bf38      	it	cc
 80095a6:	461d      	movcc	r5, r3
 80095a8:	0553      	lsls	r3, r2, #21
 80095aa:	d531      	bpl.n	8009610 <__ssputs_r+0xa0>
 80095ac:	4629      	mov	r1, r5
 80095ae:	f7ff ff6b 	bl	8009488 <_malloc_r>
 80095b2:	4606      	mov	r6, r0
 80095b4:	b950      	cbnz	r0, 80095cc <__ssputs_r+0x5c>
 80095b6:	230c      	movs	r3, #12
 80095b8:	f8ca 3000 	str.w	r3, [sl]
 80095bc:	89a3      	ldrh	r3, [r4, #12]
 80095be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095c2:	81a3      	strh	r3, [r4, #12]
 80095c4:	f04f 30ff 	mov.w	r0, #4294967295
 80095c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095cc:	6921      	ldr	r1, [r4, #16]
 80095ce:	464a      	mov	r2, r9
 80095d0:	f7ff fea6 	bl	8009320 <memcpy>
 80095d4:	89a3      	ldrh	r3, [r4, #12]
 80095d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80095da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095de:	81a3      	strh	r3, [r4, #12]
 80095e0:	6126      	str	r6, [r4, #16]
 80095e2:	6165      	str	r5, [r4, #20]
 80095e4:	444e      	add	r6, r9
 80095e6:	eba5 0509 	sub.w	r5, r5, r9
 80095ea:	6026      	str	r6, [r4, #0]
 80095ec:	60a5      	str	r5, [r4, #8]
 80095ee:	463e      	mov	r6, r7
 80095f0:	42be      	cmp	r6, r7
 80095f2:	d900      	bls.n	80095f6 <__ssputs_r+0x86>
 80095f4:	463e      	mov	r6, r7
 80095f6:	6820      	ldr	r0, [r4, #0]
 80095f8:	4632      	mov	r2, r6
 80095fa:	4641      	mov	r1, r8
 80095fc:	f000 fab8 	bl	8009b70 <memmove>
 8009600:	68a3      	ldr	r3, [r4, #8]
 8009602:	1b9b      	subs	r3, r3, r6
 8009604:	60a3      	str	r3, [r4, #8]
 8009606:	6823      	ldr	r3, [r4, #0]
 8009608:	4433      	add	r3, r6
 800960a:	6023      	str	r3, [r4, #0]
 800960c:	2000      	movs	r0, #0
 800960e:	e7db      	b.n	80095c8 <__ssputs_r+0x58>
 8009610:	462a      	mov	r2, r5
 8009612:	f000 fad3 	bl	8009bbc <_realloc_r>
 8009616:	4606      	mov	r6, r0
 8009618:	2800      	cmp	r0, #0
 800961a:	d1e1      	bne.n	80095e0 <__ssputs_r+0x70>
 800961c:	6921      	ldr	r1, [r4, #16]
 800961e:	4650      	mov	r0, sl
 8009620:	f7ff fec6 	bl	80093b0 <_free_r>
 8009624:	e7c7      	b.n	80095b6 <__ssputs_r+0x46>
	...

08009628 <_svfiprintf_r>:
 8009628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962c:	4698      	mov	r8, r3
 800962e:	898b      	ldrh	r3, [r1, #12]
 8009630:	061b      	lsls	r3, r3, #24
 8009632:	b09d      	sub	sp, #116	; 0x74
 8009634:	4607      	mov	r7, r0
 8009636:	460d      	mov	r5, r1
 8009638:	4614      	mov	r4, r2
 800963a:	d50e      	bpl.n	800965a <_svfiprintf_r+0x32>
 800963c:	690b      	ldr	r3, [r1, #16]
 800963e:	b963      	cbnz	r3, 800965a <_svfiprintf_r+0x32>
 8009640:	2140      	movs	r1, #64	; 0x40
 8009642:	f7ff ff21 	bl	8009488 <_malloc_r>
 8009646:	6028      	str	r0, [r5, #0]
 8009648:	6128      	str	r0, [r5, #16]
 800964a:	b920      	cbnz	r0, 8009656 <_svfiprintf_r+0x2e>
 800964c:	230c      	movs	r3, #12
 800964e:	603b      	str	r3, [r7, #0]
 8009650:	f04f 30ff 	mov.w	r0, #4294967295
 8009654:	e0d1      	b.n	80097fa <_svfiprintf_r+0x1d2>
 8009656:	2340      	movs	r3, #64	; 0x40
 8009658:	616b      	str	r3, [r5, #20]
 800965a:	2300      	movs	r3, #0
 800965c:	9309      	str	r3, [sp, #36]	; 0x24
 800965e:	2320      	movs	r3, #32
 8009660:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009664:	f8cd 800c 	str.w	r8, [sp, #12]
 8009668:	2330      	movs	r3, #48	; 0x30
 800966a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009814 <_svfiprintf_r+0x1ec>
 800966e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009672:	f04f 0901 	mov.w	r9, #1
 8009676:	4623      	mov	r3, r4
 8009678:	469a      	mov	sl, r3
 800967a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800967e:	b10a      	cbz	r2, 8009684 <_svfiprintf_r+0x5c>
 8009680:	2a25      	cmp	r2, #37	; 0x25
 8009682:	d1f9      	bne.n	8009678 <_svfiprintf_r+0x50>
 8009684:	ebba 0b04 	subs.w	fp, sl, r4
 8009688:	d00b      	beq.n	80096a2 <_svfiprintf_r+0x7a>
 800968a:	465b      	mov	r3, fp
 800968c:	4622      	mov	r2, r4
 800968e:	4629      	mov	r1, r5
 8009690:	4638      	mov	r0, r7
 8009692:	f7ff ff6d 	bl	8009570 <__ssputs_r>
 8009696:	3001      	adds	r0, #1
 8009698:	f000 80aa 	beq.w	80097f0 <_svfiprintf_r+0x1c8>
 800969c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800969e:	445a      	add	r2, fp
 80096a0:	9209      	str	r2, [sp, #36]	; 0x24
 80096a2:	f89a 3000 	ldrb.w	r3, [sl]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f000 80a2 	beq.w	80097f0 <_svfiprintf_r+0x1c8>
 80096ac:	2300      	movs	r3, #0
 80096ae:	f04f 32ff 	mov.w	r2, #4294967295
 80096b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096b6:	f10a 0a01 	add.w	sl, sl, #1
 80096ba:	9304      	str	r3, [sp, #16]
 80096bc:	9307      	str	r3, [sp, #28]
 80096be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80096c2:	931a      	str	r3, [sp, #104]	; 0x68
 80096c4:	4654      	mov	r4, sl
 80096c6:	2205      	movs	r2, #5
 80096c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096cc:	4851      	ldr	r0, [pc, #324]	; (8009814 <_svfiprintf_r+0x1ec>)
 80096ce:	f7f6 fd87 	bl	80001e0 <memchr>
 80096d2:	9a04      	ldr	r2, [sp, #16]
 80096d4:	b9d8      	cbnz	r0, 800970e <_svfiprintf_r+0xe6>
 80096d6:	06d0      	lsls	r0, r2, #27
 80096d8:	bf44      	itt	mi
 80096da:	2320      	movmi	r3, #32
 80096dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096e0:	0711      	lsls	r1, r2, #28
 80096e2:	bf44      	itt	mi
 80096e4:	232b      	movmi	r3, #43	; 0x2b
 80096e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80096ea:	f89a 3000 	ldrb.w	r3, [sl]
 80096ee:	2b2a      	cmp	r3, #42	; 0x2a
 80096f0:	d015      	beq.n	800971e <_svfiprintf_r+0xf6>
 80096f2:	9a07      	ldr	r2, [sp, #28]
 80096f4:	4654      	mov	r4, sl
 80096f6:	2000      	movs	r0, #0
 80096f8:	f04f 0c0a 	mov.w	ip, #10
 80096fc:	4621      	mov	r1, r4
 80096fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009702:	3b30      	subs	r3, #48	; 0x30
 8009704:	2b09      	cmp	r3, #9
 8009706:	d94e      	bls.n	80097a6 <_svfiprintf_r+0x17e>
 8009708:	b1b0      	cbz	r0, 8009738 <_svfiprintf_r+0x110>
 800970a:	9207      	str	r2, [sp, #28]
 800970c:	e014      	b.n	8009738 <_svfiprintf_r+0x110>
 800970e:	eba0 0308 	sub.w	r3, r0, r8
 8009712:	fa09 f303 	lsl.w	r3, r9, r3
 8009716:	4313      	orrs	r3, r2
 8009718:	9304      	str	r3, [sp, #16]
 800971a:	46a2      	mov	sl, r4
 800971c:	e7d2      	b.n	80096c4 <_svfiprintf_r+0x9c>
 800971e:	9b03      	ldr	r3, [sp, #12]
 8009720:	1d19      	adds	r1, r3, #4
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	9103      	str	r1, [sp, #12]
 8009726:	2b00      	cmp	r3, #0
 8009728:	bfbb      	ittet	lt
 800972a:	425b      	neglt	r3, r3
 800972c:	f042 0202 	orrlt.w	r2, r2, #2
 8009730:	9307      	strge	r3, [sp, #28]
 8009732:	9307      	strlt	r3, [sp, #28]
 8009734:	bfb8      	it	lt
 8009736:	9204      	strlt	r2, [sp, #16]
 8009738:	7823      	ldrb	r3, [r4, #0]
 800973a:	2b2e      	cmp	r3, #46	; 0x2e
 800973c:	d10c      	bne.n	8009758 <_svfiprintf_r+0x130>
 800973e:	7863      	ldrb	r3, [r4, #1]
 8009740:	2b2a      	cmp	r3, #42	; 0x2a
 8009742:	d135      	bne.n	80097b0 <_svfiprintf_r+0x188>
 8009744:	9b03      	ldr	r3, [sp, #12]
 8009746:	1d1a      	adds	r2, r3, #4
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	9203      	str	r2, [sp, #12]
 800974c:	2b00      	cmp	r3, #0
 800974e:	bfb8      	it	lt
 8009750:	f04f 33ff 	movlt.w	r3, #4294967295
 8009754:	3402      	adds	r4, #2
 8009756:	9305      	str	r3, [sp, #20]
 8009758:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009824 <_svfiprintf_r+0x1fc>
 800975c:	7821      	ldrb	r1, [r4, #0]
 800975e:	2203      	movs	r2, #3
 8009760:	4650      	mov	r0, sl
 8009762:	f7f6 fd3d 	bl	80001e0 <memchr>
 8009766:	b140      	cbz	r0, 800977a <_svfiprintf_r+0x152>
 8009768:	2340      	movs	r3, #64	; 0x40
 800976a:	eba0 000a 	sub.w	r0, r0, sl
 800976e:	fa03 f000 	lsl.w	r0, r3, r0
 8009772:	9b04      	ldr	r3, [sp, #16]
 8009774:	4303      	orrs	r3, r0
 8009776:	3401      	adds	r4, #1
 8009778:	9304      	str	r3, [sp, #16]
 800977a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800977e:	4826      	ldr	r0, [pc, #152]	; (8009818 <_svfiprintf_r+0x1f0>)
 8009780:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009784:	2206      	movs	r2, #6
 8009786:	f7f6 fd2b 	bl	80001e0 <memchr>
 800978a:	2800      	cmp	r0, #0
 800978c:	d038      	beq.n	8009800 <_svfiprintf_r+0x1d8>
 800978e:	4b23      	ldr	r3, [pc, #140]	; (800981c <_svfiprintf_r+0x1f4>)
 8009790:	bb1b      	cbnz	r3, 80097da <_svfiprintf_r+0x1b2>
 8009792:	9b03      	ldr	r3, [sp, #12]
 8009794:	3307      	adds	r3, #7
 8009796:	f023 0307 	bic.w	r3, r3, #7
 800979a:	3308      	adds	r3, #8
 800979c:	9303      	str	r3, [sp, #12]
 800979e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097a0:	4433      	add	r3, r6
 80097a2:	9309      	str	r3, [sp, #36]	; 0x24
 80097a4:	e767      	b.n	8009676 <_svfiprintf_r+0x4e>
 80097a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80097aa:	460c      	mov	r4, r1
 80097ac:	2001      	movs	r0, #1
 80097ae:	e7a5      	b.n	80096fc <_svfiprintf_r+0xd4>
 80097b0:	2300      	movs	r3, #0
 80097b2:	3401      	adds	r4, #1
 80097b4:	9305      	str	r3, [sp, #20]
 80097b6:	4619      	mov	r1, r3
 80097b8:	f04f 0c0a 	mov.w	ip, #10
 80097bc:	4620      	mov	r0, r4
 80097be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097c2:	3a30      	subs	r2, #48	; 0x30
 80097c4:	2a09      	cmp	r2, #9
 80097c6:	d903      	bls.n	80097d0 <_svfiprintf_r+0x1a8>
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d0c5      	beq.n	8009758 <_svfiprintf_r+0x130>
 80097cc:	9105      	str	r1, [sp, #20]
 80097ce:	e7c3      	b.n	8009758 <_svfiprintf_r+0x130>
 80097d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80097d4:	4604      	mov	r4, r0
 80097d6:	2301      	movs	r3, #1
 80097d8:	e7f0      	b.n	80097bc <_svfiprintf_r+0x194>
 80097da:	ab03      	add	r3, sp, #12
 80097dc:	9300      	str	r3, [sp, #0]
 80097de:	462a      	mov	r2, r5
 80097e0:	4b0f      	ldr	r3, [pc, #60]	; (8009820 <_svfiprintf_r+0x1f8>)
 80097e2:	a904      	add	r1, sp, #16
 80097e4:	4638      	mov	r0, r7
 80097e6:	f3af 8000 	nop.w
 80097ea:	1c42      	adds	r2, r0, #1
 80097ec:	4606      	mov	r6, r0
 80097ee:	d1d6      	bne.n	800979e <_svfiprintf_r+0x176>
 80097f0:	89ab      	ldrh	r3, [r5, #12]
 80097f2:	065b      	lsls	r3, r3, #25
 80097f4:	f53f af2c 	bmi.w	8009650 <_svfiprintf_r+0x28>
 80097f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80097fa:	b01d      	add	sp, #116	; 0x74
 80097fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009800:	ab03      	add	r3, sp, #12
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	462a      	mov	r2, r5
 8009806:	4b06      	ldr	r3, [pc, #24]	; (8009820 <_svfiprintf_r+0x1f8>)
 8009808:	a904      	add	r1, sp, #16
 800980a:	4638      	mov	r0, r7
 800980c:	f000 f87a 	bl	8009904 <_printf_i>
 8009810:	e7eb      	b.n	80097ea <_svfiprintf_r+0x1c2>
 8009812:	bf00      	nop
 8009814:	08009e9c 	.word	0x08009e9c
 8009818:	08009ea6 	.word	0x08009ea6
 800981c:	00000000 	.word	0x00000000
 8009820:	08009571 	.word	0x08009571
 8009824:	08009ea2 	.word	0x08009ea2

08009828 <_printf_common>:
 8009828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800982c:	4616      	mov	r6, r2
 800982e:	4699      	mov	r9, r3
 8009830:	688a      	ldr	r2, [r1, #8]
 8009832:	690b      	ldr	r3, [r1, #16]
 8009834:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009838:	4293      	cmp	r3, r2
 800983a:	bfb8      	it	lt
 800983c:	4613      	movlt	r3, r2
 800983e:	6033      	str	r3, [r6, #0]
 8009840:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009844:	4607      	mov	r7, r0
 8009846:	460c      	mov	r4, r1
 8009848:	b10a      	cbz	r2, 800984e <_printf_common+0x26>
 800984a:	3301      	adds	r3, #1
 800984c:	6033      	str	r3, [r6, #0]
 800984e:	6823      	ldr	r3, [r4, #0]
 8009850:	0699      	lsls	r1, r3, #26
 8009852:	bf42      	ittt	mi
 8009854:	6833      	ldrmi	r3, [r6, #0]
 8009856:	3302      	addmi	r3, #2
 8009858:	6033      	strmi	r3, [r6, #0]
 800985a:	6825      	ldr	r5, [r4, #0]
 800985c:	f015 0506 	ands.w	r5, r5, #6
 8009860:	d106      	bne.n	8009870 <_printf_common+0x48>
 8009862:	f104 0a19 	add.w	sl, r4, #25
 8009866:	68e3      	ldr	r3, [r4, #12]
 8009868:	6832      	ldr	r2, [r6, #0]
 800986a:	1a9b      	subs	r3, r3, r2
 800986c:	42ab      	cmp	r3, r5
 800986e:	dc26      	bgt.n	80098be <_printf_common+0x96>
 8009870:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009874:	1e13      	subs	r3, r2, #0
 8009876:	6822      	ldr	r2, [r4, #0]
 8009878:	bf18      	it	ne
 800987a:	2301      	movne	r3, #1
 800987c:	0692      	lsls	r2, r2, #26
 800987e:	d42b      	bmi.n	80098d8 <_printf_common+0xb0>
 8009880:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009884:	4649      	mov	r1, r9
 8009886:	4638      	mov	r0, r7
 8009888:	47c0      	blx	r8
 800988a:	3001      	adds	r0, #1
 800988c:	d01e      	beq.n	80098cc <_printf_common+0xa4>
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	68e5      	ldr	r5, [r4, #12]
 8009892:	6832      	ldr	r2, [r6, #0]
 8009894:	f003 0306 	and.w	r3, r3, #6
 8009898:	2b04      	cmp	r3, #4
 800989a:	bf08      	it	eq
 800989c:	1aad      	subeq	r5, r5, r2
 800989e:	68a3      	ldr	r3, [r4, #8]
 80098a0:	6922      	ldr	r2, [r4, #16]
 80098a2:	bf0c      	ite	eq
 80098a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098a8:	2500      	movne	r5, #0
 80098aa:	4293      	cmp	r3, r2
 80098ac:	bfc4      	itt	gt
 80098ae:	1a9b      	subgt	r3, r3, r2
 80098b0:	18ed      	addgt	r5, r5, r3
 80098b2:	2600      	movs	r6, #0
 80098b4:	341a      	adds	r4, #26
 80098b6:	42b5      	cmp	r5, r6
 80098b8:	d11a      	bne.n	80098f0 <_printf_common+0xc8>
 80098ba:	2000      	movs	r0, #0
 80098bc:	e008      	b.n	80098d0 <_printf_common+0xa8>
 80098be:	2301      	movs	r3, #1
 80098c0:	4652      	mov	r2, sl
 80098c2:	4649      	mov	r1, r9
 80098c4:	4638      	mov	r0, r7
 80098c6:	47c0      	blx	r8
 80098c8:	3001      	adds	r0, #1
 80098ca:	d103      	bne.n	80098d4 <_printf_common+0xac>
 80098cc:	f04f 30ff 	mov.w	r0, #4294967295
 80098d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098d4:	3501      	adds	r5, #1
 80098d6:	e7c6      	b.n	8009866 <_printf_common+0x3e>
 80098d8:	18e1      	adds	r1, r4, r3
 80098da:	1c5a      	adds	r2, r3, #1
 80098dc:	2030      	movs	r0, #48	; 0x30
 80098de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80098e2:	4422      	add	r2, r4
 80098e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80098e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80098ec:	3302      	adds	r3, #2
 80098ee:	e7c7      	b.n	8009880 <_printf_common+0x58>
 80098f0:	2301      	movs	r3, #1
 80098f2:	4622      	mov	r2, r4
 80098f4:	4649      	mov	r1, r9
 80098f6:	4638      	mov	r0, r7
 80098f8:	47c0      	blx	r8
 80098fa:	3001      	adds	r0, #1
 80098fc:	d0e6      	beq.n	80098cc <_printf_common+0xa4>
 80098fe:	3601      	adds	r6, #1
 8009900:	e7d9      	b.n	80098b6 <_printf_common+0x8e>
	...

08009904 <_printf_i>:
 8009904:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009908:	7e0f      	ldrb	r7, [r1, #24]
 800990a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800990c:	2f78      	cmp	r7, #120	; 0x78
 800990e:	4691      	mov	r9, r2
 8009910:	4680      	mov	r8, r0
 8009912:	460c      	mov	r4, r1
 8009914:	469a      	mov	sl, r3
 8009916:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800991a:	d807      	bhi.n	800992c <_printf_i+0x28>
 800991c:	2f62      	cmp	r7, #98	; 0x62
 800991e:	d80a      	bhi.n	8009936 <_printf_i+0x32>
 8009920:	2f00      	cmp	r7, #0
 8009922:	f000 80d8 	beq.w	8009ad6 <_printf_i+0x1d2>
 8009926:	2f58      	cmp	r7, #88	; 0x58
 8009928:	f000 80a3 	beq.w	8009a72 <_printf_i+0x16e>
 800992c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009930:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009934:	e03a      	b.n	80099ac <_printf_i+0xa8>
 8009936:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800993a:	2b15      	cmp	r3, #21
 800993c:	d8f6      	bhi.n	800992c <_printf_i+0x28>
 800993e:	a101      	add	r1, pc, #4	; (adr r1, 8009944 <_printf_i+0x40>)
 8009940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009944:	0800999d 	.word	0x0800999d
 8009948:	080099b1 	.word	0x080099b1
 800994c:	0800992d 	.word	0x0800992d
 8009950:	0800992d 	.word	0x0800992d
 8009954:	0800992d 	.word	0x0800992d
 8009958:	0800992d 	.word	0x0800992d
 800995c:	080099b1 	.word	0x080099b1
 8009960:	0800992d 	.word	0x0800992d
 8009964:	0800992d 	.word	0x0800992d
 8009968:	0800992d 	.word	0x0800992d
 800996c:	0800992d 	.word	0x0800992d
 8009970:	08009abd 	.word	0x08009abd
 8009974:	080099e1 	.word	0x080099e1
 8009978:	08009a9f 	.word	0x08009a9f
 800997c:	0800992d 	.word	0x0800992d
 8009980:	0800992d 	.word	0x0800992d
 8009984:	08009adf 	.word	0x08009adf
 8009988:	0800992d 	.word	0x0800992d
 800998c:	080099e1 	.word	0x080099e1
 8009990:	0800992d 	.word	0x0800992d
 8009994:	0800992d 	.word	0x0800992d
 8009998:	08009aa7 	.word	0x08009aa7
 800999c:	682b      	ldr	r3, [r5, #0]
 800999e:	1d1a      	adds	r2, r3, #4
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	602a      	str	r2, [r5, #0]
 80099a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099ac:	2301      	movs	r3, #1
 80099ae:	e0a3      	b.n	8009af8 <_printf_i+0x1f4>
 80099b0:	6820      	ldr	r0, [r4, #0]
 80099b2:	6829      	ldr	r1, [r5, #0]
 80099b4:	0606      	lsls	r6, r0, #24
 80099b6:	f101 0304 	add.w	r3, r1, #4
 80099ba:	d50a      	bpl.n	80099d2 <_printf_i+0xce>
 80099bc:	680e      	ldr	r6, [r1, #0]
 80099be:	602b      	str	r3, [r5, #0]
 80099c0:	2e00      	cmp	r6, #0
 80099c2:	da03      	bge.n	80099cc <_printf_i+0xc8>
 80099c4:	232d      	movs	r3, #45	; 0x2d
 80099c6:	4276      	negs	r6, r6
 80099c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099cc:	485e      	ldr	r0, [pc, #376]	; (8009b48 <_printf_i+0x244>)
 80099ce:	230a      	movs	r3, #10
 80099d0:	e019      	b.n	8009a06 <_printf_i+0x102>
 80099d2:	680e      	ldr	r6, [r1, #0]
 80099d4:	602b      	str	r3, [r5, #0]
 80099d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80099da:	bf18      	it	ne
 80099dc:	b236      	sxthne	r6, r6
 80099de:	e7ef      	b.n	80099c0 <_printf_i+0xbc>
 80099e0:	682b      	ldr	r3, [r5, #0]
 80099e2:	6820      	ldr	r0, [r4, #0]
 80099e4:	1d19      	adds	r1, r3, #4
 80099e6:	6029      	str	r1, [r5, #0]
 80099e8:	0601      	lsls	r1, r0, #24
 80099ea:	d501      	bpl.n	80099f0 <_printf_i+0xec>
 80099ec:	681e      	ldr	r6, [r3, #0]
 80099ee:	e002      	b.n	80099f6 <_printf_i+0xf2>
 80099f0:	0646      	lsls	r6, r0, #25
 80099f2:	d5fb      	bpl.n	80099ec <_printf_i+0xe8>
 80099f4:	881e      	ldrh	r6, [r3, #0]
 80099f6:	4854      	ldr	r0, [pc, #336]	; (8009b48 <_printf_i+0x244>)
 80099f8:	2f6f      	cmp	r7, #111	; 0x6f
 80099fa:	bf0c      	ite	eq
 80099fc:	2308      	moveq	r3, #8
 80099fe:	230a      	movne	r3, #10
 8009a00:	2100      	movs	r1, #0
 8009a02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a06:	6865      	ldr	r5, [r4, #4]
 8009a08:	60a5      	str	r5, [r4, #8]
 8009a0a:	2d00      	cmp	r5, #0
 8009a0c:	bfa2      	ittt	ge
 8009a0e:	6821      	ldrge	r1, [r4, #0]
 8009a10:	f021 0104 	bicge.w	r1, r1, #4
 8009a14:	6021      	strge	r1, [r4, #0]
 8009a16:	b90e      	cbnz	r6, 8009a1c <_printf_i+0x118>
 8009a18:	2d00      	cmp	r5, #0
 8009a1a:	d04d      	beq.n	8009ab8 <_printf_i+0x1b4>
 8009a1c:	4615      	mov	r5, r2
 8009a1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a22:	fb03 6711 	mls	r7, r3, r1, r6
 8009a26:	5dc7      	ldrb	r7, [r0, r7]
 8009a28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a2c:	4637      	mov	r7, r6
 8009a2e:	42bb      	cmp	r3, r7
 8009a30:	460e      	mov	r6, r1
 8009a32:	d9f4      	bls.n	8009a1e <_printf_i+0x11a>
 8009a34:	2b08      	cmp	r3, #8
 8009a36:	d10b      	bne.n	8009a50 <_printf_i+0x14c>
 8009a38:	6823      	ldr	r3, [r4, #0]
 8009a3a:	07de      	lsls	r6, r3, #31
 8009a3c:	d508      	bpl.n	8009a50 <_printf_i+0x14c>
 8009a3e:	6923      	ldr	r3, [r4, #16]
 8009a40:	6861      	ldr	r1, [r4, #4]
 8009a42:	4299      	cmp	r1, r3
 8009a44:	bfde      	ittt	le
 8009a46:	2330      	movle	r3, #48	; 0x30
 8009a48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009a50:	1b52      	subs	r2, r2, r5
 8009a52:	6122      	str	r2, [r4, #16]
 8009a54:	f8cd a000 	str.w	sl, [sp]
 8009a58:	464b      	mov	r3, r9
 8009a5a:	aa03      	add	r2, sp, #12
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	4640      	mov	r0, r8
 8009a60:	f7ff fee2 	bl	8009828 <_printf_common>
 8009a64:	3001      	adds	r0, #1
 8009a66:	d14c      	bne.n	8009b02 <_printf_i+0x1fe>
 8009a68:	f04f 30ff 	mov.w	r0, #4294967295
 8009a6c:	b004      	add	sp, #16
 8009a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a72:	4835      	ldr	r0, [pc, #212]	; (8009b48 <_printf_i+0x244>)
 8009a74:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009a78:	6829      	ldr	r1, [r5, #0]
 8009a7a:	6823      	ldr	r3, [r4, #0]
 8009a7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009a80:	6029      	str	r1, [r5, #0]
 8009a82:	061d      	lsls	r5, r3, #24
 8009a84:	d514      	bpl.n	8009ab0 <_printf_i+0x1ac>
 8009a86:	07df      	lsls	r7, r3, #31
 8009a88:	bf44      	itt	mi
 8009a8a:	f043 0320 	orrmi.w	r3, r3, #32
 8009a8e:	6023      	strmi	r3, [r4, #0]
 8009a90:	b91e      	cbnz	r6, 8009a9a <_printf_i+0x196>
 8009a92:	6823      	ldr	r3, [r4, #0]
 8009a94:	f023 0320 	bic.w	r3, r3, #32
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	2310      	movs	r3, #16
 8009a9c:	e7b0      	b.n	8009a00 <_printf_i+0xfc>
 8009a9e:	6823      	ldr	r3, [r4, #0]
 8009aa0:	f043 0320 	orr.w	r3, r3, #32
 8009aa4:	6023      	str	r3, [r4, #0]
 8009aa6:	2378      	movs	r3, #120	; 0x78
 8009aa8:	4828      	ldr	r0, [pc, #160]	; (8009b4c <_printf_i+0x248>)
 8009aaa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009aae:	e7e3      	b.n	8009a78 <_printf_i+0x174>
 8009ab0:	0659      	lsls	r1, r3, #25
 8009ab2:	bf48      	it	mi
 8009ab4:	b2b6      	uxthmi	r6, r6
 8009ab6:	e7e6      	b.n	8009a86 <_printf_i+0x182>
 8009ab8:	4615      	mov	r5, r2
 8009aba:	e7bb      	b.n	8009a34 <_printf_i+0x130>
 8009abc:	682b      	ldr	r3, [r5, #0]
 8009abe:	6826      	ldr	r6, [r4, #0]
 8009ac0:	6961      	ldr	r1, [r4, #20]
 8009ac2:	1d18      	adds	r0, r3, #4
 8009ac4:	6028      	str	r0, [r5, #0]
 8009ac6:	0635      	lsls	r5, r6, #24
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	d501      	bpl.n	8009ad0 <_printf_i+0x1cc>
 8009acc:	6019      	str	r1, [r3, #0]
 8009ace:	e002      	b.n	8009ad6 <_printf_i+0x1d2>
 8009ad0:	0670      	lsls	r0, r6, #25
 8009ad2:	d5fb      	bpl.n	8009acc <_printf_i+0x1c8>
 8009ad4:	8019      	strh	r1, [r3, #0]
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	6123      	str	r3, [r4, #16]
 8009ada:	4615      	mov	r5, r2
 8009adc:	e7ba      	b.n	8009a54 <_printf_i+0x150>
 8009ade:	682b      	ldr	r3, [r5, #0]
 8009ae0:	1d1a      	adds	r2, r3, #4
 8009ae2:	602a      	str	r2, [r5, #0]
 8009ae4:	681d      	ldr	r5, [r3, #0]
 8009ae6:	6862      	ldr	r2, [r4, #4]
 8009ae8:	2100      	movs	r1, #0
 8009aea:	4628      	mov	r0, r5
 8009aec:	f7f6 fb78 	bl	80001e0 <memchr>
 8009af0:	b108      	cbz	r0, 8009af6 <_printf_i+0x1f2>
 8009af2:	1b40      	subs	r0, r0, r5
 8009af4:	6060      	str	r0, [r4, #4]
 8009af6:	6863      	ldr	r3, [r4, #4]
 8009af8:	6123      	str	r3, [r4, #16]
 8009afa:	2300      	movs	r3, #0
 8009afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b00:	e7a8      	b.n	8009a54 <_printf_i+0x150>
 8009b02:	6923      	ldr	r3, [r4, #16]
 8009b04:	462a      	mov	r2, r5
 8009b06:	4649      	mov	r1, r9
 8009b08:	4640      	mov	r0, r8
 8009b0a:	47d0      	blx	sl
 8009b0c:	3001      	adds	r0, #1
 8009b0e:	d0ab      	beq.n	8009a68 <_printf_i+0x164>
 8009b10:	6823      	ldr	r3, [r4, #0]
 8009b12:	079b      	lsls	r3, r3, #30
 8009b14:	d413      	bmi.n	8009b3e <_printf_i+0x23a>
 8009b16:	68e0      	ldr	r0, [r4, #12]
 8009b18:	9b03      	ldr	r3, [sp, #12]
 8009b1a:	4298      	cmp	r0, r3
 8009b1c:	bfb8      	it	lt
 8009b1e:	4618      	movlt	r0, r3
 8009b20:	e7a4      	b.n	8009a6c <_printf_i+0x168>
 8009b22:	2301      	movs	r3, #1
 8009b24:	4632      	mov	r2, r6
 8009b26:	4649      	mov	r1, r9
 8009b28:	4640      	mov	r0, r8
 8009b2a:	47d0      	blx	sl
 8009b2c:	3001      	adds	r0, #1
 8009b2e:	d09b      	beq.n	8009a68 <_printf_i+0x164>
 8009b30:	3501      	adds	r5, #1
 8009b32:	68e3      	ldr	r3, [r4, #12]
 8009b34:	9903      	ldr	r1, [sp, #12]
 8009b36:	1a5b      	subs	r3, r3, r1
 8009b38:	42ab      	cmp	r3, r5
 8009b3a:	dcf2      	bgt.n	8009b22 <_printf_i+0x21e>
 8009b3c:	e7eb      	b.n	8009b16 <_printf_i+0x212>
 8009b3e:	2500      	movs	r5, #0
 8009b40:	f104 0619 	add.w	r6, r4, #25
 8009b44:	e7f5      	b.n	8009b32 <_printf_i+0x22e>
 8009b46:	bf00      	nop
 8009b48:	08009ead 	.word	0x08009ead
 8009b4c:	08009ebe 	.word	0x08009ebe

08009b50 <_sbrk_r>:
 8009b50:	b538      	push	{r3, r4, r5, lr}
 8009b52:	4d06      	ldr	r5, [pc, #24]	; (8009b6c <_sbrk_r+0x1c>)
 8009b54:	2300      	movs	r3, #0
 8009b56:	4604      	mov	r4, r0
 8009b58:	4608      	mov	r0, r1
 8009b5a:	602b      	str	r3, [r5, #0]
 8009b5c:	f7f8 fe40 	bl	80027e0 <_sbrk>
 8009b60:	1c43      	adds	r3, r0, #1
 8009b62:	d102      	bne.n	8009b6a <_sbrk_r+0x1a>
 8009b64:	682b      	ldr	r3, [r5, #0]
 8009b66:	b103      	cbz	r3, 8009b6a <_sbrk_r+0x1a>
 8009b68:	6023      	str	r3, [r4, #0]
 8009b6a:	bd38      	pop	{r3, r4, r5, pc}
 8009b6c:	20005790 	.word	0x20005790

08009b70 <memmove>:
 8009b70:	4288      	cmp	r0, r1
 8009b72:	b510      	push	{r4, lr}
 8009b74:	eb01 0402 	add.w	r4, r1, r2
 8009b78:	d902      	bls.n	8009b80 <memmove+0x10>
 8009b7a:	4284      	cmp	r4, r0
 8009b7c:	4623      	mov	r3, r4
 8009b7e:	d807      	bhi.n	8009b90 <memmove+0x20>
 8009b80:	1e43      	subs	r3, r0, #1
 8009b82:	42a1      	cmp	r1, r4
 8009b84:	d008      	beq.n	8009b98 <memmove+0x28>
 8009b86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b8e:	e7f8      	b.n	8009b82 <memmove+0x12>
 8009b90:	4402      	add	r2, r0
 8009b92:	4601      	mov	r1, r0
 8009b94:	428a      	cmp	r2, r1
 8009b96:	d100      	bne.n	8009b9a <memmove+0x2a>
 8009b98:	bd10      	pop	{r4, pc}
 8009b9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ba2:	e7f7      	b.n	8009b94 <memmove+0x24>

08009ba4 <__malloc_lock>:
 8009ba4:	4801      	ldr	r0, [pc, #4]	; (8009bac <__malloc_lock+0x8>)
 8009ba6:	f7ff bc00 	b.w	80093aa <__retarget_lock_acquire_recursive>
 8009baa:	bf00      	nop
 8009bac:	20005784 	.word	0x20005784

08009bb0 <__malloc_unlock>:
 8009bb0:	4801      	ldr	r0, [pc, #4]	; (8009bb8 <__malloc_unlock+0x8>)
 8009bb2:	f7ff bbfb 	b.w	80093ac <__retarget_lock_release_recursive>
 8009bb6:	bf00      	nop
 8009bb8:	20005784 	.word	0x20005784

08009bbc <_realloc_r>:
 8009bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bc0:	4680      	mov	r8, r0
 8009bc2:	4614      	mov	r4, r2
 8009bc4:	460e      	mov	r6, r1
 8009bc6:	b921      	cbnz	r1, 8009bd2 <_realloc_r+0x16>
 8009bc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009bcc:	4611      	mov	r1, r2
 8009bce:	f7ff bc5b 	b.w	8009488 <_malloc_r>
 8009bd2:	b92a      	cbnz	r2, 8009be0 <_realloc_r+0x24>
 8009bd4:	f7ff fbec 	bl	80093b0 <_free_r>
 8009bd8:	4625      	mov	r5, r4
 8009bda:	4628      	mov	r0, r5
 8009bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009be0:	f000 f81b 	bl	8009c1a <_malloc_usable_size_r>
 8009be4:	4284      	cmp	r4, r0
 8009be6:	4607      	mov	r7, r0
 8009be8:	d802      	bhi.n	8009bf0 <_realloc_r+0x34>
 8009bea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009bee:	d812      	bhi.n	8009c16 <_realloc_r+0x5a>
 8009bf0:	4621      	mov	r1, r4
 8009bf2:	4640      	mov	r0, r8
 8009bf4:	f7ff fc48 	bl	8009488 <_malloc_r>
 8009bf8:	4605      	mov	r5, r0
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d0ed      	beq.n	8009bda <_realloc_r+0x1e>
 8009bfe:	42bc      	cmp	r4, r7
 8009c00:	4622      	mov	r2, r4
 8009c02:	4631      	mov	r1, r6
 8009c04:	bf28      	it	cs
 8009c06:	463a      	movcs	r2, r7
 8009c08:	f7ff fb8a 	bl	8009320 <memcpy>
 8009c0c:	4631      	mov	r1, r6
 8009c0e:	4640      	mov	r0, r8
 8009c10:	f7ff fbce 	bl	80093b0 <_free_r>
 8009c14:	e7e1      	b.n	8009bda <_realloc_r+0x1e>
 8009c16:	4635      	mov	r5, r6
 8009c18:	e7df      	b.n	8009bda <_realloc_r+0x1e>

08009c1a <_malloc_usable_size_r>:
 8009c1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c1e:	1f18      	subs	r0, r3, #4
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	bfbc      	itt	lt
 8009c24:	580b      	ldrlt	r3, [r1, r0]
 8009c26:	18c0      	addlt	r0, r0, r3
 8009c28:	4770      	bx	lr
	...

08009c2c <_init>:
 8009c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c2e:	bf00      	nop
 8009c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c32:	bc08      	pop	{r3}
 8009c34:	469e      	mov	lr, r3
 8009c36:	4770      	bx	lr

08009c38 <_fini>:
 8009c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c3a:	bf00      	nop
 8009c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c3e:	bc08      	pop	{r3}
 8009c40:	469e      	mov	lr, r3
 8009c42:	4770      	bx	lr
